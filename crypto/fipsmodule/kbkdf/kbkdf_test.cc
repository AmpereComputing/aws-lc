// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0 OR ISC

#include <openssl/digest.h>
#include <openssl/err.h>
#include <openssl/kbkdf.h>

#include <gtest/gtest.h>
#include "../../test/test_util.h"

// Test vectors from NIST CAVP for SP 800-108
// https://csrc.nist.gov/Projects/cryptographic-algorithm-validation-program/key-derivation

// "No counter" test vector
//
// This works! IF I leave "L" out of the PRF(...) data.
#if 0
const bool hmac_sha256_use_counter = false;
const uint8_t hmac_sha256_ki[] = {
    0x4b, 0x02, 0xff, 0xb1, 0xcb, 0x99, 0x87, 0x49, 0x6e, 0x19, 0x87, 0x25,
    0x97, 0xb0, 0x26, 0xf7, 0x40, 0x9d, 0x92, 0x43, 0x3f, 0x91, 0x35, 0x06,
    0x8c, 0x29, 0x30, 0x79, 0x85, 0x59, 0x85, 0x86
};
const uint8_t hmac_sha256_iv[] = {
    0x5c, 0x2a, 0x22, 0x62, 0xd1, 0x49, 0x94, 0x90, 0x4c, 0x9c, 0x2d, 0xe3,
    0x6d, 0x66, 0xc7, 0xeb, 0xda, 0xed, 0x32, 0xb5, 0xcc, 0x44, 0x1c, 0x22,
    0x22, 0x58, 0x85, 0x7f, 0x5a, 0xf2, 0x9b, 0xea
};
const uint8_t hmac_sha256_fixedinput[] = {
    0xa3, 0x8f, 0x30, 0x84, 0x41, 0x36, 0xc3, 0x3e, 0x00, 0xd4, 0x25, 0x4a,
    0x8b, 0xc5, 0xf5, 0x1e, 0x84, 0x73, 0xac, 0x20, 0xe5, 0x62, 0x8e, 0x77,
    0xe4, 0xd9, 0x1a, 0x70, 0x4d, 0x58, 0xbf, 0x0d, 0x4d, 0x0f, 0xef, 0xb5,
    0xf9, 0x2d, 0x89, 0x7f, 0x19, 0x58, 0xb0, 0xaf, 0x18, 0x81, 0x80, 0xb2,
    0xe2, 0xd2, 0xf7
};
const uint8_t hmac_sha256_ko[] = {
    0xef, 0x46, 0xa7, 0xcc, 0x3f, 0x2f, 0xd3, 0xaa, 0xc2, 0xd5, 0x5c, 0x73,
    0x86, 0xb9, 0x92, 0x79, 0x09, 0x8a, 0xd8, 0xaf, 0x07, 0xe1, 0x13, 0xc6,
    0x83, 0xe4, 0x36, 0x01, 0xd3, 0xe0, 0xc9, 0xa4, 0x81, 0x65, 0xa5, 0x80,
    0xd6, 0x0b, 0x9c, 0x2d, 0xf7, 0x5c, 0xdf, 0xc0, 0x66, 0x85, 0x56, 0x07,
    0xc0, 0xdd, 0x51, 0xad, 0x8f, 0xc0, 0x29, 0x6c, 0x3f, 0x72, 0xe8, 0x3d,
    0x3d, 0x57, 0x42, 0xe2
};
#endif

// "zero-length IV" test vector
//
// [PRF=HMAC_SHA256]
// [CTRLOCATION=AFTER_ITER]
// [RLEN=32_BITS]
//
// This works! IF I leave "L" out of the PRF(...) data. Also, this IV does
// not appear to be a zero-length IV.
const uint8_t hmac_sha256_use_counter = true;
const uint8_t hmac_sha256_ki[] = {
    0x94, 0xd7, 0x4e, 0xc6, 0x74, 0x78, 0x61, 0xa3, 0xb0, 0x6f, 0xbf, 0x8d,
    0xb8, 0xbc, 0xce, 0x62, 0x0b, 0xdc, 0xa7, 0xf1, 0xed, 0xaa, 0x51, 0x55,
    0xd3, 0x4b, 0x58, 0xeb, 0x29, 0xdf, 0x55, 0xd9
};
const uint8_t hmac_sha256_iv[] = {
    0x69, 0x47, 0x46, 0x50, 0x13, 0x93, 0xb2, 0xfd, 0xd1, 0x22, 0x0e, 0xb4,
    0xe5, 0x3a, 0x41, 0x96, 0x1f, 0x76, 0x0e, 0xdb, 0x43, 0xa4, 0x21, 0x6d,
    0x6a, 0x2a, 0x7c, 0x03, 0x06, 0xba, 0x16, 0x2b
};
const uint8_t hmac_sha256_fixedinput[] = {
    0xe6, 0x7c, 0x92, 0xa5, 0x81, 0x67, 0x46, 0x46, 0x4d, 0x8f, 0x12, 0xe3,
    0x21, 0x67, 0x66, 0x4d, 0xe4, 0xf1, 0x83, 0xd6, 0xc5, 0xa8, 0x67, 0x70,
    0x71, 0x03, 0xdb, 0x44, 0xb6, 0x97, 0xff, 0x50, 0x43, 0x4d, 0x21, 0x86,
    0x4c, 0x4f, 0xd1, 0xdf, 0x7f, 0xe9, 0x96, 0x29, 0xbe, 0x08, 0x94, 0xea,
    0xa4, 0x4c, 0xa6
};
const uint8_t hmac_sha256_ko[] = {
    0x14, 0x75, 0xbf, 0x8c, 0x0b, 0x29, 0xc2, 0x17, 0x20, 0x71, 0x65, 0xc6,
    0x61, 0x8b, 0x99, 0xe5, 0x9a, 0xf7, 0x73, 0x70, 0x6e, 0x9a, 0xfb, 0x11,
    0xa1, 0xb4, 0x6b, 0xbb, 0x7b, 0xc9, 0x8b, 0x26, 0xbf, 0xaa, 0x24, 0xd3,
    0x9d, 0x16, 0x8a, 0x6c, 0x5a, 0xe5, 0xe5, 0x8d, 0x25, 0xe9, 0x81, 0x77,
    0x85, 0xff, 0xdd, 0x1e, 0x41, 0x9b, 0xcb, 0xc9, 0xed, 0x04, 0x3e, 0xf4,
    0x22, 0x23, 0xc4, 0xb6
};

// "non-zero-length IV" test vector
//
// [PRF=HMAC_SHA256]
// [CTRLOCATION=AFTER_ITER]
// [RLEN=32_BITS]
//
// This works! IF I leave "L" out of the PRF(...) data. I am confuse.
#if 0
const uint8_t hmac_sha256_use_counter = true;
const uint8_t hmac_sha256_ki[] = {
    0x93, 0xf6, 0x98, 0xe8, 0x42, 0xee, 0xd7, 0x53, 0x94, 0xd6, 0x29, 0xd9,
    0x57, 0xe2, 0xe8, 0x9c, 0x6e, 0x74, 0x1f, 0x81, 0x0b, 0x62, 0x3c, 0x8b,
    0x90, 0x1e, 0x38, 0x37, 0x6d, 0x06, 0x8e, 0x7b
};
const uint8_t hmac_sha256_iv[] = {
    0x9f, 0x57, 0x5d, 0x90, 0x59, 0xd3, 0xe0, 0xc0, 0x80, 0x3f, 0x08, 0x11,
    0x2f, 0x8a, 0x80, 0x6d, 0xe3, 0xc3, 0x47, 0x19, 0x12, 0xcd, 0xf4, 0x2b,
    0x09, 0x53, 0x88, 0xb1, 0x4b, 0x33, 0x50, 0x8e
};
const uint8_t hmac_sha256_fixedinput[] = {
    0x53, 0xb8, 0x9c, 0x18, 0x69, 0x0e, 0x20, 0x57, 0xa1, 0xd1, 0x67, 0x82,
    0x2e, 0x63, 0x6d, 0xe5, 0x0b, 0xe0, 0x01, 0x85, 0x32, 0xc4, 0x31, 0xf7,
    0xf5, 0xe3, 0x7f, 0x77, 0x13, 0x92, 0x20, 0xd5, 0xe0, 0x42, 0x59, 0x9e,
    0xbe, 0x26, 0x6a, 0xf5, 0x76, 0x7e, 0xe1, 0x8c, 0xd2, 0xc5, 0xc1, 0x9a,
    0x1f, 0x0f, 0x80
};
const uint8_t hmac_sha256_ko[] = {
    0xbd, 0x14, 0x76, 0xf4, 0x3a, 0x4e, 0x31, 0x57, 0x47, 0xcf, 0x59, 0x18,
    0xe0, 0xea, 0x5b, 0xc0, 0xd9, 0x87, 0x69, 0x45, 0x74, 0x77, 0xc3, 0xab,
    0x18, 0xb7, 0x42, 0xde, 0xf0, 0xe0, 0x79, 0xa9, 0x33, 0xb7, 0x56, 0x36,
    0x5a, 0xfb, 0x55, 0x41, 0xf2, 0x53, 0xfe, 0xe4, 0x3c, 0x6f, 0xd7, 0x88,
    0xa4, 0x40, 0x41, 0x03, 0x85, 0x09, 0xe9, 0xee, 0xb6, 0x8f, 0x7d, 0x65,
    0xff, 0xbb, 0x5f, 0x95
};
#endif

struct KBKDFTestVector {
  const EVP_MD *(*md_func)(void);

  const uint8_t *ki;
  const size_t ki_len;
  const uint8_t *label;
  const size_t label_len;
  const uint8_t *context;
  const size_t context_len;
  const uint8_t *iv;
  const size_t iv_len;
  const bool use_counter;

  const uint8_t *expected;
  const size_t expected_len;
};

static const KBKDFTestVector vectors[] = {
    {
        EVP_sha256,
        hmac_sha256_ki, sizeof(hmac_sha256_ki),
        hmac_sha256_fixedinput, sizeof(hmac_sha256_fixedinput),
        NULL, 0,  // included in fixedinput
        hmac_sha256_iv, sizeof(hmac_sha256_iv),
        hmac_sha256_use_counter,
        hmac_sha256_ko, sizeof(hmac_sha256_ko)
    },
};

class KBKDF_Test : public testing::TestWithParam<KBKDFTestVector> {
};

INSTANTIATE_TEST_SUITE_P(All, KBKDF_Test,
                         testing::ValuesIn(vectors));

TEST_P(KBKDF_Test, KBKDF_PLEASE_WORK) {
    const KBKDFTestVector &test = GetParam();

    uint8_t output[sizeof(hmac_sha256_ko)] = {0};

    EXPECT_TRUE(KBKDF_feedback(output, sizeof(output),
                               test.md_func(),
                               test.ki, test.ki_len,
                               test.label, test.label_len,
                               test.context, test.context_len,
                               test.iv, test.iv_len,
                               test.use_counter));
    EXPECT_EQ(Bytes(test.expected, test.expected_len),
                  Bytes(output, test.expected_len));
}
