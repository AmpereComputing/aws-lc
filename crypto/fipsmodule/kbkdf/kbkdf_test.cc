// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0 OR ISC

#include <openssl/digest.h>
#include <openssl/err.h>
#include <openssl/kbkdf.h>

#include <gtest/gtest.h>
#include "../../test/test_util.h"

// Test vectors from NIST CAVP for SP 800-108
// https://csrc.nist.gov/Projects/cryptographic-algorithm-validation-program/key-derivation

// "No counter" test vectors
const uint8_t nc_hmac_sha1_ki[] = {
    0xfd, 0xf0, 0x7e, 0x2d, 0xbb, 0x4d, 0x4b, 0x19, 0x1a, 0x4b, 0x3b, 0x89,
    0x0c, 0xd8, 0x94, 0x47, 0x02, 0x5d, 0x97, 0xb9
};
const uint8_t nc_hmac_sha1_iv[] = {
    0xea, 0x4c, 0xfd, 0x92, 0x7b, 0x6e, 0x30, 0x52, 0x0e, 0x98, 0x7c, 0x70,
    0xbc, 0x46, 0x60, 0x74, 0x81, 0xf0, 0x2c, 0xe2
};
const uint8_t nc_hmac_sha1_fixedinput[] = {
    0x9e, 0xc5, 0x7b, 0x91, 0xf8, 0x53, 0x2a, 0xa5, 0x84, 0x59, 0x60, 0xeb,
    0xee, 0x87, 0xe7, 0x0f, 0xe5, 0xc8, 0xc5, 0xf0, 0x30, 0xd3, 0xf7, 0xf6,
    0xc8, 0x8b, 0xbb, 0x0e, 0xee, 0xa6, 0xa4, 0xcf, 0xca, 0x7b, 0x13, 0x50,
    0x9d, 0x2e, 0x62, 0x50, 0x6c, 0xf0, 0x0e, 0x42, 0xa8, 0x10, 0x8e, 0x9a,
    0x71, 0x65, 0x7b
};
const uint8_t nc_hmac_sha1_ko[] = {
    0xb8, 0xc1, 0xa0, 0xaa, 0x34, 0x49, 0x62, 0xd1, 0x52, 0x5a, 0x18, 0x21,
    0x20, 0xdc, 0xbc, 0xf6, 0x01, 0xf4, 0x36, 0xb4, 0xad, 0x8f, 0xfe, 0x05,
    0x6c, 0xd4, 0xe3, 0xf8, 0x5e, 0x63, 0xa3, 0x5b, 0xcf, 0x14, 0x7f, 0x2a,
    0x48, 0xaa, 0xfb, 0x43, 0x1b, 0x72, 0xdb, 0x33, 0x9c, 0x2b, 0x28, 0xb4,
    0x15, 0x76, 0x34, 0xc2, 0xd7, 0xe8, 0x0a, 0x93, 0xa1, 0x5b, 0x34, 0x0f,
    0x7b, 0x15, 0x07, 0xb0
};

const uint8_t nc_hmac_sha224_ki[] = {
    0x42, 0xa3, 0x21, 0x2e, 0xbc, 0x83, 0x67, 0x27, 0x58, 0x81, 0xbe, 0x71,
    0xcd, 0x40, 0xf1, 0x92, 0x9e, 0x5a, 0x2b, 0x04, 0x8e, 0x28, 0x84, 0xa8,
    0xf2, 0xf3, 0x0a, 0x65
};
const uint8_t nc_hmac_sha224_iv[] = {
    0x59, 0xd5, 0xef, 0x0a, 0x3c, 0xda, 0xd6, 0xba, 0x22, 0x86, 0xe6, 0xf0,
    0x31, 0x5a, 0x06, 0x82, 0x2a, 0x20, 0x36, 0xcb, 0xa2, 0xc2, 0x4a, 0xa9,
    0x6a, 0x7b, 0x6b, 0x1b
};
const uint8_t nc_hmac_sha224_fixedinput[] = {
    0x67, 0x42, 0x71, 0x5d, 0xfc, 0x2f, 0x21, 0x1c, 0xa4, 0xa0, 0xff, 0x28,
    0x24, 0x6f, 0xfe, 0xe2, 0x7c, 0x4c, 0x04, 0x17, 0x59, 0xc1, 0xf1, 0x7a,
    0x17, 0xfd, 0xec, 0xb9, 0x6f, 0x3f, 0x31, 0x16, 0x93, 0x98, 0x2e, 0x41,
    0xe1, 0x28, 0x9a, 0xb3, 0xbe, 0x97, 0x38, 0x48, 0x0a, 0xc9, 0x40, 0xf4,
    0x98, 0x3b, 0xb8
};
const uint8_t nc_hmac_sha224_ko[] = {
    0x70, 0x36, 0x61, 0x1b, 0xb4, 0x70, 0x43, 0x61, 0xc5, 0xc5, 0x59, 0x33,
    0x9c, 0x6b, 0x53, 0x60, 0x04, 0x64, 0x04, 0xd8, 0x9a, 0x0f, 0xed, 0xcb,
    0xe3, 0x21, 0xb2, 0x92, 0x14, 0x7e, 0xf2, 0x98, 0x82, 0x31, 0xf5, 0xce,
    0x80, 0xa3, 0x89, 0xa3, 0x96, 0x4c, 0xfa, 0x17, 0x62, 0x76, 0xa0, 0x25,
    0xed, 0x59, 0x5f, 0x25, 0x48, 0x08, 0xdd, 0x78, 0xfb, 0x6a, 0x6c, 0xa8,
    0x29, 0x7f, 0x8b, 0x79
};

const uint8_t nc_hmac_sha256_ki[] = {
    0x4b, 0x02, 0xff, 0xb1, 0xcb, 0x99, 0x87, 0x49, 0x6e, 0x19, 0x87, 0x25,
    0x97, 0xb0, 0x26, 0xf7, 0x40, 0x9d, 0x92, 0x43, 0x3f, 0x91, 0x35, 0x06,
    0x8c, 0x29, 0x30, 0x79, 0x85, 0x59, 0x85, 0x86
};
const uint8_t nc_hmac_sha256_iv[] = {
    0x5c, 0x2a, 0x22, 0x62, 0xd1, 0x49, 0x94, 0x90, 0x4c, 0x9c, 0x2d, 0xe3,
    0x6d, 0x66, 0xc7, 0xeb, 0xda, 0xed, 0x32, 0xb5, 0xcc, 0x44, 0x1c, 0x22,
    0x22, 0x58, 0x85, 0x7f, 0x5a, 0xf2, 0x9b, 0xea
};
const uint8_t nc_hmac_sha256_fixedinput[] = {
    0xa3, 0x8f, 0x30, 0x84, 0x41, 0x36, 0xc3, 0x3e, 0x00, 0xd4, 0x25, 0x4a,
    0x8b, 0xc5, 0xf5, 0x1e, 0x84, 0x73, 0xac, 0x20, 0xe5, 0x62, 0x8e, 0x77,
    0xe4, 0xd9, 0x1a, 0x70, 0x4d, 0x58, 0xbf, 0x0d, 0x4d, 0x0f, 0xef, 0xb5,
    0xf9, 0x2d, 0x89, 0x7f, 0x19, 0x58, 0xb0, 0xaf, 0x18, 0x81, 0x80, 0xb2,
    0xe2, 0xd2, 0xf7
};
const uint8_t nc_hmac_sha256_ko[] = {
    0xef, 0x46, 0xa7, 0xcc, 0x3f, 0x2f, 0xd3, 0xaa, 0xc2, 0xd5, 0x5c, 0x73,
    0x86, 0xb9, 0x92, 0x79, 0x09, 0x8a, 0xd8, 0xaf, 0x07, 0xe1, 0x13, 0xc6,
    0x83, 0xe4, 0x36, 0x01, 0xd3, 0xe0, 0xc9, 0xa4, 0x81, 0x65, 0xa5, 0x80,
    0xd6, 0x0b, 0x9c, 0x2d, 0xf7, 0x5c, 0xdf, 0xc0, 0x66, 0x85, 0x56, 0x07,
    0xc0, 0xdd, 0x51, 0xad, 0x8f, 0xc0, 0x29, 0x6c, 0x3f, 0x72, 0xe8, 0x3d,
    0x3d, 0x57, 0x42, 0xe2
};

const uint8_t nc_hmac_sha384_ki[] = {
    0x61, 0xdd, 0xa2, 0xd6, 0x9c, 0xac, 0x71, 0x69, 0xdb, 0x5a, 0x8f, 0x23,
    0x29, 0xb4, 0xe8, 0x10, 0x08, 0x0d, 0x5b, 0xa8, 0x8a, 0xd2, 0xd4, 0x7d,
    0x21, 0xa6, 0x4e, 0xc6, 0x8c, 0x25, 0xd4, 0xf3, 0x54, 0x3f, 0x04, 0x24,
    0x5c, 0x47, 0x4e, 0x0c, 0xc3, 0xd3, 0x65, 0x20, 0xb8, 0x8b, 0x63, 0xda
};
const uint8_t nc_hmac_sha384_iv[] = {
    0x1c, 0x54, 0x1b, 0x14, 0x1f, 0xe5, 0xcc, 0x66, 0x02, 0x6f, 0x95, 0xbf,
    0xc9, 0x4f, 0x0c, 0xcd, 0xd4, 0xa7, 0x56, 0xd5, 0x60, 0x10, 0x8e, 0x08,
    0x7a, 0x3f, 0x5b, 0x90, 0x9f, 0x41, 0xa2, 0xb5, 0x90, 0x42, 0xc5, 0x8c,
    0x2a, 0x41, 0xac, 0xe1, 0x7f, 0x85, 0xce, 0x55, 0xf6, 0x12, 0xfc, 0x87
};
const uint8_t nc_hmac_sha384_fixedinput[] = {
    0xe8, 0x52, 0x32, 0xeb, 0x83, 0x88, 0xa7, 0x42, 0x35, 0x6a, 0x56, 0x23,
    0xc7, 0xac, 0x7d, 0xef, 0x08, 0xb3, 0x50, 0x40, 0xde, 0x23, 0xcd, 0x49,
    0x32, 0xf7, 0xb4, 0x9e, 0x00, 0x99, 0x5d, 0x79, 0x02, 0x63, 0x6f, 0x6c,
    0x21, 0xde, 0x1a, 0x14, 0x3c, 0x43, 0x94, 0x5d, 0x8e, 0x18, 0xb3, 0x4c,
    0x94, 0x7a, 0xf7
};
const uint8_t nc_hmac_sha384_ko[] = {
    0x51, 0xe0, 0x4a, 0xd6, 0xc8, 0xd1, 0x99, 0xfb, 0x25, 0x84, 0x9b, 0x84,
    0x95, 0xa0, 0x93, 0xe4, 0x5f, 0xe5, 0x4f, 0x30, 0x1b, 0x38, 0x34, 0x44,
    0x12, 0x81, 0x68, 0x6d, 0xd2, 0x79, 0x4c, 0x91, 0x70, 0x8d, 0xb9, 0x2a,
    0x93, 0x06, 0x06, 0x05, 0xf2, 0x5c, 0xcf, 0x37, 0x76, 0x25, 0x9c, 0x4d,
    0x1c, 0x39, 0x94, 0x96, 0xce, 0x3f, 0xe8, 0xe4, 0xa1, 0x57, 0x18, 0x05,
    0x35, 0x7c, 0x3b, 0x4a
};

const uint8_t nc_hmac_sha512_ki[] = {
    0xfd, 0xb1, 0x5e, 0xa0, 0x96, 0xf9, 0xbf, 0x82, 0xe8, 0x47, 0xb9, 0x76,
    0xa1, 0x92, 0x76, 0x86, 0xe2, 0x78, 0x51, 0x7a, 0x4b, 0xee, 0x0a, 0x58,
    0x15, 0x2f, 0x21, 0x7d, 0xe6, 0xc9, 0xe3, 0x44, 0x0c, 0xaa, 0xb1, 0xdf,
    0x91, 0x2b, 0xb5, 0x71, 0xa5, 0xb3, 0xc3, 0x84, 0x37, 0x75, 0xc5, 0xe0,
    0x85, 0xed, 0xd8, 0x47, 0x7d, 0x29, 0x58, 0x3e, 0x2a, 0x00, 0xb5, 0x3e,
    0x9a, 0x78, 0x6d, 0x84
};
const uint8_t nc_hmac_sha512_iv[] = {
    0xe8, 0xe2, 0x14, 0x27, 0xed, 0x14, 0xfd, 0xa1, 0x46, 0x42, 0x93, 0xd9,
    0xfd, 0x87, 0x41, 0x23, 0xe6, 0x19, 0x1b, 0xcf, 0xf1, 0x06, 0x5e, 0x66,
    0x8d, 0xfb, 0xd1, 0x41, 0xf4, 0x48, 0x71, 0xed, 0x83, 0xbd, 0x12, 0x35,
    0xee, 0x00, 0xd7, 0x84, 0x40, 0xde, 0xd1, 0x02, 0x68, 0x5e, 0xc5, 0xd6,
    0x18, 0x93, 0x6f, 0xcf, 0xd2, 0xa5, 0xad, 0x45, 0x19, 0xc4, 0xb0, 0x1b,
    0x98, 0x61, 0x1d, 0x1e
};
const uint8_t nc_hmac_sha512_fixedinput[] = {
    0xf5, 0x30, 0xd1, 0x16, 0x43, 0x16, 0x0e, 0x62, 0xff, 0x04, 0x82, 0xb1,
    0x59, 0x3b, 0xde, 0x72, 0xb2, 0xaa, 0x06, 0x2c, 0x14, 0x6e, 0x99, 0xf5,
    0x41, 0x6e, 0x34, 0x66, 0xcc, 0xb1, 0xec, 0x14, 0x11, 0xa4, 0x64, 0xf8,
    0x24, 0x31, 0x0b, 0x41, 0x92, 0x82, 0x5f, 0x22, 0x09, 0x71, 0x32, 0x53,
    0x6c, 0xa1, 0xbd
};
const uint8_t nc_hmac_sha512_ko[] = {
    0x67, 0x18, 0xce, 0x35, 0xa9, 0x80, 0x29, 0xa9, 0xd4, 0xcc, 0x0a, 0x8b,
    0xed, 0x78, 0x7a, 0x3c, 0x84, 0x97, 0x05, 0x38, 0x86, 0xe7, 0x31, 0x3a,
    0xa0, 0x24, 0xc3, 0xb1, 0xd3, 0x17, 0x03, 0xe0, 0x7c, 0x27, 0x17, 0xcc,
    0xa9, 0x7c, 0xcd, 0xab, 0xb5, 0xf3, 0x49, 0x88, 0x7e, 0x95, 0x4b, 0x76,
    0x3d, 0x5e, 0x5d, 0xb4, 0xd0, 0xa8, 0xb5, 0xa5, 0x5d, 0x7e, 0xbe, 0xed,
    0xa5, 0x23, 0x23, 0xac
};

// "zero-length IV" test vector - Use vectors with:
//
// [CTRLOCATION=AFTER_ITER]
// [RLEN=32_BITS]
const uint8_t ziv_hmac_sha1_ki[] = {
    0x7e, 0xf1, 0xff, 0x95, 0x5a, 0x7b, 0xb6, 0x2f, 0xe6, 0xac, 0xd6, 0x68,
    0x47, 0xa0, 0x18, 0x41, 0x1f, 0x7a, 0x36, 0xe3
};
const uint8_t ziv_hmac_sha1_fixedinput[] = {
    0x4c, 0xfc, 0x62, 0x21, 0x71, 0xfb, 0x6e, 0x00, 0x3b, 0xf9, 0xb8, 0x5d,
    0x47, 0x48, 0xa7, 0x23, 0x21, 0x7f, 0xf2, 0x06, 0x03, 0x9d, 0xd2, 0xb5,
    0x2d, 0xb4, 0x28, 0x6c, 0x4b, 0x92, 0x8b, 0x6f, 0xf5, 0x20, 0x8b, 0x27,
    0x2b, 0x41, 0xdc, 0x9b, 0x9d, 0x41, 0x7f, 0xbe, 0x43, 0xd7, 0xc5, 0x46,
    0x62, 0xd2, 0x4e
};
const uint8_t ziv_hmac_sha1_ko[] = {
    0xaf, 0x66, 0xb8, 0x99, 0x81, 0x10, 0xe7, 0x5b, 0x60, 0x7a, 0xed, 0x42,
    0x45, 0x5d, 0x9a, 0xe0, 0xad, 0x32, 0x4a, 0x88, 0x0e, 0xd8, 0xf7, 0x3c,
    0x93, 0xf0, 0x60, 0xdc, 0xe9, 0x82, 0xbc, 0xc0, 0x15, 0x05, 0xe5, 0x9c,
    0xe0, 0xf6, 0x85, 0x14, 0x6b, 0x69, 0x3a, 0xdc, 0xa3, 0xdd, 0x85, 0x8a,
    0x3e, 0xc0, 0xfe, 0x1b, 0x24, 0x3f, 0x29, 0x72, 0xbb, 0xab, 0x59, 0xcf,
    0x69, 0x31, 0xb8, 0x88
};

const uint8_t ziv_hmac_sha224_ki[] = {
    0x9a, 0x5c, 0x7b, 0x52, 0xed, 0x0b, 0xff, 0x80, 0xc1, 0x66, 0x7f, 0x9f,
    0x78, 0xb6, 0xd7, 0x21, 0xb3, 0xc0, 0x22, 0x66, 0xad, 0x76, 0x2d, 0x35,
    0x9a, 0x2c, 0xd6, 0x5e
};
const uint8_t ziv_hmac_sha224_fixedinput[] = {
    0x9b, 0xe2, 0x36, 0xdb, 0x7d, 0x8d, 0xa7, 0xe6, 0x95, 0xb4, 0x69, 0x5d,
    0x84, 0xce, 0x13, 0x6e, 0x7a, 0xa7, 0x9c, 0xe4, 0x7d, 0x47, 0x63, 0xe3,
    0xe7, 0x93, 0xe8, 0x0e, 0x2e, 0x4a, 0x73, 0x8a, 0x96, 0xaf, 0x10, 0x3e,
    0xe4, 0x99, 0xba, 0x22, 0x8c, 0xaa, 0x94, 0xca, 0x1e, 0x48, 0x1c, 0xbe,
    0x70, 0x34, 0xb8
};
const uint8_t ziv_hmac_sha224_ko[] = {
    0x40, 0x07, 0x92, 0x47, 0xe5, 0xa2, 0x11, 0xa2, 0x81, 0x13, 0x8b, 0x75,
    0xeb, 0x4c, 0x7c, 0x04, 0x20, 0x95, 0x3a, 0xe0, 0x6c, 0x33, 0x95, 0x4c,
    0xfb, 0x0c, 0xce, 0xf9, 0xf0, 0xdc, 0x55, 0xd4, 0xe6, 0x02, 0x27, 0xc3,
    0x94, 0x57, 0x6b, 0xa7, 0xa7, 0xe4, 0x31, 0x38, 0xaf, 0xad, 0x9d, 0x41,
    0x47, 0x93, 0xa0, 0xc1, 0xae, 0xc0, 0x3b, 0x23, 0xf7, 0xcf, 0x73, 0x85,
    0xc4, 0xe9, 0x98, 0xfa
};

const uint8_t ziv_hmac_sha256_ki[] = {
    0xc8, 0x95, 0xd8, 0xc7, 0xb6, 0x4c, 0x34, 0x6c, 0xe7, 0x5d, 0xd5, 0x56,
    0x02, 0x89, 0x5e, 0x95, 0x99, 0x71, 0x36, 0x30, 0x99, 0x59, 0xc7, 0x54,
    0xbb, 0xc2, 0x94, 0xb6, 0x5f, 0x71, 0xb4, 0x65
};
const uint8_t ziv_hmac_sha256_fixedinput[] = {
    0x54, 0x1a, 0x3c, 0xa9, 0xd7, 0x86, 0x28, 0x3c, 0xc8, 0xfc, 0x6e, 0xa4,
    0x75, 0xd8, 0xd0, 0x42, 0x04, 0xee, 0xb7, 0x6b, 0x7c, 0xd8, 0x0e, 0x1b,
    0x0a, 0xc6, 0x76, 0xe9, 0xd3, 0x9b, 0x5c, 0xc9, 0xf5, 0x2e, 0xa8, 0x30,
    0x9f, 0x5c, 0xca, 0xc9, 0xa3, 0x8d, 0x63, 0xea, 0x2d, 0x59, 0x8c, 0x56,
    0x4b, 0xde, 0x0a
};
const uint8_t ziv_hmac_sha256_ko[] = {
    0x17, 0xe1, 0x65, 0x18, 0x94, 0x4c, 0xff, 0xc2, 0xc4, 0xae, 0x33, 0xab,
    0x04, 0x86, 0xd6, 0x3d, 0x88, 0xf5, 0xe0, 0x09, 0x8b, 0xc0, 0xf5, 0x85,
    0x1a, 0x68, 0xc6, 0xd2, 0x5d, 0x54, 0xb4, 0xc7, 0x75, 0xdb, 0xc4, 0x46,
    0xea, 0x3a, 0x77, 0x4a, 0x5b, 0xa2, 0x1e, 0xe1, 0x1f, 0xfc, 0xd9, 0x26,
    0x8a, 0xff, 0xe8, 0x7b, 0x2d, 0x00, 0x01, 0xfd, 0x7d, 0x8f, 0x8b, 0xf6,
    0x8b, 0xb7, 0x59, 0x2a
};

const uint8_t ziv_hmac_sha384_ki[] = {
    0xe1, 0x6d, 0xbe, 0xb4, 0x15, 0x87, 0x99, 0x16, 0xbe, 0xc6, 0x7d, 0xe9,
    0x0b, 0xa9, 0x7e, 0xfe, 0x72, 0x7e, 0x5f, 0xcf, 0x08, 0xc5, 0x31, 0x3b,
    0xdd, 0xc5, 0x34, 0xd9, 0x87, 0xa1, 0x9d, 0x23, 0xaf, 0xa5, 0x1d, 0x11,
    0xd1, 0x7e, 0xba, 0x21, 0x56, 0x77, 0x53, 0xd9, 0xb3, 0x65, 0xbe, 0xd1
};
const uint8_t ziv_hmac_sha384_fixedinput[] = {
    0x24, 0x3c, 0xdd, 0xdb, 0x2a, 0xc8, 0x70, 0xe3, 0x8c, 0x78, 0x80, 0xc4,
    0xf5, 0xdb, 0x52, 0x0d, 0x9e, 0x1f, 0x79, 0x45, 0xa2, 0x28, 0x7f, 0xb5,
    0x5e, 0xc2, 0xf7, 0xfa, 0xe0, 0x6f, 0x9c, 0x55, 0x78, 0x69, 0x9f, 0x88,
    0x53, 0x7e, 0x68, 0xc7, 0x99, 0x7b, 0xe1, 0x8d, 0x2b, 0xd4, 0x7b, 0xa0,
    0xd5, 0xbe, 0x02
};
const uint8_t ziv_hmac_sha384_ko[] = {
    0x8d, 0x2a, 0xfb, 0x91, 0x27, 0xa4, 0xfb, 0xaa, 0xc0, 0x68, 0x68, 0x4b,
    0x0c, 0x16, 0xbd, 0xad, 0x40, 0xc2, 0x98, 0x7d, 0x33, 0xaa, 0xd4, 0xf1,
    0x85, 0x58, 0x65, 0xaf, 0xeb, 0x38, 0x3b, 0x6c, 0x51, 0xb4, 0xc3, 0xd1,
    0xb2, 0x06, 0x53, 0x00, 0xa8, 0x31, 0x27, 0xb7, 0xd8, 0xc5, 0x0f, 0xcb,
    0xb2, 0x54, 0x84, 0xa7, 0x3c, 0x93, 0xfd, 0x7b, 0x30, 0xaf, 0x6c, 0x12,
    0x3d, 0x27, 0x26, 0x9f
};

const uint8_t ziv_hmac_sha512_ki[] = {
    0x88, 0x49, 0x70, 0xa3, 0xa7, 0xa2, 0xd3, 0x5d, 0x64, 0x36, 0xb1, 0x70,
    0x7a, 0x7d, 0x81, 0xa7, 0x0c, 0xa9, 0x8e, 0xfd, 0xeb, 0x19, 0x5c, 0x2d,
    0x87, 0x34, 0x14, 0x68, 0xfe, 0x91, 0x33, 0x90, 0xdb, 0x83, 0x48, 0x85,
    0x2d, 0x82, 0xf5, 0x3c, 0xff, 0x96, 0xb4, 0xac, 0x0f, 0x17, 0xb8, 0xe5,
    0x55, 0x53, 0x2d, 0xf7, 0x35, 0x4e, 0xc7, 0x89, 0x4b, 0x52, 0x69, 0x85,
    0xa9, 0x7f, 0x8f, 0xee
};
const uint8_t ziv_hmac_sha512_fixedinput[] = {
    0x9a, 0x6d, 0xf2, 0x8b, 0xb9, 0x72, 0xc7, 0x22, 0x98, 0x91, 0x5b, 0x20,
    0xfa, 0xbe, 0x34, 0xfd, 0xf9, 0xff, 0xb7, 0x28, 0x0f, 0x92, 0x46, 0xc7,
    0xcd, 0xc2, 0x07, 0x8f, 0x65, 0xec, 0x3d, 0x16, 0xe6, 0x47, 0xf5, 0x8a,
    0x76, 0x55, 0x07, 0x1f, 0x35, 0x46, 0x74, 0x25, 0xa3, 0xed, 0x72, 0xdf,
    0xaa, 0xdb, 0x7e
};
const uint8_t ziv_hmac_sha512_ko[] = {
    0xe4, 0x0d, 0xc2, 0x1d, 0x7f, 0xec, 0x46, 0xa8, 0x5a, 0x5d, 0x05, 0xae,
    0x39, 0xcf, 0x5f, 0x81, 0x73, 0xa4, 0xd9, 0x01, 0x6e, 0x86, 0x2e, 0x81,
    0xa9, 0x9b, 0x88, 0x5f, 0x5b, 0x26, 0xcc, 0xac, 0x1c, 0x26, 0xf9, 0x6f,
    0x9f, 0x8f, 0x3a, 0x7b, 0xe9, 0x30, 0x29, 0x99, 0x80, 0x5e, 0x7f, 0x76,
    0xab, 0x9c, 0xb9, 0xcc, 0xea, 0x1b, 0xb4, 0x09, 0x99, 0x06, 0xfa, 0x02,
    0xf5, 0xdd, 0x56, 0xff
};

// "non-zero-length IV" test vector - Use vectors with:
//
// [CTRLOCATION=AFTER_ITER]
// [RLEN=32_BITS]
const uint8_t hmac_sha1_ki[] = {
    0xd6, 0x6a, 0x4c, 0x97, 0x13, 0xbe, 0xa8, 0x80, 0x69, 0xaa, 0x7f, 0xa5,
    0x7c, 0x99, 0x5e, 0x90, 0x83, 0xa2, 0x2d, 0x38
};
const uint8_t hmac_sha1_iv[] = {
    0x77, 0x29, 0x8a, 0xf9, 0x97, 0x89, 0xd3, 0x67, 0xcb, 0xb8, 0xe2, 0x3c,
    0x7c, 0x46, 0x92, 0x2b, 0x03, 0xf2, 0x0a, 0xe3
};
const uint8_t hmac_sha1_fixedinput[] = {
    0xf4, 0xd3, 0x4a, 0x28, 0xb2, 0xae, 0x8a, 0x86, 0x86, 0x6b, 0xc7, 0x87,
    0xe9, 0x0c, 0x2e, 0xc2, 0xef, 0xc9, 0x3a, 0x90, 0xd5, 0x0e, 0x09, 0x69,
    0x8e, 0x7d, 0x8d, 0x5e, 0xcb, 0xb4, 0x6c, 0x30, 0xfd, 0x0d, 0x06, 0x9a,
    0x55, 0x98, 0xb8, 0x6c, 0xcb, 0xe3, 0x87, 0x04, 0x2a, 0x74, 0x4e, 0x8a,
    0x9c, 0x14, 0x95
};
const uint8_t hmac_sha1_ko[] = {
    0x89, 0xab, 0x27, 0x02, 0xff, 0xa4, 0x7d, 0x50, 0x3c, 0xc5, 0xe0, 0x49,
    0x96, 0x22, 0x53, 0x96, 0xc0, 0x01, 0x9c, 0x99, 0xc5, 0x48, 0x4d, 0x27,
    0xe1, 0xbd, 0x35, 0xd5, 0x9d, 0x2a, 0xe5, 0x04, 0x38, 0xff, 0x55, 0xa6,
    0x67, 0x83, 0xfd, 0xe7, 0xc2, 0xa6, 0x2c, 0xd2, 0xc9, 0xcd, 0x8b, 0x7c,
    0x31, 0x22, 0xe3, 0x62, 0x2c, 0xc7, 0x7b, 0xe7, 0xc5, 0xca, 0x5e, 0x14,
    0xac, 0xa2, 0x40, 0xdb
};

const uint8_t hmac_sha224_ki[] = {
    0x01, 0x14, 0x91, 0x18, 0x9b, 0x1b, 0x7a, 0x1f, 0x94, 0x21, 0xf3, 0xab,
    0x49, 0xc6, 0xdf, 0x9c, 0x7e, 0xee, 0xcf, 0x90, 0xf9, 0x75, 0x5e, 0x8f,
    0x6f, 0xe4, 0xf8, 0x3b
};
const uint8_t hmac_sha224_iv[] = {
    0x96, 0xbb, 0x04, 0x86, 0x25, 0x01, 0xc9, 0x55, 0xbc, 0x56, 0x6c, 0xd3,
    0x11, 0xf4, 0x43, 0x00, 0xd0, 0x8f, 0x21, 0x06, 0x61, 0x3b, 0xb5, 0x0f,
    0x4b, 0xd8, 0xbf, 0x96
};
const uint8_t hmac_sha224_fixedinput[] = {
    0xaf, 0x3c, 0x74, 0x28, 0x25, 0xee, 0xef, 0xeb, 0x1f, 0xe2, 0x12, 0xd7,
    0x68, 0x69, 0xf2, 0x17, 0xd0, 0x0b, 0x93, 0xa5, 0xc5, 0x4b, 0xc9, 0x3e,
    0x83, 0x8c, 0x89, 0x1e, 0xbe, 0x96, 0xea, 0x76, 0xba, 0x13, 0xca, 0xe5,
    0x18, 0x9a, 0x4b, 0x95, 0xec, 0x13, 0xa7, 0x04, 0x8c, 0xb5, 0x7a, 0xeb,
    0x98, 0x4c, 0x7f
};
const uint8_t hmac_sha224_ko[] = {
    0x0e, 0x86, 0x90, 0xdf, 0xd1, 0x3c, 0xdc, 0x5d, 0x2e, 0x10, 0x4f, 0x95,
    0x75, 0xb9, 0x0b, 0x2f, 0x86, 0x4f, 0xe3, 0xe0, 0x7d, 0x5f, 0x56, 0x56,
    0xae, 0xac, 0xd4, 0x4f, 0xf9, 0x7a, 0xc8, 0x1b, 0x3b, 0x3c, 0x29, 0xe0,
    0x13, 0xe4, 0xf6, 0xad, 0x89, 0x6b, 0x99, 0x33, 0xc0, 0x3d, 0x83, 0x7b,
    0x81, 0xf5, 0x94, 0x39, 0x28, 0xd2, 0xc2, 0x06, 0x10, 0x3c, 0xa4, 0x32,
    0x28, 0xab, 0xa8, 0xb4
};

const uint8_t hmac_sha256_ki[] = {
    0x93, 0xf6, 0x98, 0xe8, 0x42, 0xee, 0xd7, 0x53, 0x94, 0xd6, 0x29, 0xd9,
    0x57, 0xe2, 0xe8, 0x9c, 0x6e, 0x74, 0x1f, 0x81, 0x0b, 0x62, 0x3c, 0x8b,
    0x90, 0x1e, 0x38, 0x37, 0x6d, 0x06, 0x8e, 0x7b
};
const uint8_t hmac_sha256_iv[] = {
    0x9f, 0x57, 0x5d, 0x90, 0x59, 0xd3, 0xe0, 0xc0, 0x80, 0x3f, 0x08, 0x11,
    0x2f, 0x8a, 0x80, 0x6d, 0xe3, 0xc3, 0x47, 0x19, 0x12, 0xcd, 0xf4, 0x2b,
    0x09, 0x53, 0x88, 0xb1, 0x4b, 0x33, 0x50, 0x8e
};
const uint8_t hmac_sha256_fixedinput[] = {
    0x53, 0xb8, 0x9c, 0x18, 0x69, 0x0e, 0x20, 0x57, 0xa1, 0xd1, 0x67, 0x82,
    0x2e, 0x63, 0x6d, 0xe5, 0x0b, 0xe0, 0x01, 0x85, 0x32, 0xc4, 0x31, 0xf7,
    0xf5, 0xe3, 0x7f, 0x77, 0x13, 0x92, 0x20, 0xd5, 0xe0, 0x42, 0x59, 0x9e,
    0xbe, 0x26, 0x6a, 0xf5, 0x76, 0x7e, 0xe1, 0x8c, 0xd2, 0xc5, 0xc1, 0x9a,
    0x1f, 0x0f, 0x80
};
const uint8_t hmac_sha256_ko[] = {
    0xbd, 0x14, 0x76, 0xf4, 0x3a, 0x4e, 0x31, 0x57, 0x47, 0xcf, 0x59, 0x18,
    0xe0, 0xea, 0x5b, 0xc0, 0xd9, 0x87, 0x69, 0x45, 0x74, 0x77, 0xc3, 0xab,
    0x18, 0xb7, 0x42, 0xde, 0xf0, 0xe0, 0x79, 0xa9, 0x33, 0xb7, 0x56, 0x36,
    0x5a, 0xfb, 0x55, 0x41, 0xf2, 0x53, 0xfe, 0xe4, 0x3c, 0x6f, 0xd7, 0x88,
    0xa4, 0x40, 0x41, 0x03, 0x85, 0x09, 0xe9, 0xee, 0xb6, 0x8f, 0x7d, 0x65,
    0xff, 0xbb, 0x5f, 0x95
};

const uint8_t hmac_sha384_ki[] = {
    0x53, 0x08, 0x20, 0x9e, 0xf2, 0x07, 0x20, 0xb0, 0x5b, 0xef, 0x31, 0xc5,
    0xaa, 0xe8, 0xac, 0x89, 0xe1, 0xf7, 0x75, 0x48, 0xff, 0xfe, 0x8a, 0x24,
    0xf7, 0x83, 0xf4, 0x0d, 0x86, 0xd2, 0xa8, 0x95, 0x82, 0x03, 0x63, 0x23,
    0xf9, 0x1e, 0xad, 0x33, 0x06, 0x4f, 0x23, 0xaa, 0x2e, 0x95, 0x9d, 0x28
};
const uint8_t hmac_sha384_iv[] = {
    0xfa, 0x9e, 0x3a, 0xd0, 0xfe, 0x64, 0x92, 0x0c, 0x7b, 0xec, 0x3b, 0xaa,
    0xc0, 0x8c, 0xc3, 0xfa, 0x24, 0x05, 0x09, 0xca, 0xe5, 0x9f, 0x4c, 0x48,
    0x86, 0x30, 0xee, 0x8b, 0x60, 0x2d, 0x55, 0xfa, 0x14, 0x75, 0xf6, 0x24,
    0x04, 0x80, 0x02, 0x49, 0xe7, 0x15, 0xc4, 0xd4, 0xe9, 0x47, 0x1c, 0xe0
};
const uint8_t hmac_sha384_fixedinput[] = {
    0x2b, 0x70, 0x60, 0x76, 0x43, 0x2a, 0x18, 0x9e, 0x3c, 0xe3, 0x7a, 0x92,
    0x3c, 0xa6, 0x3a, 0xd3, 0xcd, 0x6e, 0x08, 0x70, 0x25, 0x12, 0xcb, 0x7f,
    0x79, 0xb1, 0x13, 0xa0, 0x52, 0x4f, 0x18, 0x92, 0xc5, 0x4e, 0x88, 0xcb,
    0xce, 0xbf, 0x73, 0xdc, 0xc6, 0x6b, 0xa9, 0x62, 0xc6, 0x68, 0x33, 0x32,
    0xd2, 0x92, 0x3f
};
const uint8_t hmac_sha384_ko[] = {
    0xc8, 0x89, 0x6a, 0x30, 0x45, 0x76, 0xdf, 0x5f, 0x5d, 0xfb, 0xc2, 0xf8,
    0xcb, 0x0e, 0x1f, 0x33, 0xf2, 0x5f, 0xdf, 0xb3, 0x89, 0x13, 0x8a, 0x81,
    0x27, 0x88, 0xee, 0x03, 0x53, 0x50, 0xa5, 0x01, 0x8e, 0x75, 0xb5, 0x03,
    0x93, 0x23, 0xaf, 0x2b, 0xb5, 0x28, 0xa7, 0xa3, 0x92, 0x90, 0xcf, 0xc9,
    0xd6, 0x11, 0xe9, 0xb0, 0x10, 0x0a, 0x22, 0x34, 0xe1, 0x13, 0xcc, 0x7d,
    0x8c, 0xe0, 0x22, 0x27
};

const uint8_t hmac_sha512_ki[] = {
    0xe7, 0x09, 0xc8, 0xf6, 0xa1, 0x6e, 0x4a, 0x3a, 0x57, 0x94, 0x9e, 0x16,
    0x70, 0xd2, 0xda, 0x5f, 0x4e, 0xf4, 0xf0, 0xeb, 0x6a, 0xa2, 0x8f, 0xc4,
    0x60, 0x0d, 0x3b, 0x67, 0x4c, 0x97, 0x2f, 0x5c, 0x1a, 0xd3, 0x2d, 0xba,
    0x29, 0xb3, 0xbb, 0x2b, 0xcd, 0xcc, 0x2d, 0x25, 0x4b, 0x64, 0xb7, 0x09,
    0x62, 0xa3, 0x12, 0xa5, 0xa6, 0x60, 0xe6, 0x59, 0xf5, 0x3a, 0xdb, 0x3f,
    0x19, 0x62, 0xe3, 0x0f
};
const uint8_t hmac_sha512_iv[] = {
    0x51, 0xb0, 0x8a, 0xce, 0x98, 0xa3, 0x12, 0x06, 0x2d, 0xd6, 0xed, 0xb0,
    0xc4, 0x5d, 0x59, 0xa2, 0x45, 0xa6, 0xe5, 0xd1, 0x8e, 0xbd, 0xf9, 0x05,
    0x47, 0x83, 0x50, 0x86, 0x66, 0xf2, 0xf0, 0x46, 0xac, 0x92, 0xa8, 0xa9,
    0x3c, 0xdb, 0x1d, 0xe7, 0x02, 0xcb, 0xc0, 0x1f, 0x5a, 0x83, 0x0a, 0x3f,
    0x4c, 0x54, 0x5b, 0x85, 0xba, 0xb2, 0xa3, 0xd0, 0x74, 0xdf, 0x1b, 0xd8,
    0x03, 0x76, 0x16, 0x19
};
const uint8_t hmac_sha512_fixedinput[] = {
    0x8e, 0x3f, 0x0c, 0xd1, 0x58, 0x13, 0xff, 0xa4, 0x4b, 0x79, 0x87, 0xe6,
    0x0a, 0x6f, 0x87, 0x00, 0x62, 0x34, 0x09, 0xcc, 0x9f, 0x91, 0x38, 0xdf,
    0x85, 0xcd, 0xec, 0x4e, 0xaf, 0xdd, 0x2d, 0xff, 0xb3, 0xa9, 0x3c, 0x16,
    0x31, 0x33, 0x3e, 0x46, 0x29, 0x69, 0xb3, 0x0a, 0x18, 0x63, 0xce, 0xd3,
    0x0d, 0x86, 0x0e
};
const uint8_t hmac_sha512_ko[] = {
    0xba, 0xc8, 0xa1, 0x91, 0x50, 0xe8, 0x11, 0x44, 0x0a, 0xb2, 0x35, 0x26,
    0x31, 0x79, 0x4a, 0xe3, 0xf4, 0xe2, 0xf9, 0x75, 0x50, 0x8d, 0x47, 0x91,
    0x3e, 0xf2, 0xb0, 0x3f, 0xf2, 0xdb, 0x65, 0x11, 0x5e, 0xe0, 0x25, 0x25,
    0xc3, 0xad, 0xf3, 0x48, 0x11, 0xf8, 0x41, 0x83, 0x84, 0xc3, 0x43, 0x10,
    0xdd, 0x60, 0x1c, 0xba, 0x31, 0x27, 0xd0, 0x9a, 0x55, 0x91, 0x9a, 0xed,
    0x47, 0xd4, 0x5d, 0x68
};

struct KBKDFTestVector {
  const EVP_MD *(*md_func)(void);

  const uint8_t *ki;
  const size_t ki_len;
  const uint8_t *label;
  const size_t label_len;
  const uint8_t *context;
  const size_t context_len;
  const uint8_t *iv;
  const size_t iv_len;
  const bool use_counter;

  const uint8_t *expected;
  const size_t expected_len;
};

static const KBKDFTestVector no_counter_vectors[] = {
    {
        EVP_sha1,
        nc_hmac_sha1_ki, sizeof(nc_hmac_sha1_ki),
        nc_hmac_sha1_fixedinput, sizeof(nc_hmac_sha1_fixedinput),
        nullptr, 0,  // included in fixedinput
        nc_hmac_sha1_iv, sizeof(nc_hmac_sha1_iv),
        false,
        nc_hmac_sha1_ko, sizeof(nc_hmac_sha1_ko)
    },
    {
        EVP_sha224,
        nc_hmac_sha224_ki, sizeof(nc_hmac_sha224_ki),
        nc_hmac_sha224_fixedinput, sizeof(nc_hmac_sha224_fixedinput),
        nullptr, 0,  // included in fixedinput
        nc_hmac_sha224_iv, sizeof(nc_hmac_sha224_iv),
        false,
        nc_hmac_sha224_ko, sizeof(nc_hmac_sha224_ko)
    },
    {
        EVP_sha256,
        nc_hmac_sha256_ki, sizeof(nc_hmac_sha256_ki),
        nc_hmac_sha256_fixedinput, sizeof(nc_hmac_sha256_fixedinput),
        nullptr, 0,  // included in fixedinput
        nc_hmac_sha256_iv, sizeof(nc_hmac_sha256_iv),
        false,
        nc_hmac_sha256_ko, sizeof(nc_hmac_sha256_ko)
    },
    {
        EVP_sha384,
        nc_hmac_sha384_ki, sizeof(nc_hmac_sha384_ki),
        nc_hmac_sha384_fixedinput, sizeof(nc_hmac_sha384_fixedinput),
        nullptr, 0,  // included in fixedinput
        nc_hmac_sha384_iv, sizeof(nc_hmac_sha384_iv),
        false,
        nc_hmac_sha384_ko, sizeof(nc_hmac_sha384_ko)
    },
    {
        EVP_sha512,
        nc_hmac_sha512_ki, sizeof(nc_hmac_sha512_ki),
        nc_hmac_sha512_fixedinput, sizeof(nc_hmac_sha512_fixedinput),
        nullptr, 0,  // included in fixedinput
        nc_hmac_sha512_iv, sizeof(nc_hmac_sha512_iv),
        false,
        nc_hmac_sha512_ko, sizeof(nc_hmac_sha512_ko)
    },
};

static const KBKDFTestVector zero_iv_vectors[] = {
    {
        EVP_sha1,
        ziv_hmac_sha1_ki, sizeof(ziv_hmac_sha1_ki),
        ziv_hmac_sha1_fixedinput, sizeof(ziv_hmac_sha1_fixedinput),
        nullptr, 0,  // included in fixedinput
        nullptr, 0,
        true,
        ziv_hmac_sha1_ko, sizeof(ziv_hmac_sha1_ko)
    },
    {
        EVP_sha224,
        ziv_hmac_sha224_ki, sizeof(ziv_hmac_sha224_ki),
        ziv_hmac_sha224_fixedinput, sizeof(ziv_hmac_sha224_fixedinput),
        nullptr, 0,  // included in fixedinput
        nullptr, 0,
        true,
        ziv_hmac_sha224_ko, sizeof(ziv_hmac_sha224_ko)
    },
    {
        EVP_sha256,
        ziv_hmac_sha256_ki, sizeof(ziv_hmac_sha256_ki),
        ziv_hmac_sha256_fixedinput, sizeof(ziv_hmac_sha256_fixedinput),
        nullptr, 0,  // included in fixedinput
        nullptr, 0,
        true,
        ziv_hmac_sha256_ko, sizeof(ziv_hmac_sha256_ko)
    },
    {
        EVP_sha384,
        ziv_hmac_sha384_ki, sizeof(ziv_hmac_sha384_ki),
        ziv_hmac_sha384_fixedinput, sizeof(ziv_hmac_sha384_fixedinput),
        nullptr, 0,  // included in fixedinput
        nullptr, 0,
        true,
        ziv_hmac_sha384_ko, sizeof(ziv_hmac_sha384_ko)
    },
    {
        EVP_sha512,
        ziv_hmac_sha512_ki, sizeof(ziv_hmac_sha512_ki),
        ziv_hmac_sha512_fixedinput, sizeof(ziv_hmac_sha512_fixedinput),
        nullptr, 0,  // included in fixedinput
        nullptr, 0,
        true,
        ziv_hmac_sha512_ko, sizeof(ziv_hmac_sha512_ko)
    },
};

static const KBKDFTestVector nonzero_iv_vectors[] = {
    {
        EVP_sha1,
        hmac_sha1_ki, sizeof(hmac_sha1_ki),
        hmac_sha1_fixedinput, sizeof(hmac_sha1_fixedinput),
        nullptr, 0,  // included in fixedinput
        hmac_sha1_iv, sizeof(hmac_sha1_iv),
        true,
        hmac_sha1_ko, sizeof(hmac_sha1_ko)
    },
    {
        EVP_sha224,
        hmac_sha224_ki, sizeof(hmac_sha224_ki),
        hmac_sha224_fixedinput, sizeof(hmac_sha224_fixedinput),
        nullptr, 0,  // included in fixedinput
        hmac_sha224_iv, sizeof(hmac_sha224_iv),
        true,
        hmac_sha224_ko, sizeof(hmac_sha224_ko)
    },
    {
        EVP_sha256,
        hmac_sha256_ki, sizeof(hmac_sha256_ki),
        hmac_sha256_fixedinput, sizeof(hmac_sha256_fixedinput),
        nullptr, 0,  // included in fixedinput
        hmac_sha256_iv, sizeof(hmac_sha256_iv),
        true,
        hmac_sha256_ko, sizeof(hmac_sha256_ko)
    },
    {
        EVP_sha384,
        hmac_sha384_ki, sizeof(hmac_sha384_ki),
        hmac_sha384_fixedinput, sizeof(hmac_sha384_fixedinput),
        nullptr, 0,  // included in fixedinput
        hmac_sha384_iv, sizeof(hmac_sha384_iv),
        true,
        hmac_sha384_ko, sizeof(hmac_sha384_ko)
    },
    {
        EVP_sha512,
        hmac_sha512_ki, sizeof(hmac_sha512_ki),
        hmac_sha512_fixedinput, sizeof(hmac_sha512_fixedinput),
        nullptr, 0,  // included in fixedinput
        hmac_sha512_iv, sizeof(hmac_sha512_iv),
        true,
        hmac_sha512_ko, sizeof(hmac_sha512_ko)
    },
};

class KBKDFTest : public testing::TestWithParam<KBKDFTestVector> {
};

TEST_P(KBKDFTest, KBKDFCAVPVectors) {
    const KBKDFTestVector &test = GetParam();

    uint8_t *output = new uint8_t[test.expected_len];
    ASSERT_NE(output, nullptr);

    EXPECT_TRUE(KBKDF_feedback(output, test.expected_len,
                               test.md_func(),
                               test.ki, test.ki_len,
                               test.label, test.label_len,
                               test.context, test.context_len,
                               test.iv, test.iv_len,
                               test.use_counter));
    EXPECT_EQ(Bytes(test.expected, test.expected_len),
                  Bytes(output, test.expected_len));

    delete[] output;
}

INSTANTIATE_TEST_SUITE_P(KBKDFNoCounter, KBKDFTest,
                         testing::ValuesIn(no_counter_vectors));

INSTANTIATE_TEST_SUITE_P(KBKDFZeroIV, KBKDFTest,
                         testing::ValuesIn(zero_iv_vectors));

INSTANTIATE_TEST_SUITE_P(KBKDFNonZeroIV, KBKDFTest,
                         testing::ValuesIn(nonzero_iv_vectors));
