// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0 OR ISC

#include <gtest/gtest.h>
#include <openssl/base.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/mem.h>
#include <openssl/obj.h>
#include "../test/test_util.h"

#include <vector>
#include "../crypto/evp_extra/internal.h"
#include "../fipsmodule/evp/internal.h"
#include "../internal.h"
#include "internal.h"

#ifdef ENABLE_DILITHIUM

#include "../test/file_test.h"
#include "../test/test_util.h"
#include "../rand_extra/pq_custom_randombytes.h"
#include "sig_dilithium.h"

static const uint8_t mldsa44kPublicKey[] = {0xD9, 0x79, 0x6C, 0x68, 0xF4, 0xB2, 0xC6, 0xBA, 0x3D, 0xD4, 0x08, 0x72, 0x61, 0x0E, 0x9F, 0xCA, 0x3C, 0xBF, 0x59, 0x0F, 0x66, 0x34, 0xB0, 0x48, 0xE3, 0x3F, 0x19, 0x95, 0x2A, 0x47, 0x6D, 0x7E, 0x89, 0xEF, 0xF3, 0x77, 0x28, 0xA6, 0xDB, 0x1D, 0x01, 0x2B, 0x99, 0xFC, 0x8E, 0x71, 0x89, 0xAD, 0x0B, 0xA7, 0x0C, 0x8E, 0x09, 0x7D, 0x00, 0xCC, 0xA2, 0xB8, 0x6D, 0x78, 0x27, 0xF6, 0xCD, 0xD0, 0x66, 0x98, 0x12, 0x6B, 0xB2, 0x8F, 0xE6, 0xDB, 0xDC, 0xDB, 0x39, 0xFC, 0xF3, 0xF0, 0x03, 0x02, 0x4B, 0xB8, 0x6B, 0x0A, 0xDB, 0xF4, 0xBF, 0x22, 0x0C, 0x97, 0x3B, 0xF9, 0xA3, 0xD0, 0xE3, 0x86, 0xBC, 0x30, 0x93, 0x20, 0xFE, 0x0B, 0x3E, 0xF9, 0x57, 0x65, 0x12, 0xB5, 0x8F, 0x27, 0xE5, 0x6B, 0x2C, 0xFF, 0x88, 0x26, 0xC9, 0x2B, 0x4E, 0xCD, 0x3D, 0xD0, 0x50, 0x36, 0x5C, 0xB9, 0xD0, 0x51, 0xA4, 0x67, 0xE5, 0xE5, 0xAB, 0xBA, 0x28, 0x6B, 0x31, 0xA6, 0x5C, 0x4D, 0x9D, 0xD1, 0x3D, 0x08, 0x65, 0xFA, 0xD9, 0x92, 0xBC, 0xF1, 0xB3, 0x5B, 0x1D, 0x95, 0x92, 0x95, 0x66, 0x57, 0x30, 0x63, 0x69, 0x82, 0xBC, 0xD5, 0x0B, 0xCE, 0x36, 0x1F, 0xA8, 0x86, 0xF4, 0xF3, 0x0E, 0x2F, 0x2A, 0x97, 0xB6, 0xE7, 0xC4, 0x07, 0x10, 0x12, 0xAB, 0xFD, 0x4C, 0x0C, 0x60, 0xF4, 0x30, 0x40, 0x20, 0x07, 0x7A, 0x38, 0x37, 0x90, 0x6D, 0xC0, 0x39, 0x2A, 0xA2, 0x4A, 0xD3, 0x95, 0xE4, 0xF9, 0x14, 0xD7, 0x0E, 0x9B, 0x1F, 0x60, 0x1A, 0x59, 0xFD, 0x4A, 0x09, 0x07, 0x6E, 0x83, 0x4B, 0x07, 0xF6, 0x2E, 0x60, 0x8F, 0xA9, 0x13, 0x46, 0xC8, 0xC9, 0x0C, 0xDD, 0xEF, 0xD5, 0xFA, 0x9D, 0x2F, 0xA1, 0x42, 0xD4, 0xCB, 0x68, 0x13, 0x5F, 0xD9, 0x89, 0x57, 0x22, 0xC2, 0x65, 0xC7, 0x36, 0xCC, 0xF5, 0x25, 0x52, 0x0D, 0x2D, 0x72, 0xC9, 0x4A, 0xDC, 0x58, 0x61, 0x1B, 0x06, 0xEC, 0x6E, 0xA0, 0x78, 0x23, 0x3D, 0x19, 0xD3, 0x20, 0x0D, 0x38, 0xF1, 0x91, 0x7E, 0xB4, 0x1A, 0x2D, 0xE3, 0x37, 0x37, 0x1C, 0x81, 0xFB, 0x44, 0xC3, 0x21, 0xE3, 0x49, 0xD0, 0xA4, 0x4E, 0x96, 0xB9, 0xBF, 0x6B, 0x33, 0xEB, 0x03, 0xB8, 0x9B, 0xA1, 0xA5, 0x79, 0xE0, 0xE8, 0xB8, 0xBC, 0xF3, 0x52, 0x06, 0xA9, 0xD0, 0xDD, 0x93, 0x15, 0xA1, 0x5C, 0x9B, 0x6F, 0xF8, 0x45, 0x3E, 0x17, 0x63, 0x4C, 0xDE, 0xA9, 0x4C, 0x95, 0xDC, 0xEE, 0x15, 0x52, 0x88, 0xCD, 0x02, 0xBE, 0x65, 0x78, 0x48, 0x03, 0x6E, 0xA3, 0xB7, 0xD8, 0x12, 0xAA, 0xBF, 0x60, 0x47, 0xB3, 0x49, 0x79, 0xC8, 0x63, 0x3E, 0xCD, 0xE2, 0x64, 0x4E, 0x26, 0xDA, 0x9E, 0xA8, 0xC3, 0x0A, 0x62, 0x48, 0xBC, 0x07, 0xD5, 0xB4, 0xB3, 0xFE, 0xB6, 0x4F, 0x6A, 0x33, 0xA4, 0x22, 0xB1, 0x0A, 0x6E, 0xFF, 0xBD, 0xF0, 0x39, 0x7B, 0xED, 0xD4, 0x72, 0xAE, 0xCE, 0xC3, 0xFE, 0x74, 0xB0, 0x41, 0x4E, 0xFA, 0x6B, 0x5F, 0x68, 0x66, 0x4E, 0x37, 0x87, 0xB8, 0x06, 0xC6, 0x6B, 0x01, 0x55, 0x07, 0x50, 0x9D, 0xE6, 0xDA, 0x12, 0x3C, 0x46, 0x57, 0x49, 0x0E, 0x03, 0x9B, 0x71, 0x7E, 0x4C, 0x18, 0x70, 0x2A, 0x4A, 0xC5, 0xA4, 0xC7, 0x26, 0xAB, 0xCC, 0x41, 0x6C, 0x0E, 0x54, 0xE3, 0x4E, 0x55, 0x9F, 0xC1, 0x9B, 0x75, 0x5C, 0x50, 0x5B, 0xE8, 0x57, 0xA1, 0x28, 0xA1, 0x04, 0x04, 0x3B, 0x0B, 0x89, 0xB2, 0x1F, 0x61, 0x1C, 0xAA, 0x1B, 0xD0, 0x31, 0x99, 0x0A, 0xA3, 0x94, 0x38, 0xDF, 0x98, 0x6D, 0xFD, 0x50, 0xDD, 0x76, 0x99, 0xBE, 0x8F, 0x4B, 0xCA, 0xA1, 0xB5, 0x67, 0xE5, 0x86, 0xEC, 0x06, 0x57, 0x4B, 0x2D, 0x63, 0xF9, 0xD6, 0x93, 0x7B, 0xBB, 0x18, 0x21, 0xE7, 0xDE, 0x66, 0xF7, 0x0B, 0xFB, 0xA7, 0xE5, 0x26, 0x39, 0xA5, 0x57, 0x18, 0xC4, 0xA8, 0x66, 0x21, 0x1E, 0xDE, 0xCE, 0x98, 0xAC, 0x1A, 0x4B, 0x0F, 0x41, 0x6D, 0x4D, 0xD9, 0x38, 0xD3, 0xBD, 0x42, 0xF4, 0x2A, 0x5A, 0x29, 0x1A, 0x5C, 0xE1, 0x9F, 0x90, 0xBD, 0xAA, 0x10, 0xD8, 0xCE, 0x55, 0xB7, 0x30, 0x91, 0x65, 0x92, 0x08, 0x71, 0x4F, 0x76, 0x81, 0x75, 0xED, 0xE4, 0x5C, 0xA6, 0xA6, 0x77, 0x63, 0x93, 0xF1, 0xB8, 0x39, 0x02, 0x05, 0xDB, 0x69, 0x8E, 0x73, 0xDE, 0x7A, 0xCD, 0xB1, 0xA9, 0x24, 0xEB, 0x1A, 0x96, 0xCF, 0x00, 0xCA, 0x2B, 0xE8, 0x60, 0x6C, 0xAC, 0x60, 0xFF, 0x91, 0x03, 0x88, 0x9B, 0xB7, 0x7A, 0x5F, 0x06, 0x9C, 0xFF, 0xAD, 0x69, 0xC3, 0x4A, 0xED, 0x50, 0x61, 0xDC, 0xEE, 0x84, 0xA8, 0xEF, 0x99, 0x6A, 0xA0, 0x05, 0x0D, 0xB6, 0x83, 0xB7, 0x86, 0x4E, 0x03, 0xB0, 0xE1, 0xE8, 0x34, 0xA7, 0x7B, 0xC5, 0x8E, 0x73, 0x28, 0x40, 0x80, 0xD8, 0xDD, 0x92, 0xC3, 0x3C, 0xC1, 0x89, 0x16, 0xF0, 0x8D, 0xD6, 0x22, 0xF4, 0xEE, 0x17, 0xD8, 0x87, 0x1F, 0xC0, 0xDB, 0x0C, 0xD1, 0x32, 0x87, 0xEA, 0x99, 0x38, 0xD8, 0x5B, 0x2A, 0x0E, 0x5E, 0x02, 0xFC, 0x58, 0xBC, 0xA1, 0x92, 0x91, 0x4D, 0xC5, 0x0B, 0xFA, 0x43, 0x7C, 0xB6, 0x70, 0x18, 0x83, 0x3B, 0xB6, 0x77, 0x9D, 0xF9, 0xDC, 0xF6, 0x8B, 0xC2, 0xAF, 0xF9, 0x8D, 0xB8, 0xFB, 0x3E, 0xA0, 0xD9, 0xE7, 0x69, 0xCB, 0x18, 0x8E, 0x0E, 0xA2, 0xAE, 0x2C, 0x3C, 0xD4, 0xA8, 0x11, 0x70, 0x54, 0x2F, 0x4E, 0x05, 0x08, 0x8B, 0x35, 0x0B, 0x54, 0x27, 0x38, 0x19, 0x53, 0x24, 0x9C, 0x83, 0x39, 0xCE, 0xF8, 0xE7, 0x1F, 0x5F, 0x6D, 0xDD, 0xCE, 0x56, 0x17, 0x27, 0x97, 0x8D, 0xEF, 0x14, 0x25, 0x1B, 0xD4, 0x7E, 0x01, 0x08, 0xC0, 0x44, 0x3E, 0x3B, 0xFD, 0xF3, 0x2D, 0x77, 0x80, 0xAC, 0x21, 0xBC, 0x38, 0xCF, 0x73, 0x12, 0x5E, 0xCA, 0x84, 0x85, 0x0C, 0xF4, 0xB8, 0x6A, 0xFF, 0xE7, 0x1F, 0x02, 0xD1, 0x0B, 0x9B, 0xD2, 0x6F, 0x34, 0x09, 0xDC, 0x12, 0x91, 0x02, 0xEF, 0x25, 0x91, 0x8C, 0xA3, 0x13, 0xFA, 0x11, 0x49, 0x24, 0xB1, 0x42, 0x0D, 0x44, 0x61, 0x8E, 0x96, 0xE4, 0x39, 0x78, 0x0A, 0xFE, 0x96, 0xB6, 0x53, 0x1B, 0x0E, 0x7C, 0xF3, 0xAE, 0x25, 0xF1, 0xA6, 0x0D, 0xC3, 0x22, 0xED, 0xE2, 0xF7, 0x5F, 0x41, 0xEF, 0xDF, 0x9C, 0x01, 0x0A, 0xE6, 0x60, 0x1D, 0xFA, 0x62, 0xB3, 0x0F, 0x71, 0x1B, 0x2C, 0x79, 0x63, 0x32, 0x2E, 0xD0, 0xB4, 0x16, 0xA3, 0xF3, 0xD0, 0x0C, 0x62, 0xA0, 0xA5, 0xFD, 0xE0, 0xC6, 0x42, 0x4C, 0x0E, 0x31, 0x39, 0xE2, 0xD5, 0x23, 0xF1, 0xE5, 0x97, 0x6A, 0x5B, 0x45, 0xB9, 0x93, 0x1A, 0xA6, 0x7D, 0xA4, 0x52, 0x40, 0x26, 0xAA, 0xD4, 0x69, 0x76, 0x74, 0x95, 0x35, 0x3B, 0x05, 0x14, 0xF8, 0x34, 0x9A, 0x3B, 0x70, 0x28, 0x8D, 0x38, 0x7E, 0x01, 0x20, 0xFB, 0xD5, 0x06, 0x33, 0x36, 0xDE, 0xC6, 0xAD, 0xBF, 0xE5, 0x33, 0x70, 0xEE, 0x88, 0x0C, 0xDA, 0xD1, 0x78, 0x35, 0x1E, 0xF0, 0x49, 0x05, 0xED, 0xF0, 0x63, 0xE2, 0xBC, 0xF5, 0x61, 0xBE, 0xCB, 0x6E, 0x48, 0xC9, 0xEE, 0x0B, 0xFB, 0x08, 0x1E, 0x5F, 0xAF, 0x8F, 0x4E, 0xF3, 0x23, 0x19, 0x76, 0x5A, 0x7C, 0xA6, 0x75, 0x08, 0xF3, 0x5C, 0x32, 0xA9, 0xE6, 0x11, 0xBF, 0xF8, 0x33, 0x97, 0xEB, 0xA6, 0xD3, 0x50, 0x68, 0x64, 0x8B, 0xD0, 0x55, 0x23, 0x72, 0x03, 0xDB, 0x52, 0xA2, 0xD8, 0x5A, 0x8F, 0x3C, 0x74, 0x49, 0x60, 0x67, 0xCE, 0x42, 0xA6, 0x3F, 0x20, 0x01, 0xE3, 0x91, 0x12, 0x6B, 0xD8, 0xD9, 0xB6, 0x0B, 0x50, 0x85, 0x42, 0xAF, 0x56, 0x8A, 0x30, 0x3D, 0xA0, 0x2F, 0xC2, 0x36, 0x10, 0xC3, 0xB7, 0xA6, 0x9D, 0x5C, 0x24, 0x40, 0x3E, 0x2E, 0xF1, 0x8B, 0xAA, 0x7A, 0x79, 0x01, 0xA1, 0x0A, 0x5C, 0x2E, 0x39, 0x1A, 0x4A, 0xF3, 0xDC, 0x7B, 0xCD, 0x9B, 0xB1, 0x0A, 0xB6, 0xA5, 0xB6, 0x0E, 0x63, 0xA4, 0xA5, 0xDF, 0x51, 0xBD, 0x84, 0x60, 0xC2, 0xF1, 0x1F, 0x9E, 0x78, 0x6F, 0xE1, 0xE0, 0x12, 0x6A, 0xBF, 0x9C, 0x54, 0x81, 0xE6, 0x31, 0xF5, 0x87, 0x92, 0x97, 0x74, 0x9E, 0x14, 0x7A, 0x4A, 0x1A, 0xFA, 0xCD, 0x42, 0xB7, 0x8D, 0xC6, 0xF5, 0x34, 0xB6, 0xBA, 0x3C, 0x5D, 0x8D, 0x88, 0x28, 0xB4, 0xD6, 0x2F, 0xF7, 0xDD, 0x70, 0x31, 0xD4, 0xDE, 0x04, 0xBB, 0x11, 0xB9, 0xDB, 0x7D, 0xA2, 0x3D, 0xDA, 0x0C, 0x80, 0xEB, 0x11, 0x43, 0x73, 0x31, 0xBE, 0x10, 0x6F, 0x5A, 0xAE, 0xC9, 0x4A, 0x36, 0x78, 0x72, 0xEE, 0x74, 0xC8, 0xD1, 0x94, 0x59, 0x38, 0xA9, 0x6A, 0x08, 0x36, 0x69, 0xCC, 0xCE, 0x1D, 0xAB, 0x67, 0x76, 0x0C, 0xAD, 0x41, 0x2A, 0x62, 0x86, 0xCC, 0xFB, 0xE4, 0x57, 0x23, 0xB1, 0xD0, 0xFA, 0x4D, 0x78, 0xF2, 0x46, 0x16, 0x1D, 0x1A, 0x02, 0x82, 0xA8, 0x89, 0x44, 0xDC, 0xF1, 0x7D, 0xD6, 0x52, 0x95, 0x38, 0x29, 0x46, 0xA7, 0x86, 0x55, 0x34, 0xAD, 0xB0, 0x8A, 0xD7, 0x03, 0x25, 0x45, 0x25, 0xE0, 0x1B, 0x5B, 0x2D, 0x40, 0xD6, 0x50, 0xCB, 0xD3, 0xC0, 0x6D, 0xC9, 0x9A, 0x78, 0x56, 0xF9, 0x56, 0xB2, 0xFA, 0x2B, 0xC9, 0x9A, 0xB7, 0x5D, 0xDB, 0x9A, 0x59, 0x25, 0x47, 0x34, 0x0C, 0x59, 0xBE, 0xBF, 0xC7, 0xD8, 0xD8, 0x75, 0xD0, 0x21, 0xBD, 0x51, 0xC6, 0x66, 0x26, 0x55, 0x76, 0x21, 0xD2, 0xDE, 0x71, 0x17, 0x29, 0xD7, 0x71, 0x93, 0xF2, 0x9A, 0x69, 0x49, 0xC9, 0x8E, 0x71, 0xCC, 0x3E, 0xA5, 0x82, 0x41, 0xD9, 0xF6, 0xAA, 0x55, 0x4E, 0x99, 0x01, 0xC4, 0x82, 0x00, 0x07, 0xAE, 0xC7, 0x9A, 0xE8, 0x1B, 0xB6, 0x7B, 0x5C, 0xFE, 0x55, 0x05,
};
static const uint8_t mldsa44kPublicKeySPKI[] = {0x30, 0x82, 0x05, 0x31, 0x30, 0x0A, 0x06, 0x08, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x03, 0x03, 0x82, 0x05, 0x21, 0x00, 0xD9, 0x79, 0x6C, 0x68, 0xF4, 0xB2, 0xC6, 0xBA, 0x3D, 0xD4, 0x08, 0x72, 0x61, 0x0E, 0x9F, 0xCA, 0x3C, 0xBF, 0x59, 0x0F, 0x66, 0x34, 0xB0, 0x48, 0xE3, 0x3F, 0x19, 0x95, 0x2A, 0x47, 0x6D, 0x7E, 0x89, 0xEF, 0xF3, 0x77, 0x28, 0xA6, 0xDB, 0x1D, 0x01, 0x2B, 0x99, 0xFC, 0x8E, 0x71, 0x89, 0xAD, 0x0B, 0xA7, 0x0C, 0x8E, 0x09, 0x7D, 0x00, 0xCC, 0xA2, 0xB8, 0x6D, 0x78, 0x27, 0xF6, 0xCD, 0xD0, 0x66, 0x98, 0x12, 0x6B, 0xB2, 0x8F, 0xE6, 0xDB, 0xDC, 0xDB, 0x39, 0xFC, 0xF3, 0xF0, 0x03, 0x02, 0x4B, 0xB8, 0x6B, 0x0A, 0xDB, 0xF4, 0xBF, 0x22, 0x0C, 0x97, 0x3B, 0xF9, 0xA3, 0xD0, 0xE3, 0x86, 0xBC, 0x30, 0x93, 0x20, 0xFE, 0x0B, 0x3E, 0xF9, 0x57, 0x65, 0x12, 0xB5, 0x8F, 0x27, 0xE5, 0x6B, 0x2C, 0xFF, 0x88, 0x26, 0xC9, 0x2B, 0x4E, 0xCD, 0x3D, 0xD0, 0x50, 0x36, 0x5C, 0xB9, 0xD0, 0x51, 0xA4, 0x67, 0xE5, 0xE5, 0xAB, 0xBA, 0x28, 0x6B, 0x31, 0xA6, 0x5C, 0x4D, 0x9D, 0xD1, 0x3D, 0x08, 0x65, 0xFA, 0xD9, 0x92, 0xBC, 0xF1, 0xB3, 0x5B, 0x1D, 0x95, 0x92, 0x95, 0x66, 0x57, 0x30, 0x63, 0x69, 0x82, 0xBC, 0xD5, 0x0B, 0xCE, 0x36, 0x1F, 0xA8, 0x86, 0xF4, 0xF3, 0x0E, 0x2F, 0x2A, 0x97, 0xB6, 0xE7, 0xC4, 0x07, 0x10, 0x12, 0xAB, 0xFD, 0x4C, 0x0C, 0x60, 0xF4, 0x30, 0x40, 0x20, 0x07, 0x7A, 0x38, 0x37, 0x90, 0x6D, 0xC0, 0x39, 0x2A, 0xA2, 0x4A, 0xD3, 0x95, 0xE4, 0xF9, 0x14, 0xD7, 0x0E, 0x9B, 0x1F, 0x60, 0x1A, 0x59, 0xFD, 0x4A, 0x09, 0x07, 0x6E, 0x83, 0x4B, 0x07, 0xF6, 0x2E, 0x60, 0x8F, 0xA9, 0x13, 0x46, 0xC8, 0xC9, 0x0C, 0xDD, 0xEF, 0xD5, 0xFA, 0x9D, 0x2F, 0xA1, 0x42, 0xD4, 0xCB, 0x68, 0x13, 0x5F, 0xD9, 0x89, 0x57, 0x22, 0xC2, 0x65, 0xC7, 0x36, 0xCC, 0xF5, 0x25, 0x52, 0x0D, 0x2D, 0x72, 0xC9, 0x4A, 0xDC, 0x58, 0x61, 0x1B, 0x06, 0xEC, 0x6E, 0xA0, 0x78, 0x23, 0x3D, 0x19, 0xD3, 0x20, 0x0D, 0x38, 0xF1, 0x91, 0x7E, 0xB4, 0x1A, 0x2D, 0xE3, 0x37, 0x37, 0x1C, 0x81, 0xFB, 0x44, 0xC3, 0x21, 0xE3, 0x49, 0xD0, 0xA4, 0x4E, 0x96, 0xB9, 0xBF, 0x6B, 0x33, 0xEB, 0x03, 0xB8, 0x9B, 0xA1, 0xA5, 0x79, 0xE0, 0xE8, 0xB8, 0xBC, 0xF3, 0x52, 0x06, 0xA9, 0xD0, 0xDD, 0x93, 0x15, 0xA1, 0x5C, 0x9B, 0x6F, 0xF8, 0x45, 0x3E, 0x17, 0x63, 0x4C, 0xDE, 0xA9, 0x4C, 0x95, 0xDC, 0xEE, 0x15, 0x52, 0x88, 0xCD, 0x02, 0xBE, 0x65, 0x78, 0x48, 0x03, 0x6E, 0xA3, 0xB7, 0xD8, 0x12, 0xAA, 0xBF, 0x60, 0x47, 0xB3, 0x49, 0x79, 0xC8, 0x63, 0x3E, 0xCD, 0xE2, 0x64, 0x4E, 0x26, 0xDA, 0x9E, 0xA8, 0xC3, 0x0A, 0x62, 0x48, 0xBC, 0x07, 0xD5, 0xB4, 0xB3, 0xFE, 0xB6, 0x4F, 0x6A, 0x33, 0xA4, 0x22, 0xB1, 0x0A, 0x6E, 0xFF, 0xBD, 0xF0, 0x39, 0x7B, 0xED, 0xD4, 0x72, 0xAE, 0xCE, 0xC3, 0xFE, 0x74, 0xB0, 0x41, 0x4E, 0xFA, 0x6B, 0x5F, 0x68, 0x66, 0x4E, 0x37, 0x87, 0xB8, 0x06, 0xC6, 0x6B, 0x01, 0x55, 0x07, 0x50, 0x9D, 0xE6, 0xDA, 0x12, 0x3C, 0x46, 0x57, 0x49, 0x0E, 0x03, 0x9B, 0x71, 0x7E, 0x4C, 0x18, 0x70, 0x2A, 0x4A, 0xC5, 0xA4, 0xC7, 0x26, 0xAB, 0xCC, 0x41, 0x6C, 0x0E, 0x54, 0xE3, 0x4E, 0x55, 0x9F, 0xC1, 0x9B, 0x75, 0x5C, 0x50, 0x5B, 0xE8, 0x57, 0xA1, 0x28, 0xA1, 0x04, 0x04, 0x3B, 0x0B, 0x89, 0xB2, 0x1F, 0x61, 0x1C, 0xAA, 0x1B, 0xD0, 0x31, 0x99, 0x0A, 0xA3, 0x94, 0x38, 0xDF, 0x98, 0x6D, 0xFD, 0x50, 0xDD, 0x76, 0x99, 0xBE, 0x8F, 0x4B, 0xCA, 0xA1, 0xB5, 0x67, 0xE5, 0x86, 0xEC, 0x06, 0x57, 0x4B, 0x2D, 0x63, 0xF9, 0xD6, 0x93, 0x7B, 0xBB, 0x18, 0x21, 0xE7, 0xDE, 0x66, 0xF7, 0x0B, 0xFB, 0xA7, 0xE5, 0x26, 0x39, 0xA5, 0x57, 0x18, 0xC4, 0xA8, 0x66, 0x21, 0x1E, 0xDE, 0xCE, 0x98, 0xAC, 0x1A, 0x4B, 0x0F, 0x41, 0x6D, 0x4D, 0xD9, 0x38, 0xD3, 0xBD, 0x42, 0xF4, 0x2A, 0x5A, 0x29, 0x1A, 0x5C, 0xE1, 0x9F, 0x90, 0xBD, 0xAA, 0x10, 0xD8, 0xCE, 0x55, 0xB7, 0x30, 0x91, 0x65, 0x92, 0x08, 0x71, 0x4F, 0x76, 0x81, 0x75, 0xED, 0xE4, 0x5C, 0xA6, 0xA6, 0x77, 0x63, 0x93, 0xF1, 0xB8, 0x39, 0x02, 0x05, 0xDB, 0x69, 0x8E, 0x73, 0xDE, 0x7A, 0xCD, 0xB1, 0xA9, 0x24, 0xEB, 0x1A, 0x96, 0xCF, 0x00, 0xCA, 0x2B, 0xE8, 0x60, 0x6C, 0xAC, 0x60, 0xFF, 0x91, 0x03, 0x88, 0x9B, 0xB7, 0x7A, 0x5F, 0x06, 0x9C, 0xFF, 0xAD, 0x69, 0xC3, 0x4A, 0xED, 0x50, 0x61, 0xDC, 0xEE, 0x84, 0xA8, 0xEF, 0x99, 0x6A, 0xA0, 0x05, 0x0D, 0xB6, 0x83, 0xB7, 0x86, 0x4E, 0x03, 0xB0, 0xE1, 0xE8, 0x34, 0xA7, 0x7B, 0xC5, 0x8E, 0x73, 0x28, 0x40, 0x80, 0xD8, 0xDD, 0x92, 0xC3, 0x3C, 0xC1, 0x89, 0x16, 0xF0, 0x8D, 0xD6, 0x22, 0xF4, 0xEE, 0x17, 0xD8, 0x87, 0x1F, 0xC0, 0xDB, 0x0C, 0xD1, 0x32, 0x87, 0xEA, 0x99, 0x38, 0xD8, 0x5B, 0x2A, 0x0E, 0x5E, 0x02, 0xFC, 0x58, 0xBC, 0xA1, 0x92, 0x91, 0x4D, 0xC5, 0x0B, 0xFA, 0x43, 0x7C, 0xB6, 0x70, 0x18, 0x83, 0x3B, 0xB6, 0x77, 0x9D, 0xF9, 0xDC, 0xF6, 0x8B, 0xC2, 0xAF, 0xF9, 0x8D, 0xB8, 0xFB, 0x3E, 0xA0, 0xD9, 0xE7, 0x69, 0xCB, 0x18, 0x8E, 0x0E, 0xA2, 0xAE, 0x2C, 0x3C, 0xD4, 0xA8, 0x11, 0x70, 0x54, 0x2F, 0x4E, 0x05, 0x08, 0x8B, 0x35, 0x0B, 0x54, 0x27, 0x38, 0x19, 0x53, 0x24, 0x9C, 0x83, 0x39, 0xCE, 0xF8, 0xE7, 0x1F, 0x5F, 0x6D, 0xDD, 0xCE, 0x56, 0x17, 0x27, 0x97, 0x8D, 0xEF, 0x14, 0x25, 0x1B, 0xD4, 0x7E, 0x01, 0x08, 0xC0, 0x44, 0x3E, 0x3B, 0xFD, 0xF3, 0x2D, 0x77, 0x80, 0xAC, 0x21, 0xBC, 0x38, 0xCF, 0x73, 0x12, 0x5E, 0xCA, 0x84, 0x85, 0x0C, 0xF4, 0xB8, 0x6A, 0xFF, 0xE7, 0x1F, 0x02, 0xD1, 0x0B, 0x9B, 0xD2, 0x6F, 0x34, 0x09, 0xDC, 0x12, 0x91, 0x02, 0xEF, 0x25, 0x91, 0x8C, 0xA3, 0x13, 0xFA, 0x11, 0x49, 0x24, 0xB1, 0x42, 0x0D, 0x44, 0x61, 0x8E, 0x96, 0xE4, 0x39, 0x78, 0x0A, 0xFE, 0x96, 0xB6, 0x53, 0x1B, 0x0E, 0x7C, 0xF3, 0xAE, 0x25, 0xF1, 0xA6, 0x0D, 0xC3, 0x22, 0xED, 0xE2, 0xF7, 0x5F, 0x41, 0xEF, 0xDF, 0x9C, 0x01, 0x0A, 0xE6, 0x60, 0x1D, 0xFA, 0x62, 0xB3, 0x0F, 0x71, 0x1B, 0x2C, 0x79, 0x63, 0x32, 0x2E, 0xD0, 0xB4, 0x16, 0xA3, 0xF3, 0xD0, 0x0C, 0x62, 0xA0, 0xA5, 0xFD, 0xE0, 0xC6, 0x42, 0x4C, 0x0E, 0x31, 0x39, 0xE2, 0xD5, 0x23, 0xF1, 0xE5, 0x97, 0x6A, 0x5B, 0x45, 0xB9, 0x93, 0x1A, 0xA6, 0x7D, 0xA4, 0x52, 0x40, 0x26, 0xAA, 0xD4, 0x69, 0x76, 0x74, 0x95, 0x35, 0x3B, 0x05, 0x14, 0xF8, 0x34, 0x9A, 0x3B, 0x70, 0x28, 0x8D, 0x38, 0x7E, 0x01, 0x20, 0xFB, 0xD5, 0x06, 0x33, 0x36, 0xDE, 0xC6, 0xAD, 0xBF, 0xE5, 0x33, 0x70, 0xEE, 0x88, 0x0C, 0xDA, 0xD1, 0x78, 0x35, 0x1E, 0xF0, 0x49, 0x05, 0xED, 0xF0, 0x63, 0xE2, 0xBC, 0xF5, 0x61, 0xBE, 0xCB, 0x6E, 0x48, 0xC9, 0xEE, 0x0B, 0xFB, 0x08, 0x1E, 0x5F, 0xAF, 0x8F, 0x4E, 0xF3, 0x23, 0x19, 0x76, 0x5A, 0x7C, 0xA6, 0x75, 0x08, 0xF3, 0x5C, 0x32, 0xA9, 0xE6, 0x11, 0xBF, 0xF8, 0x33, 0x97, 0xEB, 0xA6, 0xD3, 0x50, 0x68, 0x64, 0x8B, 0xD0, 0x55, 0x23, 0x72, 0x03, 0xDB, 0x52, 0xA2, 0xD8, 0x5A, 0x8F, 0x3C, 0x74, 0x49, 0x60, 0x67, 0xCE, 0x42, 0xA6, 0x3F, 0x20, 0x01, 0xE3, 0x91, 0x12, 0x6B, 0xD8, 0xD9, 0xB6, 0x0B, 0x50, 0x85, 0x42, 0xAF, 0x56, 0x8A, 0x30, 0x3D, 0xA0, 0x2F, 0xC2, 0x36, 0x10, 0xC3, 0xB7, 0xA6, 0x9D, 0x5C, 0x24, 0x40, 0x3E, 0x2E, 0xF1, 0x8B, 0xAA, 0x7A, 0x79, 0x01, 0xA1, 0x0A, 0x5C, 0x2E, 0x39, 0x1A, 0x4A, 0xF3, 0xDC, 0x7B, 0xCD, 0x9B, 0xB1, 0x0A, 0xB6, 0xA5, 0xB6, 0x0E, 0x63, 0xA4, 0xA5, 0xDF, 0x51, 0xBD, 0x84, 0x60, 0xC2, 0xF1, 0x1F, 0x9E, 0x78, 0x6F, 0xE1, 0xE0, 0x12, 0x6A, 0xBF, 0x9C, 0x54, 0x81, 0xE6, 0x31, 0xF5, 0x87, 0x92, 0x97, 0x74, 0x9E, 0x14, 0x7A, 0x4A, 0x1A, 0xFA, 0xCD, 0x42, 0xB7, 0x8D, 0xC6, 0xF5, 0x34, 0xB6, 0xBA, 0x3C, 0x5D, 0x8D, 0x88, 0x28, 0xB4, 0xD6, 0x2F, 0xF7, 0xDD, 0x70, 0x31, 0xD4, 0xDE, 0x04, 0xBB, 0x11, 0xB9, 0xDB, 0x7D, 0xA2, 0x3D, 0xDA, 0x0C, 0x80, 0xEB, 0x11, 0x43, 0x73, 0x31, 0xBE, 0x10, 0x6F, 0x5A, 0xAE, 0xC9, 0x4A, 0x36, 0x78, 0x72, 0xEE, 0x74, 0xC8, 0xD1, 0x94, 0x59, 0x38, 0xA9, 0x6A, 0x08, 0x36, 0x69, 0xCC, 0xCE, 0x1D, 0xAB, 0x67, 0x76, 0x0C, 0xAD, 0x41, 0x2A, 0x62, 0x86, 0xCC, 0xFB, 0xE4, 0x57, 0x23, 0xB1, 0xD0, 0xFA, 0x4D, 0x78, 0xF2, 0x46, 0x16, 0x1D, 0x1A, 0x02, 0x82, 0xA8, 0x89, 0x44, 0xDC, 0xF1, 0x7D, 0xD6, 0x52, 0x95, 0x38, 0x29, 0x46, 0xA7, 0x86, 0x55, 0x34, 0xAD, 0xB0, 0x8A, 0xD7, 0x03, 0x25, 0x45, 0x25, 0xE0, 0x1B, 0x5B, 0x2D, 0x40, 0xD6, 0x50, 0xCB, 0xD3, 0xC0, 0x6D, 0xC9, 0x9A, 0x78, 0x56, 0xF9, 0x56, 0xB2, 0xFA, 0x2B, 0xC9, 0x9A, 0xB7, 0x5D, 0xDB, 0x9A, 0x59, 0x25, 0x47, 0x34, 0x0C, 0x59, 0xBE, 0xBF, 0xC7, 0xD8, 0xD8, 0x75, 0xD0, 0x21, 0xBD, 0x51, 0xC6, 0x66, 0x26, 0x55, 0x76, 0x21, 0xD2, 0xDE, 0x71, 0x17, 0x29, 0xD7, 0x71, 0x93, 0xF2, 0x9A, 0x69, 0x49, 0xC9, 0x8E, 0x71, 0xCC, 0x3E, 0xA5, 0x82, 0x41, 0xD9, 0xF6, 0xAA, 0x55, 0x4E, 0x99, 0x01, 0xC4, 0x82, 0x00, 0x07, 0xAE, 0xC7, 0x9A, 0xE8, 0x1B, 0xB6, 0x7B, 0x5C, 0xFE, 0x55, 0x05,
};
static const uint8_t mldsa65kPublicKey[] = {0x9B, 0x77, 0xAB, 0x96, 0x9D, 0x65, 0xA2, 0xC1, 0x55, 0x65, 0x02, 0x9B, 0xA5, 0xD4, 0xE5, 0x93, 0xA1, 0xAC, 0xE7, 0x3E, 0x8C, 0x61, 0xB7, 0xCB, 0xA1, 0x3E, 0x74, 0x8A, 0xC9, 0xC0, 0xA0, 0x63, 0x4A, 0xF6, 0xF4, 0x1C, 0x72, 0x37, 0xB0, 0x31, 0x9E, 0xB7, 0x51, 0x55, 0xCF, 0x5B, 0x4E, 0x03, 0x46, 0x7C, 0x26, 0xBE, 0x84, 0x73, 0xD8, 0x50, 0xDF, 0x72, 0x87, 0xC0, 0x18, 0xED, 0xE7, 0xE4, 0x12, 0x4F, 0xCA, 0x4E, 0x1A, 0xFA, 0x76, 0x82, 0xD4, 0xA6, 0x3E, 0xDA, 0xEC, 0x74, 0x53, 0xFF, 0xDD, 0x69, 0x5C, 0x9F, 0xFD, 0x69, 0xA3, 0xED, 0x4F, 0xEB, 0xFB, 0xEF, 0xD2, 0x98, 0x8B, 0x45, 0x06, 0xBA, 0xD5, 0xF8, 0x9E, 0x0A, 0x2D, 0xA2, 0xC7, 0x96, 0x4B, 0x79, 0xE9, 0xA9, 0xA6, 0x73, 0x69, 0xF8, 0x8C, 0x01, 0x69, 0xF2, 0x66, 0x05, 0x37, 0x31, 0x65, 0xA9, 0x09, 0x3E, 0x0E, 0x73, 0x95, 0x67, 0xC9, 0x33, 0xA6, 0x57, 0xDF, 0xDD, 0xC0, 0x55, 0x1A, 0x89, 0x6F, 0xC8, 0x30, 0x71, 0x68, 0x3C, 0x2A, 0x7E, 0x61, 0x86, 0xAC, 0x70, 0x6A, 0x27, 0x31, 0x9B, 0x9A, 0xEC, 0x8F, 0x37, 0x2B, 0x71, 0x91, 0x91, 0x6C, 0x8B, 0x35, 0xED, 0xF1, 0x97, 0x87, 0x58, 0xD1, 0x4F, 0xF2, 0x06, 0x23, 0xE6, 0x1C, 0x44, 0x63, 0x02, 0x9E, 0x09, 0x76, 0x6C, 0x72, 0xBD, 0x0D, 0xB3, 0xE2, 0x1D, 0x92, 0xAA, 0x8D, 0x7B, 0x78, 0xD8, 0xB3, 0xA7, 0x5A, 0xAB, 0xBF, 0x22, 0xBB, 0x30, 0x5B, 0xFB, 0xB4, 0x3C, 0x52, 0xD2, 0xA2, 0xED, 0x3B, 0x99, 0x43, 0xCB, 0x29, 0x66, 0x2A, 0xBD, 0x52, 0x1B, 0x1C, 0xB4, 0xE5, 0xE3, 0x6E, 0xFF, 0xAD, 0xEF, 0x8B, 0xE1, 0xF9, 0xB5, 0x5E, 0xCB, 0xF2, 0x8E, 0xCD, 0x53, 0x39, 0xBE, 0xBE, 0x61, 0x72, 0x86, 0x31, 0x65, 0xA0, 0xFC, 0xC1, 0xFC, 0x31, 0x79, 0x93, 0xDF, 0x76, 0x13, 0x71, 0xE4, 0x61, 0x0F, 0x6B, 0x32, 0x78, 0xD2, 0x24, 0xB7, 0x8C, 0xE8, 0x84, 0xE3, 0xB8, 0xF6, 0x04, 0xF3, 0x30, 0xE9, 0x5B, 0xA5, 0xD8, 0x94, 0xA7, 0xA3, 0xF0, 0xE8, 0xAC, 0x70, 0x32, 0x42, 0xB5, 0x08, 0xEE, 0x2A, 0x77, 0xFA, 0x04, 0x49, 0xE9, 0x7A, 0xB7, 0x0A, 0x95, 0x05, 0x86, 0x33, 0xA5, 0xE4, 0x5A, 0xC6, 0xE1, 0xE7, 0x48, 0xBD, 0xBA, 0x80, 0xE7, 0x21, 0x61, 0x45, 0x24, 0x5E, 0xA9, 0x7F, 0x2D, 0x75, 0x0F, 0xE9, 0xEE, 0x79, 0x88, 0x64, 0xF3, 0xE7, 0x0C, 0xA0, 0xEB, 0x93, 0x2C, 0x6B, 0xD3, 0x51, 0x12, 0xE7, 0x62, 0x8D, 0x71, 0x10, 0x6D, 0x5B, 0x3A, 0x27, 0xF4, 0xEA, 0x80, 0xFC, 0xCD, 0x58, 0x81, 0x43, 0xEB, 0xA0, 0x4E, 0xF5, 0xA1, 0x68, 0x67, 0x74, 0x7C, 0x14, 0x12, 0xA6, 0x78, 0xC2, 0x08, 0x58, 0x3F, 0x20, 0x96, 0x52, 0xD2, 0x61, 0xDA, 0xED, 0x5F, 0x7F, 0xAD, 0x40, 0x93, 0x21, 0xEB, 0xC4, 0x37, 0x5C, 0xD1, 0x72, 0xE6, 0x06, 0x37, 0xD9, 0xF6, 0x09, 0xD4, 0xC9, 0x6D, 0xED, 0x07, 0xF6, 0xD2, 0x15, 0x94, 0xFD, 0xF6, 0xC3, 0x09, 0x60, 0x6D, 0x6A, 0x23, 0x50, 0x8C, 0xDD, 0x61, 0xDD, 0x66, 0x81, 0xB0, 0xAC, 0x7C, 0xE7, 0x7F, 0xED, 0x3C, 0x2F, 0x19, 0xB5, 0xF9, 0xB7, 0x2E, 0x35, 0xF7, 0xF4, 0x98, 0x0E, 0x6A, 0x9E, 0x6D, 0xAC, 0xF1, 0x0F, 0x90, 0x25, 0xED, 0xC5, 0x94, 0x9E, 0x10, 0x29, 0x97, 0x47, 0x05, 0x3D, 0x03, 0x6F, 0x69, 0xAE, 0x84, 0x08, 0x9B, 0x33, 0x0C, 0x1F, 0x26, 0x65, 0xC7, 0x86, 0x25, 0x10, 0x11, 0x97, 0x33, 0x3D, 0x98, 0x43, 0xB5, 0x7F, 0x9C, 0x19, 0x62, 0xE5, 0x46, 0x6D, 0x3B, 0xA2, 0xDC, 0xD4, 0x17, 0x85, 0x9A, 0xE8, 0x2C, 0xF3, 0x01, 0x5F, 0x39, 0xD1, 0xBC, 0x07, 0x8E, 0xAC, 0xC9, 0x28, 0x0C, 0x7B, 0xD8, 0x02, 0xFE, 0x46, 0x12, 0xA8, 0xBD, 0x0E, 0x6B, 0x23, 0x65, 0x5B, 0xAA, 0xFC, 0x32, 0x20, 0xF7, 0xCC, 0xC7, 0x06, 0x80, 0x09, 0x0A, 0x95, 0xD9, 0x69, 0xED, 0x3C, 0x6C, 0xEB, 0x62, 0x28, 0xE6, 0x4E, 0xF4, 0xFA, 0x9B, 0x5C, 0x36, 0x07, 0xE0, 0x25, 0x20, 0xB8, 0xF4, 0x1F, 0x2E, 0x78, 0x21, 0xEE, 0xFA, 0x9E, 0x80, 0x14, 0xAD, 0xAD, 0x83, 0x39, 0x2E, 0xD0, 0xE9, 0x56, 0xE3, 0x88, 0x0C, 0xC4, 0xD7, 0xBE, 0xB1, 0xE4, 0xD0, 0x42, 0xE6, 0xED, 0xDC, 0x44, 0x65, 0x51, 0x1F, 0x95, 0x9A, 0xAA, 0xBF, 0x83, 0x7B, 0xD7, 0x14, 0x23, 0x18, 0x81, 0x91, 0x0A, 0x07, 0x97, 0x10, 0x6F, 0x3C, 0x16, 0xF2, 0xF0, 0x3E, 0xE1, 0x45, 0x40, 0xB0, 0x39, 0x98, 0x33, 0x55, 0xFF, 0x7E, 0x75, 0x31, 0xE0, 0x10, 0x16, 0x81, 0x36, 0x56, 0x86, 0x34, 0x1C, 0x61, 0x10, 0x25, 0xAE, 0x98, 0x6E, 0xBE, 0xC9, 0x47, 0xCD, 0x14, 0x1C, 0x52, 0x8C, 0x27, 0xEE, 0x28, 0xDA, 0x18, 0x96, 0x4D, 0x16, 0x6D, 0x17, 0x2E, 0x5B, 0x7E, 0x88, 0x70, 0xC8, 0x3D, 0x31, 0x34, 0xE5, 0xEA, 0x08, 0x40, 0x25, 0x7B, 0x03, 0x75, 0x47, 0xAD, 0x19, 0x02, 0x7E, 0xCC, 0xB6, 0x43, 0xD1, 0xC9, 0xB2, 0x95, 0x7F, 0x9F, 0x93, 0xC4, 0xD7, 0x33, 0x5A, 0x7E, 0xA4, 0x51, 0x58, 0xC5, 0xA7, 0x23, 0x25, 0xF8, 0xF4, 0xDE, 0xEF, 0x84, 0x72, 0x0E, 0x8D, 0xE7, 0x9E, 0x1E, 0x40, 0xB3, 0xA6, 0x58, 0x34, 0x4E, 0xB8, 0x56, 0x6B, 0xA1, 0x50, 0x2B, 0x1C, 0xF9, 0xA6, 0x88, 0x21, 0x34, 0x79, 0x99, 0x5F, 0x24, 0xD6, 0x96, 0x67, 0xB5, 0x7E, 0x9C, 0xD2, 0xFB, 0x11, 0x40, 0xA6, 0xE6, 0x20, 0xD2, 0x8C, 0x38, 0x62, 0x9B, 0xC1, 0xD7, 0x57, 0x42, 0xE0, 0xD7, 0x34, 0xF3, 0x90, 0xF9, 0x60, 0xDD, 0xEA, 0x24, 0x67, 0x6A, 0xC0, 0xC7, 0xEF, 0xA7, 0x1B, 0xDC, 0xAD, 0x3D, 0x0D, 0x17, 0x90, 0x66, 0x70, 0xB2, 0x98, 0x24, 0x1B, 0x58, 0x79, 0xAC, 0x3E, 0x61, 0x9C, 0x67, 0xB4, 0xEE, 0x09, 0x06, 0x20, 0xCE, 0x39, 0x03, 0x57, 0xD4, 0xB5, 0x44, 0x3C, 0x35, 0x80, 0xDD, 0xEF, 0xC3, 0xC5, 0xC4, 0x93, 0x79, 0xF8, 0x84, 0x60, 0x31, 0x27, 0xB7, 0xF8, 0xEB, 0x63, 0xE8, 0x75, 0x74, 0x31, 0x29, 0xF4, 0xE7, 0x06, 0x51, 0x74, 0x72, 0x71, 0x9D, 0xA1, 0x3F, 0x3C, 0x73, 0xCF, 0x07, 0xA9, 0x98, 0x23, 0x1F, 0x62, 0x9C, 0x9E, 0x27, 0xFD, 0x1E, 0xC8, 0x1C, 0xB9, 0xBD, 0x16, 0xB5, 0x4C, 0x1A, 0xC2, 0x8D, 0xCF, 0x4D, 0xB8, 0xC2, 0x4D, 0x94, 0xE6, 0x12, 0x6D, 0x14, 0xFA, 0x2B, 0xF4, 0x4A, 0x2B, 0xD9, 0x7D, 0xEF, 0xF8, 0x81, 0x2C, 0xF7, 0x7B, 0x98, 0x44, 0x12, 0x58, 0xD5, 0x82, 0xAA, 0xED, 0x49, 0x40, 0x87, 0xBA, 0x11, 0x29, 0x7E, 0xFD, 0x04, 0x67, 0x20, 0x5D, 0x2B, 0x79, 0x42, 0x07, 0x03, 0x5C, 0x36, 0xD7, 0xBE, 0x72, 0xCA, 0x13, 0xCF, 0x93, 0x2D, 0xD8, 0xA9, 0xEE, 0x06, 0x0B, 0xCF, 0x5A, 0x46, 0x88, 0x57, 0x9E, 0x18, 0x92, 0x3B, 0x5F, 0x2F, 0x86, 0xCD, 0x3D, 0x49, 0xF6, 0xA3, 0x05, 0xE6, 0xE4, 0x68, 0xA4, 0x79, 0xA6, 0xEE, 0x85, 0xF4, 0x2B, 0xF6, 0x6E, 0x1B, 0x7A, 0xBD, 0x77, 0xEA, 0x6A, 0xC9, 0x31, 0x34, 0x8E, 0x5F, 0xC2, 0xF3, 0x87, 0x3D, 0x8F, 0xD7, 0xB0, 0x16, 0x28, 0x3F, 0x2C, 0x87, 0xA0, 0xA3, 0x56, 0xE8, 0x21, 0x83, 0x53, 0xCB, 0xE9, 0x1D, 0x28, 0x57, 0x93, 0xDB, 0x5B, 0xE9, 0xF0, 0x7B, 0x7F, 0xF4, 0x6A, 0x51, 0x48, 0xFC, 0xAB, 0xF5, 0x3B, 0x44, 0xA7, 0x5E, 0x67, 0x3A, 0x6B, 0x43, 0x9C, 0xD1, 0x03, 0xDF, 0xF8, 0xD5, 0x7F, 0x7B, 0x09, 0x62, 0xBF, 0x28, 0xBD, 0xC6, 0x3E, 0xC3, 0x6C, 0x91, 0x01, 0x45, 0x3F, 0xE2, 0x1F, 0xEF, 0x2A, 0x8F, 0xB2, 0x1B, 0x72, 0x35, 0x4D, 0x18, 0x6F, 0x4D, 0x57, 0xBF, 0x6A, 0x69, 0x02, 0x69, 0x4A, 0xE5, 0x5F, 0x74, 0xF7, 0x69, 0x5B, 0x89, 0x08, 0xCE, 0xCE, 0x15, 0x56, 0x3F, 0x21, 0x1A, 0xB8, 0xEC, 0x4D, 0xB0, 0x7E, 0x0F, 0x89, 0xB0, 0x5C, 0x6D, 0xDB, 0x53, 0x9E, 0xA9, 0x27, 0x28, 0x52, 0xE5, 0x9E, 0x1F, 0xEF, 0x84, 0x1A, 0x9A, 0xAE, 0x86, 0x8B, 0x25, 0x3B, 0xC6, 0x3B, 0x8E, 0x9C, 0x32, 0xD9, 0x89, 0x3B, 0xA2, 0xCB, 0x59, 0x35, 0xC3, 0x71, 0xEE, 0x22, 0x0C, 0x61, 0xEA, 0x59, 0x33, 0x25, 0x39, 0xAF, 0xF0, 0x12, 0x81, 0x55, 0x4A, 0x9D, 0x0C, 0x3E, 0x5E, 0x34, 0x9F, 0xA7, 0xD8, 0xC5, 0xB5, 0x0A, 0xC3, 0xA2, 0x00, 0x3F, 0x59, 0x3D, 0x07, 0x5F, 0x2B, 0xC1, 0x6F, 0x6A, 0xE3, 0x94, 0x90, 0xAF, 0x81, 0x11, 0x82, 0x89, 0xF4, 0x9D, 0x8B, 0x05, 0xE2, 0x7C, 0x22, 0x02, 0xEC, 0x00, 0x38, 0x39, 0xED, 0x04, 0xB2, 0xC9, 0xD8, 0xA1, 0x1B, 0xED, 0xB9, 0xE1, 0x62, 0x82, 0xC4, 0xCC, 0xA0, 0x61, 0xEE, 0x7A, 0x17, 0xA0, 0x99, 0xAC, 0xAC, 0x85, 0xA7, 0x5F, 0xC9, 0xC3, 0xC5, 0x63, 0x8F, 0x5A, 0xE7, 0x41, 0xAC, 0xB7, 0x89, 0x13, 0x38, 0xD8, 0x58, 0xBF, 0x71, 0xA5, 0x4F, 0x9D, 0x4C, 0x72, 0x57, 0x88, 0x2E, 0xAB, 0xD4, 0x74, 0xDE, 0x46, 0x9F, 0xF4, 0xBA, 0xB1, 0x55, 0x6A, 0x18, 0xF4, 0x87, 0xB9, 0x24, 0xA7, 0xD9, 0xF4, 0x9A, 0x3C, 0xEF, 0xF4, 0xA2, 0x2D, 0x0F, 0xC9, 0xE4, 0x45, 0xC2, 0xC9, 0x6F, 0x2D, 0xB6, 0xDA, 0xE6, 0x89, 0x38, 0x80, 0x2A, 0x89, 0xE2, 0xF5, 0x3D, 0x77, 0x5E, 0x61, 0x6E, 0x9C, 0xF9, 0x87, 0x89, 0xD4, 0x70, 0x23, 0x79, 0x93, 0xDA, 0xCE, 0x62, 0x89, 0xEB, 0x13, 0x77, 0xB0, 0x49, 0xB2, 0xF9, 0xFC, 0x84, 0xD3, 0x06, 0xD2, 0x8D, 0x5A, 0x94, 0x64, 0xC1, 0xA8, 0x9A, 0x60, 0x57, 0x8A, 0x8F, 0x62, 0x4A, 0x78, 0x12, 0x6B, 0x87, 0x6F, 0x6D, 0xC8, 0x32, 0xF3, 0xC6, 0x8D, 0xDB, 0x3A, 0x67, 0x95, 0xCD, 0xAF, 0x48, 0x28, 0x79, 0xC2, 0xB6, 0xDB, 0xD8, 0xFE, 0x82, 0x15, 0xE6, 0xE4, 0xEC, 0x79, 0xE2, 0xB4, 0x21, 0x5C, 0x30, 0x45, 0xD7, 0x3B, 0xA0, 0x1A, 0x3B, 0xAA, 0x3D, 0x6C, 0x1C, 0xC3, 0x1E, 0xDE, 0x4D, 0x75, 0x1D, 0x9A, 0x96, 0x51, 0xF9, 0x4F, 0x10, 0x28, 0x7E, 0x88, 0xEE, 0x3B, 0x93, 0x4A, 0x0B, 0x09, 0x44, 0x9C, 0x20, 0x34, 0xF6, 0xEE, 0x6F, 0x26, 0xB9, 0x4C, 0x76, 0xCC, 0xE1, 0x6F, 0x09, 0x91, 0xAF, 0x48, 0x8C, 0xC4, 0x31, 0xA2, 0xF9, 0x44, 0x77, 0x19, 0xA7, 0x00, 0x33, 0x77, 0x31, 0xF2, 0xF5, 0xF7, 0x30, 0xDF, 0xAB, 0xFE, 0x7E, 0xE6, 0x83, 0xE1, 0xC9, 0x2A, 0xC8, 0xE0, 0xA6, 0xAC, 0x5A, 0x28, 0x7F, 0xC4, 0x0B, 0xEB, 0x55, 0xD9, 0x5D, 0xBD, 0xB5, 0xD2, 0xF6, 0xB4, 0xA9, 0x76, 0x2B, 0x35, 0x10, 0x36, 0x3B, 0xCC, 0x61, 0x6C, 0x79, 0xCE, 0xC3, 0x9A, 0x02, 0x9A, 0x00, 0xBA, 0x43, 0x20, 0x3F, 0x26, 0x36, 0x66, 0x07, 0x11, 0x68, 0x51, 0x47, 0xBE, 0x78, 0xED, 0x4A, 0xFA, 0xBC, 0xDA, 0xCD, 0xFD, 0x02, 0xDB, 0xD1, 0x8B, 0xE0, 0xBD, 0x13, 0xFE, 0xED, 0x26, 0x77, 0xE4, 0x83, 0xAE, 0xB7, 0xAB, 0xFD, 0x2A, 0x5E, 0xA3, 0x28, 0xFD, 0x90, 0x40, 0x3D, 0x34, 0xF7, 0xF8, 0x35, 0x80, 0xF6, 0x6F, 0xA0, 0xE9, 0xCD, 0x9A, 0x54, 0x6F, 0x41, 0xA5, 0xC7, 0xED, 0xEA, 0xDC, 0x52, 0x23, 0xF1, 0x96, 0x19, 0x8E, 0x2B, 0x94, 0x3F, 0xD9, 0x27, 0x60, 0x1E, 0x27, 0xC1, 0x39, 0x68, 0x78, 0x7B, 0x47, 0x8F, 0xCC, 0xCD, 0xBE, 0xE4, 0xBD, 0x0B, 0x73, 0x03, 0xFB, 0xFE, 0xC0, 0x50, 0x38, 0x70, 0xDF, 0x81, 0x5D, 0x22, 0x4C, 0x5B, 0xCB, 0x27, 0x5D, 0xD2, 0x94, 0x64, 0x0A, 0x88, 0x67, 0x31, 0xE9, 0x08, 0xF0, 0x88, 0x20, 0xF2, 0x86, 0xCA, 0xBD, 0x18, 0x5F, 0x34, 0xD0, 0x96, 0x0D, 0x4A, 0x62, 0x4D, 0xBE, 0xE8, 0xA6, 0x04, 0xA6, 0x69, 0xCE, 0xCD, 0xE9, 0x5A, 0x1D, 0xD2, 0xF8, 0xCF, 0x19, 0x06, 0x17, 0x05, 0x82, 0x6B, 0x60, 0x3E, 0x5E, 0x6B, 0x1D, 0x1E, 0x13, 0x51, 0x5D, 0xFE, 0x95, 0x38, 0x33, 0x62, 0x9B, 0xBF, 0xD5, 0x3E, 0x3B, 0x8B, 0xD2, 0x6F, 0x24, 0x6D, 0x24, 0xC9, 0x0D, 0x2D, 0x52, 0xBF, 0xDA, 0xCE, 0x5E, 0xFE, 0x9D, 0xB8, 0x5D, 0x61, 0x57, 0xBC, 0x8C, 0x7A, 0x17, 0x75, 0x80, 0xEE, 0x52, 0x2F, 0xF5, 0x25, 0x48, 0x3A, 0x9E, 0x27, 0xF4, 0xEB, 0xE1, 0x01, 0xE4, 0xA7, 0x48, 0x93, 0xAA, 0x92, 0x68, 0xC0, 0x3B, 0x1A, 0x5A, 0xC5, 0x6D, 0xD0, 0x91, 0xB9, 0x8D, 0x44, 0xD4, 0xE1, 0x9C, 0x74, 0xEA, 0x14, 0xFA, 0xF6, 0x1E, 0x01, 0xC0, 0x89, 0x24, 0x90, 0x71, 0xAF, 0xF5, 0x2D, 0x6C, 0x35, 0x13, 0xA6, 0x73, 0x14, 0xAC, 0xE5, 0xAE, 0x88, 0x2F, 0x9D, 0x77, 0x3B, 0x8F, 0x61, 0xB1, 0x47, 0x66, 0x72, 0x14, 0x91, 0x40, 0xD7, 0x50, 0xDC, 0xEA, 0xFF, 0x49, 0x9E, 0x17, 0x75, 0x25, 0x49, 0x7C, 0x57, 0x41, 0xA7, 0x8C, 0x4D, 0x3B, 0x94, 0x9D, 0x65, 0x83, 0x62, 0x6F, 0x16, 0xBF, 0x0C, 0x87, 0x03, 0x61, 0xB4, 0x3B, 0x60, 0x6D, 0x07, 0x56, 0xB8, 0x1F, 0x89, 0xAD, 0x00, 0x25, 0x10, 0x4A, 0x34, 0x4C, 0x9A, 0x26, 0xDA, 0x06, 0x25, 0x9C, 0x91, 0xA6, 0xA5, 0xAD, 0x4D, 0x6E, 0xE9, 0x2F, 0x18, 0xC4, 0x1D, 0x09, 0xE1, 0xAA, 0x66, 0x01, 0x31, 0x6D, 0x12, 0x30, 0xED, 0x97, 0x3F, 0x67, 0xCE, 0x4E, 0x26, 0x0B, 0xF5, 0x5E, 0x81, 0xA7, 0x1F, 0x83, 0x68, 0x91, 0xC3, 0xD0, 0x4C, 0x2E, 0xD4, 0xDE, 0xEF, 0x34, 0xF9, 0x61, 0x83, 0x6F, 0xD6, 0x6E, 0x40, 0x87, 0x48, 0x7E, 0xCF, 0x56, 0x42, 0x21, 0xBA, 0x40, 0x64, 0x17, 0xFA, 0x97, 0xFF, 0x8D, 0xC8, 0x32, 0xFA, 0xB7, 0x45, 0xB0, 0xEC, 0xBD, 0x0E, 0x51, 0x63, 0x90, 0x05, 0x68, 0x7A, 0x45, 0x86, 0x68, 0x2A, 0x0E, 0x81, 0x5F, 0xDD, 0x12, 0xAD, 0x48, 0xF6, 0x87, 0x2E, 0x8D, 0xF6, 0x86, 0xC3, 0x6D, 0x69, 0xD5, 0x4E, 0x52, 0x8A, 0x8E, 0xE8, 0x01, 0x56, 0x11, 0xCC, 0x2E, 0x3F, 0xB5, 0x46, 0x1D, 0xF6, 0x6E, 0x4A, 0xEE, 0x1C, 0x60, 0x15, 0x85, 0xF6, 0x40, 0xFD, 0x56, 0xDC, 0x10, 0x01, 0xC3, 0xBD, 0xAE, 0x5A, 0x13, 0x1F, 0x15, 0x16, 0x10, 0x92, 0xC5, 0x02, 0xC2, 0x81, 0xB5, 0x6A, 0x4D, 0x37, 0x29, 0x40, 0x8B, 0xAA, 0x5F, 0xC9, 0x4C, 0x26, 0x7B, 0x2C, 0x21, 0x9E, 0xE2, 0xF2, 0x5A, 0x20, 0x88, 0x3F, 0x40, 0x30, 0xC5, 0x64, 0x0E,
};
static const uint8_t mldsa65kPublicKeySPKI[] = { 0x30, 0x82, 0x07, 0xB1, 0x30, 0x0A, 0x06, 0x08, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x03, 0x03, 0x82, 0x07, 0xA1, 0x00, 0x9B, 0x77, 0xAB, 0x96, 0x9D, 0x65, 0xA2, 0xC1, 0x55, 0x65, 0x02, 0x9B, 0xA5, 0xD4, 0xE5, 0x93, 0xA1, 0xAC, 0xE7, 0x3E, 0x8C, 0x61, 0xB7, 0xCB, 0xA1, 0x3E, 0x74, 0x8A, 0xC9, 0xC0, 0xA0, 0x63, 0x4A, 0xF6, 0xF4, 0x1C, 0x72, 0x37, 0xB0, 0x31, 0x9E, 0xB7, 0x51, 0x55, 0xCF, 0x5B, 0x4E, 0x03, 0x46, 0x7C, 0x26, 0xBE, 0x84, 0x73, 0xD8, 0x50, 0xDF, 0x72, 0x87, 0xC0, 0x18, 0xED, 0xE7, 0xE4, 0x12, 0x4F, 0xCA, 0x4E, 0x1A, 0xFA, 0x76, 0x82, 0xD4, 0xA6, 0x3E, 0xDA, 0xEC, 0x74, 0x53, 0xFF, 0xDD, 0x69, 0x5C, 0x9F, 0xFD, 0x69, 0xA3, 0xED, 0x4F, 0xEB, 0xFB, 0xEF, 0xD2, 0x98, 0x8B, 0x45, 0x06, 0xBA, 0xD5, 0xF8, 0x9E, 0x0A, 0x2D, 0xA2, 0xC7, 0x96, 0x4B, 0x79, 0xE9, 0xA9, 0xA6, 0x73, 0x69, 0xF8, 0x8C, 0x01, 0x69, 0xF2, 0x66, 0x05, 0x37, 0x31, 0x65, 0xA9, 0x09, 0x3E, 0x0E, 0x73, 0x95, 0x67, 0xC9, 0x33, 0xA6, 0x57, 0xDF, 0xDD, 0xC0, 0x55, 0x1A, 0x89, 0x6F, 0xC8, 0x30, 0x71, 0x68, 0x3C, 0x2A, 0x7E, 0x61, 0x86, 0xAC, 0x70, 0x6A, 0x27, 0x31, 0x9B, 0x9A, 0xEC, 0x8F, 0x37, 0x2B, 0x71, 0x91, 0x91, 0x6C, 0x8B, 0x35, 0xED, 0xF1, 0x97, 0x87, 0x58, 0xD1, 0x4F, 0xF2, 0x06, 0x23, 0xE6, 0x1C, 0x44, 0x63, 0x02, 0x9E, 0x09, 0x76, 0x6C, 0x72, 0xBD, 0x0D, 0xB3, 0xE2, 0x1D, 0x92, 0xAA, 0x8D, 0x7B, 0x78, 0xD8, 0xB3, 0xA7, 0x5A, 0xAB, 0xBF, 0x22, 0xBB, 0x30, 0x5B, 0xFB, 0xB4, 0x3C, 0x52, 0xD2, 0xA2, 0xED, 0x3B, 0x99, 0x43, 0xCB, 0x29, 0x66, 0x2A, 0xBD, 0x52, 0x1B, 0x1C, 0xB4, 0xE5, 0xE3, 0x6E, 0xFF, 0xAD, 0xEF, 0x8B, 0xE1, 0xF9, 0xB5, 0x5E, 0xCB, 0xF2, 0x8E, 0xCD, 0x53, 0x39, 0xBE, 0xBE, 0x61, 0x72, 0x86, 0x31, 0x65, 0xA0, 0xFC, 0xC1, 0xFC, 0x31, 0x79, 0x93, 0xDF, 0x76, 0x13, 0x71, 0xE4, 0x61, 0x0F, 0x6B, 0x32, 0x78, 0xD2, 0x24, 0xB7, 0x8C, 0xE8, 0x84, 0xE3, 0xB8, 0xF6, 0x04, 0xF3, 0x30, 0xE9, 0x5B, 0xA5, 0xD8, 0x94, 0xA7, 0xA3, 0xF0, 0xE8, 0xAC, 0x70, 0x32, 0x42, 0xB5, 0x08, 0xEE, 0x2A, 0x77, 0xFA, 0x04, 0x49, 0xE9, 0x7A, 0xB7, 0x0A, 0x95, 0x05, 0x86, 0x33, 0xA5, 0xE4, 0x5A, 0xC6, 0xE1, 0xE7, 0x48, 0xBD, 0xBA, 0x80, 0xE7, 0x21, 0x61, 0x45, 0x24, 0x5E, 0xA9, 0x7F, 0x2D, 0x75, 0x0F, 0xE9, 0xEE, 0x79, 0x88, 0x64, 0xF3, 0xE7, 0x0C, 0xA0, 0xEB, 0x93, 0x2C, 0x6B, 0xD3, 0x51, 0x12, 0xE7, 0x62, 0x8D, 0x71, 0x10, 0x6D, 0x5B, 0x3A, 0x27, 0xF4, 0xEA, 0x80, 0xFC, 0xCD, 0x58, 0x81, 0x43, 0xEB, 0xA0, 0x4E, 0xF5, 0xA1, 0x68, 0x67, 0x74, 0x7C, 0x14, 0x12, 0xA6, 0x78, 0xC2, 0x08, 0x58, 0x3F, 0x20, 0x96, 0x52, 0xD2, 0x61, 0xDA, 0xED, 0x5F, 0x7F, 0xAD, 0x40, 0x93, 0x21, 0xEB, 0xC4, 0x37, 0x5C, 0xD1, 0x72, 0xE6, 0x06, 0x37, 0xD9, 0xF6, 0x09, 0xD4, 0xC9, 0x6D, 0xED, 0x07, 0xF6, 0xD2, 0x15, 0x94, 0xFD, 0xF6, 0xC3, 0x09, 0x60, 0x6D, 0x6A, 0x23, 0x50, 0x8C, 0xDD, 0x61, 0xDD, 0x66, 0x81, 0xB0, 0xAC, 0x7C, 0xE7, 0x7F, 0xED, 0x3C, 0x2F, 0x19, 0xB5, 0xF9, 0xB7, 0x2E, 0x35, 0xF7, 0xF4, 0x98, 0x0E, 0x6A, 0x9E, 0x6D, 0xAC, 0xF1, 0x0F, 0x90, 0x25, 0xED, 0xC5, 0x94, 0x9E, 0x10, 0x29, 0x97, 0x47, 0x05, 0x3D, 0x03, 0x6F, 0x69, 0xAE, 0x84, 0x08, 0x9B, 0x33, 0x0C, 0x1F, 0x26, 0x65, 0xC7, 0x86, 0x25, 0x10, 0x11, 0x97, 0x33, 0x3D, 0x98, 0x43, 0xB5, 0x7F, 0x9C, 0x19, 0x62, 0xE5, 0x46, 0x6D, 0x3B, 0xA2, 0xDC, 0xD4, 0x17, 0x85, 0x9A, 0xE8, 0x2C, 0xF3, 0x01, 0x5F, 0x39, 0xD1, 0xBC, 0x07, 0x8E, 0xAC, 0xC9, 0x28, 0x0C, 0x7B, 0xD8, 0x02, 0xFE, 0x46, 0x12, 0xA8, 0xBD, 0x0E, 0x6B, 0x23, 0x65, 0x5B, 0xAA, 0xFC, 0x32, 0x20, 0xF7, 0xCC, 0xC7, 0x06, 0x80, 0x09, 0x0A, 0x95, 0xD9, 0x69, 0xED, 0x3C, 0x6C, 0xEB, 0x62, 0x28, 0xE6, 0x4E, 0xF4, 0xFA, 0x9B, 0x5C, 0x36, 0x07, 0xE0, 0x25, 0x20, 0xB8, 0xF4, 0x1F, 0x2E, 0x78, 0x21, 0xEE, 0xFA, 0x9E, 0x80, 0x14, 0xAD, 0xAD, 0x83, 0x39, 0x2E, 0xD0, 0xE9, 0x56, 0xE3, 0x88, 0x0C, 0xC4, 0xD7, 0xBE, 0xB1, 0xE4, 0xD0, 0x42, 0xE6, 0xED, 0xDC, 0x44, 0x65, 0x51, 0x1F, 0x95, 0x9A, 0xAA, 0xBF, 0x83, 0x7B, 0xD7, 0x14, 0x23, 0x18, 0x81, 0x91, 0x0A, 0x07, 0x97, 0x10, 0x6F, 0x3C, 0x16, 0xF2, 0xF0, 0x3E, 0xE1, 0x45, 0x40, 0xB0, 0x39, 0x98, 0x33, 0x55, 0xFF, 0x7E, 0x75, 0x31, 0xE0, 0x10, 0x16, 0x81, 0x36, 0x56, 0x86, 0x34, 0x1C, 0x61, 0x10, 0x25, 0xAE, 0x98, 0x6E, 0xBE, 0xC9, 0x47, 0xCD, 0x14, 0x1C, 0x52, 0x8C, 0x27, 0xEE, 0x28, 0xDA, 0x18, 0x96, 0x4D, 0x16, 0x6D, 0x17, 0x2E, 0x5B, 0x7E, 0x88, 0x70, 0xC8, 0x3D, 0x31, 0x34, 0xE5, 0xEA, 0x08, 0x40, 0x25, 0x7B, 0x03, 0x75, 0x47, 0xAD, 0x19, 0x02, 0x7E, 0xCC, 0xB6, 0x43, 0xD1, 0xC9, 0xB2, 0x95, 0x7F, 0x9F, 0x93, 0xC4, 0xD7, 0x33, 0x5A, 0x7E, 0xA4, 0x51, 0x58, 0xC5, 0xA7, 0x23, 0x25, 0xF8, 0xF4, 0xDE, 0xEF, 0x84, 0x72, 0x0E, 0x8D, 0xE7, 0x9E, 0x1E, 0x40, 0xB3, 0xA6, 0x58, 0x34, 0x4E, 0xB8, 0x56, 0x6B, 0xA1, 0x50, 0x2B, 0x1C, 0xF9, 0xA6, 0x88, 0x21, 0x34, 0x79, 0x99, 0x5F, 0x24, 0xD6, 0x96, 0x67, 0xB5, 0x7E, 0x9C, 0xD2, 0xFB, 0x11, 0x40, 0xA6, 0xE6, 0x20, 0xD2, 0x8C, 0x38, 0x62, 0x9B, 0xC1, 0xD7, 0x57, 0x42, 0xE0, 0xD7, 0x34, 0xF3, 0x90, 0xF9, 0x60, 0xDD, 0xEA, 0x24, 0x67, 0x6A, 0xC0, 0xC7, 0xEF, 0xA7, 0x1B, 0xDC, 0xAD, 0x3D, 0x0D, 0x17, 0x90, 0x66, 0x70, 0xB2, 0x98, 0x24, 0x1B, 0x58, 0x79, 0xAC, 0x3E, 0x61, 0x9C, 0x67, 0xB4, 0xEE, 0x09, 0x06, 0x20, 0xCE, 0x39, 0x03, 0x57, 0xD4, 0xB5, 0x44, 0x3C, 0x35, 0x80, 0xDD, 0xEF, 0xC3, 0xC5, 0xC4, 0x93, 0x79, 0xF8, 0x84, 0x60, 0x31, 0x27, 0xB7, 0xF8, 0xEB, 0x63, 0xE8, 0x75, 0x74, 0x31, 0x29, 0xF4, 0xE7, 0x06, 0x51, 0x74, 0x72, 0x71, 0x9D, 0xA1, 0x3F, 0x3C, 0x73, 0xCF, 0x07, 0xA9, 0x98, 0x23, 0x1F, 0x62, 0x9C, 0x9E, 0x27, 0xFD, 0x1E, 0xC8, 0x1C, 0xB9, 0xBD, 0x16, 0xB5, 0x4C, 0x1A, 0xC2, 0x8D, 0xCF, 0x4D, 0xB8, 0xC2, 0x4D, 0x94, 0xE6, 0x12, 0x6D, 0x14, 0xFA, 0x2B, 0xF4, 0x4A, 0x2B, 0xD9, 0x7D, 0xEF, 0xF8, 0x81, 0x2C, 0xF7, 0x7B, 0x98, 0x44, 0x12, 0x58, 0xD5, 0x82, 0xAA, 0xED, 0x49, 0x40, 0x87, 0xBA, 0x11, 0x29, 0x7E, 0xFD, 0x04, 0x67, 0x20, 0x5D, 0x2B, 0x79, 0x42, 0x07, 0x03, 0x5C, 0x36, 0xD7, 0xBE, 0x72, 0xCA, 0x13, 0xCF, 0x93, 0x2D, 0xD8, 0xA9, 0xEE, 0x06, 0x0B, 0xCF, 0x5A, 0x46, 0x88, 0x57, 0x9E, 0x18, 0x92, 0x3B, 0x5F, 0x2F, 0x86, 0xCD, 0x3D, 0x49, 0xF6, 0xA3, 0x05, 0xE6, 0xE4, 0x68, 0xA4, 0x79, 0xA6, 0xEE, 0x85, 0xF4, 0x2B, 0xF6, 0x6E, 0x1B, 0x7A, 0xBD, 0x77, 0xEA, 0x6A, 0xC9, 0x31, 0x34, 0x8E, 0x5F, 0xC2, 0xF3, 0x87, 0x3D, 0x8F, 0xD7, 0xB0, 0x16, 0x28, 0x3F, 0x2C, 0x87, 0xA0, 0xA3, 0x56, 0xE8, 0x21, 0x83, 0x53, 0xCB, 0xE9, 0x1D, 0x28, 0x57, 0x93, 0xDB, 0x5B, 0xE9, 0xF0, 0x7B, 0x7F, 0xF4, 0x6A, 0x51, 0x48, 0xFC, 0xAB, 0xF5, 0x3B, 0x44, 0xA7, 0x5E, 0x67, 0x3A, 0x6B, 0x43, 0x9C, 0xD1, 0x03, 0xDF, 0xF8, 0xD5, 0x7F, 0x7B, 0x09, 0x62, 0xBF, 0x28, 0xBD, 0xC6, 0x3E, 0xC3, 0x6C, 0x91, 0x01, 0x45, 0x3F, 0xE2, 0x1F, 0xEF, 0x2A, 0x8F, 0xB2, 0x1B, 0x72, 0x35, 0x4D, 0x18, 0x6F, 0x4D, 0x57, 0xBF, 0x6A, 0x69, 0x02, 0x69, 0x4A, 0xE5, 0x5F, 0x74, 0xF7, 0x69, 0x5B, 0x89, 0x08, 0xCE, 0xCE, 0x15, 0x56, 0x3F, 0x21, 0x1A, 0xB8, 0xEC, 0x4D, 0xB0, 0x7E, 0x0F, 0x89, 0xB0, 0x5C, 0x6D, 0xDB, 0x53, 0x9E, 0xA9, 0x27, 0x28, 0x52, 0xE5, 0x9E, 0x1F, 0xEF, 0x84, 0x1A, 0x9A, 0xAE, 0x86, 0x8B, 0x25, 0x3B, 0xC6, 0x3B, 0x8E, 0x9C, 0x32, 0xD9, 0x89, 0x3B, 0xA2, 0xCB, 0x59, 0x35, 0xC3, 0x71, 0xEE, 0x22, 0x0C, 0x61, 0xEA, 0x59, 0x33, 0x25, 0x39, 0xAF, 0xF0, 0x12, 0x81, 0x55, 0x4A, 0x9D, 0x0C, 0x3E, 0x5E, 0x34, 0x9F, 0xA7, 0xD8, 0xC5, 0xB5, 0x0A, 0xC3, 0xA2, 0x00, 0x3F, 0x59, 0x3D, 0x07, 0x5F, 0x2B, 0xC1, 0x6F, 0x6A, 0xE3, 0x94, 0x90, 0xAF, 0x81, 0x11, 0x82, 0x89, 0xF4, 0x9D, 0x8B, 0x05, 0xE2, 0x7C, 0x22, 0x02, 0xEC, 0x00, 0x38, 0x39, 0xED, 0x04, 0xB2, 0xC9, 0xD8, 0xA1, 0x1B, 0xED, 0xB9, 0xE1, 0x62, 0x82, 0xC4, 0xCC, 0xA0, 0x61, 0xEE, 0x7A, 0x17, 0xA0, 0x99, 0xAC, 0xAC, 0x85, 0xA7, 0x5F, 0xC9, 0xC3, 0xC5, 0x63, 0x8F, 0x5A, 0xE7, 0x41, 0xAC, 0xB7, 0x89, 0x13, 0x38, 0xD8, 0x58, 0xBF, 0x71, 0xA5, 0x4F, 0x9D, 0x4C, 0x72, 0x57, 0x88, 0x2E, 0xAB, 0xD4, 0x74, 0xDE, 0x46, 0x9F, 0xF4, 0xBA, 0xB1, 0x55, 0x6A, 0x18, 0xF4, 0x87, 0xB9, 0x24, 0xA7, 0xD9, 0xF4, 0x9A, 0x3C, 0xEF, 0xF4, 0xA2, 0x2D, 0x0F, 0xC9, 0xE4, 0x45, 0xC2, 0xC9, 0x6F, 0x2D, 0xB6, 0xDA, 0xE6, 0x89, 0x38, 0x80, 0x2A, 0x89, 0xE2, 0xF5, 0x3D, 0x77, 0x5E, 0x61, 0x6E, 0x9C, 0xF9, 0x87, 0x89, 0xD4, 0x70, 0x23, 0x79, 0x93, 0xDA, 0xCE, 0x62, 0x89, 0xEB, 0x13, 0x77, 0xB0, 0x49, 0xB2, 0xF9, 0xFC, 0x84, 0xD3, 0x06, 0xD2, 0x8D, 0x5A, 0x94, 0x64, 0xC1, 0xA8, 0x9A, 0x60, 0x57, 0x8A, 0x8F, 0x62, 0x4A, 0x78, 0x12, 0x6B, 0x87, 0x6F, 0x6D, 0xC8, 0x32, 0xF3, 0xC6, 0x8D, 0xDB, 0x3A, 0x67, 0x95, 0xCD, 0xAF, 0x48, 0x28, 0x79, 0xC2, 0xB6, 0xDB, 0xD8, 0xFE, 0x82, 0x15, 0xE6, 0xE4, 0xEC, 0x79, 0xE2, 0xB4, 0x21, 0x5C, 0x30, 0x45, 0xD7, 0x3B, 0xA0, 0x1A, 0x3B, 0xAA, 0x3D, 0x6C, 0x1C, 0xC3, 0x1E, 0xDE, 0x4D, 0x75, 0x1D, 0x9A, 0x96, 0x51, 0xF9, 0x4F, 0x10, 0x28, 0x7E, 0x88, 0xEE, 0x3B, 0x93, 0x4A, 0x0B, 0x09, 0x44, 0x9C, 0x20, 0x34, 0xF6, 0xEE, 0x6F, 0x26, 0xB9, 0x4C, 0x76, 0xCC, 0xE1, 0x6F, 0x09, 0x91, 0xAF, 0x48, 0x8C, 0xC4, 0x31, 0xA2, 0xF9, 0x44, 0x77, 0x19, 0xA7, 0x00, 0x33, 0x77, 0x31, 0xF2, 0xF5, 0xF7, 0x30, 0xDF, 0xAB, 0xFE, 0x7E, 0xE6, 0x83, 0xE1, 0xC9, 0x2A, 0xC8, 0xE0, 0xA6, 0xAC, 0x5A, 0x28, 0x7F, 0xC4, 0x0B, 0xEB, 0x55, 0xD9, 0x5D, 0xBD, 0xB5, 0xD2, 0xF6, 0xB4, 0xA9, 0x76, 0x2B, 0x35, 0x10, 0x36, 0x3B, 0xCC, 0x61, 0x6C, 0x79, 0xCE, 0xC3, 0x9A, 0x02, 0x9A, 0x00, 0xBA, 0x43, 0x20, 0x3F, 0x26, 0x36, 0x66, 0x07, 0x11, 0x68, 0x51, 0x47, 0xBE, 0x78, 0xED, 0x4A, 0xFA, 0xBC, 0xDA, 0xCD, 0xFD, 0x02, 0xDB, 0xD1, 0x8B, 0xE0, 0xBD, 0x13, 0xFE, 0xED, 0x26, 0x77, 0xE4, 0x83, 0xAE, 0xB7, 0xAB, 0xFD, 0x2A, 0x5E, 0xA3, 0x28, 0xFD, 0x90, 0x40, 0x3D, 0x34, 0xF7, 0xF8, 0x35, 0x80, 0xF6, 0x6F, 0xA0, 0xE9, 0xCD, 0x9A, 0x54, 0x6F, 0x41, 0xA5, 0xC7, 0xED, 0xEA, 0xDC, 0x52, 0x23, 0xF1, 0x96, 0x19, 0x8E, 0x2B, 0x94, 0x3F, 0xD9, 0x27, 0x60, 0x1E, 0x27, 0xC1, 0x39, 0x68, 0x78, 0x7B, 0x47, 0x8F, 0xCC, 0xCD, 0xBE, 0xE4, 0xBD, 0x0B, 0x73, 0x03, 0xFB, 0xFE, 0xC0, 0x50, 0x38, 0x70, 0xDF, 0x81, 0x5D, 0x22, 0x4C, 0x5B, 0xCB, 0x27, 0x5D, 0xD2, 0x94, 0x64, 0x0A, 0x88, 0x67, 0x31, 0xE9, 0x08, 0xF0, 0x88, 0x20, 0xF2, 0x86, 0xCA, 0xBD, 0x18, 0x5F, 0x34, 0xD0, 0x96, 0x0D, 0x4A, 0x62, 0x4D, 0xBE, 0xE8, 0xA6, 0x04, 0xA6, 0x69, 0xCE, 0xCD, 0xE9, 0x5A, 0x1D, 0xD2, 0xF8, 0xCF, 0x19, 0x06, 0x17, 0x05, 0x82, 0x6B, 0x60, 0x3E, 0x5E, 0x6B, 0x1D, 0x1E, 0x13, 0x51, 0x5D, 0xFE, 0x95, 0x38, 0x33, 0x62, 0x9B, 0xBF, 0xD5, 0x3E, 0x3B, 0x8B, 0xD2, 0x6F, 0x24, 0x6D, 0x24, 0xC9, 0x0D, 0x2D, 0x52, 0xBF, 0xDA, 0xCE, 0x5E, 0xFE, 0x9D, 0xB8, 0x5D, 0x61, 0x57, 0xBC, 0x8C, 0x7A, 0x17, 0x75, 0x80, 0xEE, 0x52, 0x2F, 0xF5, 0x25, 0x48, 0x3A, 0x9E, 0x27, 0xF4, 0xEB, 0xE1, 0x01, 0xE4, 0xA7, 0x48, 0x93, 0xAA, 0x92, 0x68, 0xC0, 0x3B, 0x1A, 0x5A, 0xC5, 0x6D, 0xD0, 0x91, 0xB9, 0x8D, 0x44, 0xD4, 0xE1, 0x9C, 0x74, 0xEA, 0x14, 0xFA, 0xF6, 0x1E, 0x01, 0xC0, 0x89, 0x24, 0x90, 0x71, 0xAF, 0xF5, 0x2D, 0x6C, 0x35, 0x13, 0xA6, 0x73, 0x14, 0xAC, 0xE5, 0xAE, 0x88, 0x2F, 0x9D, 0x77, 0x3B, 0x8F, 0x61, 0xB1, 0x47, 0x66, 0x72, 0x14, 0x91, 0x40, 0xD7, 0x50, 0xDC, 0xEA, 0xFF, 0x49, 0x9E, 0x17, 0x75, 0x25, 0x49, 0x7C, 0x57, 0x41, 0xA7, 0x8C, 0x4D, 0x3B, 0x94, 0x9D, 0x65, 0x83, 0x62, 0x6F, 0x16, 0xBF, 0x0C, 0x87, 0x03, 0x61, 0xB4, 0x3B, 0x60, 0x6D, 0x07, 0x56, 0xB8, 0x1F, 0x89, 0xAD, 0x00, 0x25, 0x10, 0x4A, 0x34, 0x4C, 0x9A, 0x26, 0xDA, 0x06, 0x25, 0x9C, 0x91, 0xA6, 0xA5, 0xAD, 0x4D, 0x6E, 0xE9, 0x2F, 0x18, 0xC4, 0x1D, 0x09, 0xE1, 0xAA, 0x66, 0x01, 0x31, 0x6D, 0x12, 0x30, 0xED, 0x97, 0x3F, 0x67, 0xCE, 0x4E, 0x26, 0x0B, 0xF5, 0x5E, 0x81, 0xA7, 0x1F, 0x83, 0x68, 0x91, 0xC3, 0xD0, 0x4C, 0x2E, 0xD4, 0xDE, 0xEF, 0x34, 0xF9, 0x61, 0x83, 0x6F, 0xD6, 0x6E, 0x40, 0x87, 0x48, 0x7E, 0xCF, 0x56, 0x42, 0x21, 0xBA, 0x40, 0x64, 0x17, 0xFA, 0x97, 0xFF, 0x8D, 0xC8, 0x32, 0xFA, 0xB7, 0x45, 0xB0, 0xEC, 0xBD, 0x0E, 0x51, 0x63, 0x90, 0x05, 0x68, 0x7A, 0x45, 0x86, 0x68, 0x2A, 0x0E, 0x81, 0x5F, 0xDD, 0x12, 0xAD, 0x48, 0xF6, 0x87, 0x2E, 0x8D, 0xF6, 0x86, 0xC3, 0x6D, 0x69, 0xD5, 0x4E, 0x52, 0x8A, 0x8E, 0xE8, 0x01, 0x56, 0x11, 0xCC, 0x2E, 0x3F, 0xB5, 0x46, 0x1D, 0xF6, 0x6E, 0x4A, 0xEE, 0x1C, 0x60, 0x15, 0x85, 0xF6, 0x40, 0xFD, 0x56, 0xDC, 0x10, 0x01, 0xC3, 0xBD, 0xAE, 0x5A, 0x13, 0x1F, 0x15, 0x16, 0x10, 0x92, 0xC5, 0x02, 0xC2, 0x81, 0xB5, 0x6A, 0x4D, 0x37, 0x29, 0x40, 0x8B, 0xAA, 0x5F, 0xC9, 0x4C, 0x26, 0x7B, 0x2C, 0x21, 0x9E, 0xE2, 0xF2, 0x5A, 0x20, 0x88, 0x3F, 0x40, 0x30, 0xC5, 0x64, 0x0E,
};
static const uint8_t mldsa87kPublicKey[] = {0x72, 0x3F, 0x63, 0x70, 0x8C, 0x4E, 0x70, 0x06, 0xB0, 0x1F, 0x11, 0x50, 0xBD, 0x7E, 0x80, 0x93, 0x78, 0xB5, 0xFF, 0x7C, 0x06, 0x8A, 0x67, 0x24, 0x42, 0xBB, 0x30, 0xF1, 0xA7, 0xE2, 0xE3, 0x1D, 0x3B, 0x19, 0x2C, 0x2D, 0x81, 0xB3, 0x5B, 0xEB, 0x31, 0x44, 0x00, 0xCD, 0x06, 0xBA, 0x5B, 0x0F, 0x24, 0x43, 0x2B, 0xCE, 0x1B, 0x9E, 0xDA, 0xF7, 0x7F, 0x4B, 0x44, 0x8B, 0x0E, 0x62, 0xA6, 0x07, 0x08, 0x12, 0xD5, 0x44, 0x2F, 0x0F, 0x7F, 0x2B, 0x1C, 0xB2, 0x05, 0xA0, 0x7C, 0x13, 0x65, 0xBB, 0xCC, 0x41, 0x6B, 0x8E, 0x84, 0xDD, 0x07, 0xC8, 0x13, 0x5F, 0xD8, 0xE9, 0x98, 0xD5, 0x33, 0xAC, 0x2A, 0x7D, 0x52, 0x64, 0xDF, 0x6B, 0xE7, 0x26, 0xDD, 0x8A, 0xF7, 0x1B, 0xE7, 0xED, 0x70, 0x6B, 0x5C, 0x1A, 0x30, 0xF1, 0xF0, 0xEB, 0x26, 0x8D, 0x3E, 0xB0, 0x85, 0xE6, 0x28, 0x02, 0x08, 0xF9, 0xA6, 0x42, 0xD3, 0xF1, 0xFB, 0x50, 0x59, 0xDA, 0x11, 0xE7, 0x42, 0x26, 0x34, 0xDB, 0x4B, 0x57, 0xD9, 0x7C, 0xE0, 0x78, 0x4F, 0x3F, 0x34, 0xD7, 0x23, 0x32, 0xB1, 0x12, 0x6E, 0x1B, 0xF7, 0x1D, 0x85, 0x39, 0x75, 0xED, 0xA3, 0x2A, 0x82, 0x35, 0x13, 0x6B, 0x61, 0xCB, 0x73, 0x2F, 0x44, 0x70, 0x96, 0x27, 0x47, 0xF4, 0x8E, 0x2D, 0xBC, 0x12, 0x9A, 0xFF, 0x2E, 0xFB, 0xD1, 0xC5, 0x17, 0x23, 0xC7, 0x1E, 0x32, 0x82, 0xFF, 0x9C, 0xAE, 0x64, 0x6F, 0xC2, 0xAF, 0x81, 0xFD, 0x0E, 0x81, 0xC4, 0xEA, 0xFD, 0x75, 0xCD, 0xD0, 0x9F, 0x2A, 0x97, 0x03, 0xEE, 0x74, 0xF9, 0x64, 0x8C, 0x3B, 0xD1, 0x5C, 0x81, 0xAE, 0x6B, 0xF8, 0xEB, 0x0C, 0x84, 0x01, 0x2D, 0x7C, 0x4E, 0x94, 0x31, 0xA6, 0x38, 0xFE, 0xBD, 0x36, 0x5C, 0x6E, 0x91, 0x9C, 0xAE, 0x4B, 0x6C, 0x97, 0xE5, 0xF3, 0x31, 0xBD, 0x40, 0xD3, 0xB2, 0x58, 0x18, 0xEC, 0x64, 0x37, 0x0A, 0xC8, 0x42, 0x49, 0x80, 0xE9, 0x75, 0xF0, 0x13, 0x17, 0x1A, 0xE2, 0x51, 0x52, 0x43, 0x25, 0x72, 0xEE, 0x79, 0x08, 0xEB, 0xDA, 0xFD, 0xDA, 0xEB, 0x82, 0xE2, 0xC5, 0x5D, 0x75, 0x4A, 0x5F, 0xF1, 0x42, 0xCC, 0x27, 0x6F, 0x74, 0x91, 0x1B, 0x39, 0xE8, 0x3E, 0x05, 0xE8, 0x65, 0x71, 0x74, 0xE4, 0x8F, 0x53, 0x6F, 0x31, 0x91, 0x23, 0xD2, 0x06, 0xC9, 0x32, 0x0E, 0xB3, 0xFA, 0x8B, 0x38, 0xD2, 0x9E, 0x74, 0x8E, 0xCF, 0x3C, 0xE8, 0xE7, 0xDB, 0xEC, 0xEA, 0x51, 0x24, 0x3D, 0xCA, 0x5C, 0x5A, 0xC2, 0x64, 0xEF, 0x9B, 0x9C, 0xBA, 0x88, 0x2E, 0x02, 0x43, 0x84, 0xB4, 0x4D, 0x11, 0x7E, 0x52, 0xC2, 0xA5, 0xAE, 0x29, 0xA1, 0xF8, 0x2C, 0x75, 0x83, 0xE0, 0x59, 0xCB, 0xFB, 0xE7, 0xB3, 0x88, 0x8D, 0xC9, 0x60, 0xCB, 0xDE, 0x74, 0x78, 0x12, 0xC0, 0x50, 0xB4, 0xA4, 0xD2, 0x45, 0x11, 0x84, 0x98, 0x26, 0xB7, 0x2A, 0xC3, 0x4B, 0xE4, 0xFE, 0x3D, 0x22, 0xDB, 0xE4, 0x75, 0xA4, 0x0A, 0xDB, 0xBA, 0xC6, 0x79, 0xF1, 0xBE, 0xB8, 0x17, 0x6E, 0xB4, 0x0A, 0xE7, 0x35, 0xD8, 0xC8, 0x74, 0x52, 0xF1, 0xD2, 0x35, 0xEF, 0xEA, 0xA6, 0x1C, 0xE6, 0xED, 0xCB, 0xAF, 0x72, 0x5E, 0x26, 0x6C, 0xCB, 0x73, 0x88, 0xCA, 0x5F, 0xA2, 0x79, 0xE0, 0xC6, 0x9E, 0x93, 0xF4, 0x0E, 0x68, 0x39, 0xE2, 0x30, 0x1A, 0x82, 0x98, 0xAF, 0x0F, 0x9C, 0xB7, 0x2E, 0x8D, 0xE4, 0x5E, 0xBF, 0xAD, 0x5B, 0x47, 0xAB, 0x42, 0xBC, 0xFB, 0x19, 0x14, 0xAF, 0x05, 0x7D, 0x23, 0x6D, 0x12, 0x8B, 0xA2, 0x9F, 0xD9, 0x1A, 0x60, 0x10, 0xB0, 0xF7, 0xF2, 0x97, 0x48, 0xCD, 0x1D, 0x67, 0x62, 0x86, 0xFA, 0x9B, 0x78, 0xA7, 0x42, 0x2F, 0x70, 0x37, 0xBB, 0x75, 0x74, 0x5F, 0xF4, 0xDE, 0xC9, 0xF6, 0x24, 0x96, 0x3E, 0xE3, 0x07, 0xC7, 0x17, 0xB6, 0x36, 0xE3, 0x09, 0x5F, 0xFC, 0x55, 0x16, 0xDD, 0xA0, 0xD8, 0x4D, 0xF5, 0x43, 0x25, 0xA2, 0x70, 0x0C, 0xD6, 0xBD, 0xC8, 0x9A, 0xD9, 0x4B, 0xCF, 0xD5, 0x1A, 0xF1, 0xB8, 0x66, 0x07, 0x92, 0x53, 0xB8, 0x15, 0x2D, 0xD8, 0xE8, 0x98, 0x25, 0xDB, 0x05, 0xF5, 0x4E, 0x1D, 0xE0, 0x98, 0xA7, 0xAE, 0xA4, 0xE5, 0x23, 0xDD, 0xD1, 0x60, 0x58, 0x86, 0x6C, 0xDC, 0xCE, 0x19, 0x55, 0x34, 0x61, 0x1B, 0x42, 0xDC, 0x87, 0xDF, 0x3A, 0x50, 0x15, 0x02, 0x79, 0x10, 0x14, 0x88, 0xC0, 0x42, 0xD2, 0x55, 0xDA, 0x6E, 0xFB, 0x2F, 0xA2, 0x85, 0xC5, 0x3A, 0x10, 0x6B, 0x82, 0xDC, 0x5C, 0x0B, 0x5D, 0xBC, 0xA9, 0x80, 0x50, 0x00, 0x4B, 0xE6, 0x85, 0xDA, 0x5C, 0x81, 0x2F, 0x8E, 0xA8, 0x69, 0x79, 0x73, 0x18, 0x91, 0x85, 0x34, 0xFE, 0xE0, 0x2E, 0xDB, 0x66, 0x56, 0x97, 0xDA, 0x07, 0xC7, 0x4D, 0xB5, 0xEA, 0xC3, 0xDB, 0x87, 0xC9, 0xE3, 0xF1, 0x83, 0x6F, 0x82, 0xB7, 0x2F, 0x71, 0x7D, 0x70, 0xD1, 0x7F, 0xDB, 0xA9, 0x1A, 0x04, 0xCB, 0xE7, 0x85, 0x77, 0x0B, 0xFE, 0x13, 0xB8, 0xB5, 0x2C, 0x65, 0xC5, 0x5E, 0xFD, 0x2F, 0x83, 0x8F, 0x39, 0xF7, 0x46, 0x2B, 0x2E, 0x29, 0x28, 0x66, 0xB8, 0x6D, 0xCB, 0x8B, 0xD4, 0xA3, 0xD7, 0x77, 0xF6, 0xF0, 0xBC, 0xBE, 0x46, 0xFF, 0xB5, 0xED, 0xCE, 0xD3, 0x19, 0x23, 0x4E, 0xCE, 0x4F, 0xCC, 0xBD, 0x8B, 0x8F, 0x3E, 0x75, 0xCE, 0x4D, 0x97, 0x7F, 0xD1, 0x38, 0x90, 0x43, 0x87, 0xEE, 0x20, 0x37, 0x8C, 0xF6, 0x2F, 0x40, 0x47, 0x39, 0x1F, 0x47, 0x78, 0x7B, 0x17, 0x3D, 0x7B, 0x50, 0x32, 0xE9, 0xC3, 0x3E, 0x3C, 0xAB, 0x71, 0xDE, 0xA7, 0x0E, 0x06, 0x58, 0xD1, 0xB7, 0x30, 0x04, 0x14, 0xD1, 0x4A, 0x22, 0x77, 0x44, 0x97, 0x86, 0x09, 0xAB, 0xC0, 0x85, 0xFB, 0x5F, 0x89, 0x17, 0x5F, 0xA8, 0x73, 0x0B, 0x54, 0x4E, 0xDB, 0x97, 0x89, 0xFD, 0x7B, 0x76, 0x10, 0x16, 0x11, 0x7E, 0x29, 0x31, 0xDB, 0xF1, 0x79, 0xAF, 0xD2, 0xEA, 0xE6, 0x36, 0x8A, 0x3B, 0x4A, 0x07, 0xFF, 0x5F, 0x89, 0xD8, 0xDE, 0xC8, 0x28, 0xA3, 0xA1, 0x78, 0xD4, 0xAE, 0xEF, 0x3F, 0x6B, 0xDE, 0x4E, 0x71, 0x6B, 0x89, 0x34, 0xA0, 0xF1, 0xA6, 0x70, 0x7B, 0xE6, 0xD4, 0xFA, 0x3A, 0x72, 0x4E, 0x0D, 0x1A, 0x92, 0x8A, 0xE8, 0x29, 0xF6, 0x11, 0xA3, 0x7B, 0xE1, 0xB5, 0x51, 0x14, 0xD1, 0x72, 0xCB, 0xFE, 0x63, 0x8D, 0xB6, 0x1A, 0xA5, 0x3B, 0xB6, 0x77, 0xBF, 0x5D, 0x57, 0x36, 0x68, 0xD4, 0x96, 0x97, 0xB8, 0x3F, 0xFB, 0xCA, 0x62, 0x3F, 0x95, 0xC6, 0x7B, 0xDE, 0x40, 0x6C, 0xAB, 0x24, 0xFF, 0xD1, 0xF5, 0xDC, 0x93, 0xE4, 0x3C, 0x34, 0xD3, 0x27, 0xA1, 0xCE, 0x54, 0x44, 0x06, 0x74, 0x8B, 0xF6, 0x0E, 0x43, 0x5B, 0x58, 0xD5, 0xF2, 0x36, 0x12, 0xB3, 0xFE, 0x1C, 0xAD, 0xA3, 0xB4, 0xE9, 0x65, 0xEF, 0xAE, 0x47, 0xD7, 0x77, 0x22, 0x4B, 0xB4, 0xE2, 0xED, 0x60, 0xF9, 0x9B, 0xD4, 0xBC, 0xAD, 0x8D, 0x4C, 0xFA, 0x3B, 0x67, 0x11, 0x05, 0xE1, 0x9E, 0xC1, 0xD6, 0x93, 0x27, 0xC3, 0xBF, 0xBB, 0xFA, 0x76, 0x1D, 0x02, 0x0F, 0x6F, 0x58, 0x90, 0x00, 0xF7, 0xC4, 0xEC, 0x3F, 0x9A, 0x0C, 0x50, 0x0A, 0xAE, 0xCF, 0x0F, 0x44, 0xC6, 0xDF, 0xAB, 0x60, 0x01, 0xB5, 0xEF, 0x93, 0xF7, 0x27, 0x66, 0xA9, 0xE0, 0x8A, 0x2D, 0x1A, 0xCF, 0x85, 0x85, 0xFD, 0xBB, 0xD0, 0xE2, 0xC3, 0x49, 0xC6, 0x8C, 0xCA, 0xB5, 0x30, 0x36, 0x25, 0x68, 0xF4, 0x5D, 0x0A, 0x52, 0x9D, 0xED, 0xE0, 0x99, 0xF5, 0x91, 0x25, 0x61, 0x4A, 0xBF, 0x53, 0xE6, 0x12, 0xC0, 0x4B, 0x1A, 0x09, 0x91, 0xD8, 0xEC, 0x72, 0xEC, 0xDA, 0x89, 0xE3, 0xCA, 0x02, 0x7C, 0x8D, 0xF9, 0xCE, 0xF0, 0x4B, 0x99, 0x61, 0x39, 0x38, 0x60, 0xCD, 0x3F, 0xF1, 0xA2, 0x4F, 0xA4, 0x89, 0x57, 0xC3, 0xA5, 0x8B, 0xBF, 0x2C, 0xCA, 0x98, 0xE8, 0xA5, 0x8C, 0x69, 0x51, 0x59, 0x7E, 0x86, 0x3C, 0x4F, 0xB2, 0xC7, 0xA1, 0xC8, 0x41, 0xC1, 0x48, 0xEA, 0x28, 0xBB, 0x6E, 0x78, 0x51, 0x71, 0xEF, 0x8C, 0x0D, 0x10, 0xD6, 0x41, 0x5A, 0x7B, 0xD9, 0xD9, 0x0D, 0x8F, 0xF9, 0xB2, 0x97, 0xB4, 0xAD, 0x2E, 0xE0, 0xBF, 0x83, 0x16, 0x89, 0x65, 0x04, 0xF5, 0x4E, 0x6A, 0xD5, 0x52, 0xC2, 0x87, 0x58, 0x04, 0x4D, 0x42, 0xAC, 0xF4, 0x86, 0xA3, 0xF1, 0x13, 0x2B, 0x5A, 0x43, 0xD0, 0xED, 0xFF, 0xE7, 0xF3, 0x2F, 0x86, 0xEF, 0x34, 0xB2, 0xDF, 0xA0, 0xB6, 0x3E, 0xE8, 0x86, 0x80, 0x2C, 0xDC, 0x6B, 0x91, 0x60, 0x17, 0x73, 0x0B, 0x5E, 0xCA, 0x8B, 0x22, 0x8F, 0x33, 0x47, 0x78, 0x2F, 0x49, 0xF8, 0xAA, 0x5C, 0x8F, 0xEE, 0xF0, 0xF8, 0xB9, 0xB2, 0xCC, 0x1B, 0x5C, 0xE4, 0xD2, 0xB8, 0xFD, 0xE8, 0x52, 0x10, 0x22, 0xC1, 0x3F, 0xCF, 0x7E, 0x8A, 0x6C, 0x11, 0x1F, 0xAA, 0x98, 0x62, 0x68, 0x69, 0x1C, 0x0D, 0x75, 0x7C, 0xA6, 0x47, 0xC6, 0x6E, 0xBD, 0xF1, 0xB5, 0x47, 0x67, 0x2D, 0xAD, 0xC1, 0x7D, 0x4E, 0x82, 0xE2, 0x96, 0xDA, 0x80, 0x7F, 0xC2, 0x9E, 0xBB, 0x3A, 0x49, 0x00, 0x0A, 0x9B, 0xC6, 0x6F, 0xFD, 0x30, 0x05, 0xDC, 0x02, 0xBA, 0x64, 0x86, 0x26, 0x4B, 0xE8, 0xE5, 0xEB, 0x4A, 0x47, 0x1C, 0x84, 0x57, 0xD0, 0x40, 0x0D, 0x3B, 0x64, 0x12, 0xC8, 0x1C, 0xB5, 0x35, 0x7F, 0xF7, 0xC4, 0xD9, 0x8F, 0x76, 0xBE, 0x8C, 0x83, 0x41, 0xEF, 0xD5, 0xD0, 0x13, 0xA8, 0xFD, 0xB1, 0x8F, 0x8F, 0x2E, 0xAF, 0x5E, 0xDB, 0x29, 0x46, 0x6A, 0x60, 0xBA, 0xC0, 0x63, 0xD8, 0x4F, 0x8B, 0xDB, 0x28, 0x02, 0x12, 0x80, 0xD1, 0x18, 0xE8, 0x66, 0x1B, 0x37, 0x5B, 0x2D, 0x8F, 0x23, 0x7C, 0xCB, 0xF2, 0x7D, 0xC0, 0xB6, 0x68, 0xDD, 0x04, 0x3E, 0x80, 0x21, 0x92, 0xFB, 0xFF, 0x8E, 0x18, 0x60, 0xEC, 0x2A, 0x1C, 0x7B, 0x75, 0x6D, 0xC9, 0xAC, 0x4C, 0x8E, 0xED, 0x56, 0xBE, 0x00, 0xE6, 0x29, 0x3F, 0x38, 0xBA, 0x33, 0xA6, 0x2B, 0x21, 0xB6, 0xC3, 0xA9, 0xE3, 0xA7, 0xE6, 0xD3, 0xBE, 0x56, 0x18, 0x46, 0xB5, 0x89, 0xFE, 0x2B, 0x82, 0x25, 0xB9, 0x55, 0xCD, 0xEE, 0x04, 0x4E, 0x95, 0x5C, 0x63, 0x4B, 0xFD, 0xDF, 0x2F, 0x71, 0x18, 0x40, 0xB8, 0x8A, 0xDE, 0xD8, 0x7E, 0x23, 0xD1, 0xCB, 0x71, 0x12, 0x83, 0x02, 0xE5, 0xED, 0x96, 0x97, 0x9A, 0x44, 0xBC, 0x34, 0xB0, 0x11, 0x75, 0xEB, 0xC7, 0x30, 0x28, 0x53, 0x0E, 0xAE, 0x94, 0x10, 0x15, 0xA9, 0x49, 0x31, 0x69, 0xB9, 0x2A, 0xC2, 0x6E, 0x5F, 0x5F, 0xEC, 0xAA, 0x3E, 0x5B, 0xB1, 0xCE, 0x7D, 0x15, 0xEB, 0xB4, 0xF7, 0xE3, 0x54, 0x11, 0x69, 0xA4, 0xD3, 0x44, 0xD0, 0xF1, 0x6B, 0x07, 0xE8, 0xB2, 0x36, 0xD3, 0xE5, 0x51, 0x76, 0x76, 0x27, 0xAF, 0xFD, 0xE4, 0xAA, 0x23, 0xBD, 0x19, 0xAC, 0x89, 0xF7, 0xD5, 0x5F, 0xBE, 0xEE, 0x3C, 0x83, 0x85, 0x91, 0xBD, 0xC1, 0xD8, 0xA2, 0x0A, 0x71, 0x05, 0x12, 0x96, 0x3C, 0xD4, 0x40, 0x6A, 0x79, 0x88, 0x8A, 0x55, 0x83, 0x67, 0x65, 0x5D, 0xAC, 0xA3, 0xDD, 0x07, 0x9E, 0x83, 0xB8, 0x40, 0x08, 0xB5, 0xA7, 0xB1, 0x76, 0xAD, 0x57, 0x1B, 0xB5, 0x08, 0x13, 0xDF, 0x52, 0xBE, 0xF5, 0x2C, 0xCE, 0x50, 0x58, 0x1A, 0xBF, 0x4E, 0xC3, 0xED, 0x12, 0x38, 0xBF, 0xA5, 0xA5, 0x04, 0x47, 0xDA, 0x5F, 0x96, 0x78, 0x30, 0x24, 0x24, 0x96, 0x61, 0x46, 0x4D, 0x73, 0x8D, 0x44, 0xB4, 0x54, 0x25, 0x14, 0xD7, 0xF7, 0x22, 0xF5, 0x1B, 0x1F, 0x36, 0x17, 0xDA, 0x68, 0xF3, 0x43, 0x36, 0x06, 0x79, 0x47, 0x80, 0x87, 0x3F, 0xEA, 0x3D, 0x31, 0x1D, 0x1F, 0x10, 0xB3, 0xAA, 0xAE, 0x97, 0x23, 0x44, 0x8C, 0xCE, 0xB8, 0x03, 0xE0, 0xDD, 0xD8, 0x28, 0x19, 0x1C, 0x1E, 0x6A, 0x75, 0x1D, 0xF3, 0xEA, 0x32, 0xF7, 0xC0, 0xC7, 0x85, 0x48, 0xA5, 0x7A, 0x3D, 0x3A, 0x69, 0xBB, 0xA0, 0xD4, 0x8C, 0x38, 0xE2, 0x61, 0xF8, 0x28, 0xE5, 0x77, 0x5D, 0x4B, 0x5C, 0x07, 0x21, 0x4A, 0x2E, 0xE9, 0x12, 0x54, 0xC8, 0x9D, 0xA5, 0x47, 0x9F, 0x97, 0x2E, 0x1B, 0x47, 0x23, 0x50, 0x6E, 0xE9, 0x57, 0x7A, 0xB7, 0x7C, 0x25, 0xE2, 0x15, 0x8D, 0xB4, 0x65, 0xC2, 0x67, 0x1A, 0xC9, 0x3B, 0x97, 0x7C, 0x4D, 0x94, 0x4E, 0x7F, 0x52, 0x65, 0xF2, 0xF3, 0x52, 0x91, 0x61, 0x3A, 0x67, 0x66, 0xCB, 0xEE, 0xB7, 0x8D, 0x04, 0x95, 0xF8, 0xDE, 0xDB, 0x33, 0xCE, 0x3F, 0x05, 0x2F, 0xB8, 0xF8, 0x83, 0xD0, 0xB4, 0xF4, 0x42, 0x6E, 0xF7, 0xA9, 0x1F, 0x5A, 0x9F, 0x89, 0x0E, 0xC8, 0x31, 0x6F, 0x66, 0x65, 0xF9, 0xF6, 0x25, 0x30, 0x3E, 0x6F, 0xCA, 0x33, 0xEC, 0xD9, 0xF4, 0x49, 0x5A, 0x8E, 0x46, 0xC3, 0xE0, 0x13, 0x1D, 0x27, 0x7F, 0xFE, 0xD9, 0xD4, 0x20, 0x1B, 0xDC, 0x40, 0x53, 0xB1, 0x42, 0x18, 0x0F, 0x97, 0x9C, 0xE0, 0xD6, 0x5E, 0x66, 0xB1, 0x8E, 0xD7, 0x91, 0x5F, 0x6F, 0x50, 0x7C, 0x75, 0x43, 0xA6, 0x8E, 0x59, 0x1F, 0x63, 0xF9, 0x20, 0x1F, 0xCE, 0x89, 0x67, 0x9A, 0x33, 0x72, 0xED, 0xEC, 0x57, 0xAB, 0x07, 0x9C, 0x86, 0xA5, 0x89, 0x8B, 0x93, 0x66, 0x0B, 0xF4, 0x72, 0x18, 0xA8, 0x21, 0x63, 0x56, 0x89, 0xB4, 0x93, 0x3F, 0x95, 0x0D, 0x4B, 0xF9, 0xAD, 0xEB, 0xD3, 0x69, 0xED, 0xA5, 0x0C, 0xFB, 0x2C, 0x21, 0x33, 0xCD, 0x88, 0x89, 0x39, 0x2B, 0x5E, 0xEA, 0xB6, 0xE0, 0x4A, 0xF4, 0x77, 0x2F, 0xD5, 0xFA, 0xF9, 0x01, 0xC8, 0x55, 0xC6, 0x56, 0x6E, 0x00, 0x73, 0xAD, 0xC9, 0xF9, 0xB5, 0xAF, 0xF2, 0x2F, 0xDA, 0xED, 0x11, 0x86, 0xA1, 0x97, 0x46, 0xAF, 0x66, 0x5B, 0xC6, 0x4B, 0xEA, 0x84, 0x53, 0x41, 0x89, 0x24, 0x98, 0x22, 0x61, 0xE8, 0xD9, 0x55, 0x26, 0x77, 0xA0, 0x74, 0x3B, 0x18, 0x2C, 0xE9, 0x82, 0x23, 0x16, 0x28, 0x9B, 0x2F, 0xF0, 0x63, 0xC9, 0x2F, 0xCC, 0x01, 0x51, 0xBD, 0x50, 0x09, 0x7A, 0x3E, 0xA5, 0x76, 0xCF, 0x10, 0x25, 0xF1, 0x74, 0x2E, 0x72, 0x8A, 0x63, 0xEB, 0x33, 0xBE, 0xBF, 0xDB, 0x36, 0x45, 0xC7, 0x16, 0x1B, 0x8B, 0x4E, 0x26, 0x49, 0x9D, 0xF5, 0x53, 0x42, 0x85, 0x5E, 0xE3, 0xDB, 0x08, 0xC2, 0xA4, 0x34, 0x8B, 0xB5, 0x62, 0x42, 0x83, 0xA3, 0x78, 0xDF, 0x50, 0x23, 0x38, 0x97, 0x5B, 0x24, 0x83, 0x07, 0x17, 0x4F, 0xEC, 0x56, 0x2D, 0x02, 0xB6, 0x1C, 0x2D, 0xE2, 0xFE, 0x70, 0x2C, 0x68, 0x28, 0x1F, 0xD6, 0x56, 0x16, 0x39, 0x69, 0x12, 0xFA, 0x9C, 0x82, 0x22, 0xD5, 0xC7, 0x0E, 0xDD, 0x10, 0xD8, 0x08, 0xBC, 0x36, 0x45, 0x92, 0xDC, 0x57, 0x5B, 0xA2, 0xA3, 0x25, 0x83, 0x8B, 0x87, 0x5F, 0x4A, 0xD7, 0xA3, 0x4F, 0x53, 0x1A, 0xD3, 0xC5, 0x4B, 0x02, 0xAF, 0xB9, 0x50, 0x34, 0x2C, 0x5D, 0x01, 0x54, 0x20, 0xF1, 0x19, 0x70, 0x44, 0x88, 0xFC, 0x79, 0xA9, 0x6E, 0x4D, 0xC9, 0x17, 0x14, 0x4A, 0xF6, 0xDB, 0xE0, 0xED, 0x61, 0xDA, 0xBE, 0xBD, 0xA7, 0xC1, 0x97, 0x11, 0xB5, 0xE4, 0x19, 0x8E, 0x88, 0x8A, 0xFB, 0x30, 0x55, 0x69, 0x2D, 0xD9, 0xB3, 0x6B, 0x3C, 0x68, 0xCF, 0x91, 0x22, 0xA6, 0x49, 0x5A, 0xE4, 0xEA, 0x06, 0x6C, 0x12, 0x72, 0x16, 0xAE, 0xD8, 0xB1, 0x5F, 0x0E, 0x52, 0x90, 0xE4, 0xCA, 0x7D, 0x08, 0xD7, 0x00, 0xCB, 0x67, 0x80, 0xA4, 0xEE, 0x6C, 0x00, 0x75, 0xEE, 0x7C, 0xD5, 0xEA, 0x5C, 0xBF, 0x85, 0x0A, 0x91, 0xDD, 0xE9, 0x40, 0x00, 0xD3, 0xFB, 0x2D, 0x70, 0xD0, 0x5E, 0x54, 0xC6, 0x2C, 0x71, 0x64, 0x60, 0x41, 0xB9, 0xB8, 0x5C, 0xFC, 0x38, 0xE8, 0x35, 0xA4, 0x36, 0x26, 0x1F, 0x1D, 0x26, 0xBD, 0x92, 0x73, 0x41, 0x56, 0x91, 0x68, 0xF4, 0xD9, 0xD4, 0x68, 0xD8, 0xAD, 0x0B, 0xA7, 0x85, 0x23, 0x68, 0xE7, 0x40, 0x47, 0x71, 0x9F, 0x08, 0xBE, 0x21, 0xED, 0xE8, 0x5E, 0x84, 0xA7, 0x14, 0x7A, 0xE5, 0x7C, 0xC3, 0x56, 0x63, 0x57, 0x71, 0x68, 0xB2, 0xFC, 0x98, 0x7F, 0xBC, 0x7A, 0x01, 0x96, 0x05, 0x54, 0xB6, 0xB4, 0x41, 0xE1, 0xA4, 0x7B, 0xAA, 0xB5, 0xF7, 0x14, 0x14, 0xF3, 0x9F, 0x4E, 0xFB, 0xC2, 0x3D, 0x7D, 0x66, 0xA5, 0x65, 0x66, 0xA2, 0x25, 0x27, 0x65, 0x19, 0x27, 0x4F, 0x1A, 0xE2, 0x76, 0xB9, 0x1D, 0x5E, 0x83, 0x99, 0x7A, 0xF0, 0x77, 0x8D, 0x09, 0xF5, 0x00, 0xE8, 0xC1, 0x8B, 0x84, 0x1F, 0x0D, 0x9E, 0xA4, 0xA7, 0x1E, 0x53, 0xBF, 0x97, 0x0E, 0x81, 0xCF, 0x03, 0x01, 0xD4, 0x52, 0x2E, 0x08, 0x84, 0x55, 0xE7, 0x9F, 0x43, 0x99, 0x55, 0xF3, 0x2B, 0xB9, 0xF5, 0x9F, 0x12, 0xF1, 0x4A, 0x07, 0xB8, 0x5C, 0xD4, 0x11, 0x88, 0xA4, 0xF0, 0xA3, 0x65, 0xF1, 0x52, 0xD3, 0x55, 0x7A, 0x40, 0xCA, 0x53, 0x5B, 0xA6, 0xA2, 0xC7, 0x17, 0x98, 0x3D, 0x4A, 0xCB, 0x22, 0x62, 0x43, 0xCC, 0x32, 0x76, 0xE2, 0x16, 0xFC, 0xC4, 0x61, 0x3F, 0x51, 0xEA, 0xFF, 0x9B, 0xC5, 0x11, 0x04, 0x69, 0x6E, 0x1D, 0x5F, 0xD1, 0x49, 0xA3, 0x9E, 0xCD, 0xFC, 0x08, 0x8A, 0xA8, 0xCA, 0x38, 0x4F, 0x5C, 0x31, 0x8C, 0x04, 0xFB, 0xEB, 0x9E, 0x2E, 0x0C, 0x96, 0x9D, 0x68, 0x6D, 0xAC, 0x44, 0xA4, 0x0E, 0x11, 0xFB, 0xD5, 0x95, 0xAC, 0x25, 0x4C, 0xC4, 0x81, 0x4B, 0xFE, 0xBD, 0x88, 0x21, 0x3D, 0xCD, 0xE3, 0x17, 0xBB, 0xAC, 0xD0, 0x7E, 0x7C, 0xBE, 0x75, 0x24, 0x7C, 0xC6, 0x3B, 0xE4, 0xC2, 0xD9, 0x03, 0xA8, 0x16, 0x47, 0x1D, 0x8E, 0x5F, 0xB7, 0x16, 0xCA, 0xAD, 0xD8, 0x89, 0x05, 0x33, 0x57, 0x6B, 0x37, 0xC8, 0x9D, 0x6B, 0x97, 0x42, 0x9D, 0x93, 0x18, 0xC4, 0x6D, 0x5A, 0x85, 0x4F, 0x60, 0x72, 0x5B, 0x27, 0x61, 0x04, 0xDB, 0x6D, 0x56, 0xCC, 0x70, 0xF7, 0x04, 0x1F, 0x98, 0xB1, 0x57, 0xB2, 0x58, 0x53, 0x4A, 0xF7, 0x9C, 0x14, 0x52, 0x41, 0xD1, 0xE6, 0xD0, 0x7E, 0x08, 0x44, 0x53, 0xA0, 0xE1, 0xE5, 0xFD, 0x2E, 0xF5, 0x54, 0xE9, 0xFA, 0xAB, 0xAD, 0xC9, 0x5C, 0x54, 0x94, 0x7D, 0x06, 0xB9, 0xBE, 0x4E, 0x35, 0x33, 0x8C, 0x4E, 0xEE, 0x46, 0xC6, 0x22, 0xC0, 0x9E, 0x95, 0xF5, 0x20, 0xD5, 0x1A, 0x76, 0x72, 0xC5, 0x27, 0xED, 0x44, 0x65, 0xE7, 0x5C, 0x21, 0x09, 0x93, 0xAB, 0xFB, 0xF8, 0x80, 0x92, 0x41, 0x21, 0xD7, 0xF6, 0xDF, 0x76, 0x0C, 0x21, 0x15, 0x10, 0xDD, 0x0B, 0x3A, 0x5D, 0x84, 0x36, 0x3F, 0x75, 0x1F, 0xE9, 0x18, 0x3E, 0x84, 0x19, 0x13, 0xD8, 0x67, 0xDA, 0xA7, 0x57, 0xFB, 0xDA, 0x5B, 0x5D, 0x4B, 0xC7, 0x85, 0xD5, 0x6A, 0x49, 0x4D, 0x98, 0xD5, 0x8B, 0xCA, 0xAA, 0xD5, 0xD5, 0x96, 0xC1, 0x42, 0x32, 0x58, 0xB6, 0x86, 0x0D, 0xD5, 0xAF, 0x7B, 0xE6, 0x74, 0xA1, 0x0D, 0x95, 0x92, 0x80, 0x7A, 0x4E, 0x4D, 0x9C, 0x2A, 0xD5, 0x77, 0xF0, 0xCF, 0xC4, 0x1A, 0x2E, 0x5F, 0xBD, 0x63, 0xE0, 0xAC, 0xFC, 0xB0, 0xFD, 0x48, 0x42, 0xBE, 0x1C, 0x3F, 0xF6, 0xC8, 0x8A, 0x35, 0xBD,
};
static const uint8_t mldsa87kPublicKeySPKI[] = {0x30, 0x82, 0x0A, 0x31, 0x30, 0x0A, 0x06, 0x08, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x03, 0x03, 0x82, 0x0A, 0x21, 0x00, 0x72, 0x3F, 0x63, 0x70, 0x8C, 0x4E, 0x70, 0x06, 0xB0, 0x1F, 0x11, 0x50, 0xBD, 0x7E, 0x80, 0x93, 0x78, 0xB5, 0xFF, 0x7C, 0x06, 0x8A, 0x67, 0x24, 0x42, 0xBB, 0x30, 0xF1, 0xA7, 0xE2, 0xE3, 0x1D, 0x3B, 0x19, 0x2C, 0x2D, 0x81, 0xB3, 0x5B, 0xEB, 0x31, 0x44, 0x00, 0xCD, 0x06, 0xBA, 0x5B, 0x0F, 0x24, 0x43, 0x2B, 0xCE, 0x1B, 0x9E, 0xDA, 0xF7, 0x7F, 0x4B, 0x44, 0x8B, 0x0E, 0x62, 0xA6, 0x07, 0x08, 0x12, 0xD5, 0x44, 0x2F, 0x0F, 0x7F, 0x2B, 0x1C, 0xB2, 0x05, 0xA0, 0x7C, 0x13, 0x65, 0xBB, 0xCC, 0x41, 0x6B, 0x8E, 0x84, 0xDD, 0x07, 0xC8, 0x13, 0x5F, 0xD8, 0xE9, 0x98, 0xD5, 0x33, 0xAC, 0x2A, 0x7D, 0x52, 0x64, 0xDF, 0x6B, 0xE7, 0x26, 0xDD, 0x8A, 0xF7, 0x1B, 0xE7, 0xED, 0x70, 0x6B, 0x5C, 0x1A, 0x30, 0xF1, 0xF0, 0xEB, 0x26, 0x8D, 0x3E, 0xB0, 0x85, 0xE6, 0x28, 0x02, 0x08, 0xF9, 0xA6, 0x42, 0xD3, 0xF1, 0xFB, 0x50, 0x59, 0xDA, 0x11, 0xE7, 0x42, 0x26, 0x34, 0xDB, 0x4B, 0x57, 0xD9, 0x7C, 0xE0, 0x78, 0x4F, 0x3F, 0x34, 0xD7, 0x23, 0x32, 0xB1, 0x12, 0x6E, 0x1B, 0xF7, 0x1D, 0x85, 0x39, 0x75, 0xED, 0xA3, 0x2A, 0x82, 0x35, 0x13, 0x6B, 0x61, 0xCB, 0x73, 0x2F, 0x44, 0x70, 0x96, 0x27, 0x47, 0xF4, 0x8E, 0x2D, 0xBC, 0x12, 0x9A, 0xFF, 0x2E, 0xFB, 0xD1, 0xC5, 0x17, 0x23, 0xC7, 0x1E, 0x32, 0x82, 0xFF, 0x9C, 0xAE, 0x64, 0x6F, 0xC2, 0xAF, 0x81, 0xFD, 0x0E, 0x81, 0xC4, 0xEA, 0xFD, 0x75, 0xCD, 0xD0, 0x9F, 0x2A, 0x97, 0x03, 0xEE, 0x74, 0xF9, 0x64, 0x8C, 0x3B, 0xD1, 0x5C, 0x81, 0xAE, 0x6B, 0xF8, 0xEB, 0x0C, 0x84, 0x01, 0x2D, 0x7C, 0x4E, 0x94, 0x31, 0xA6, 0x38, 0xFE, 0xBD, 0x36, 0x5C, 0x6E, 0x91, 0x9C, 0xAE, 0x4B, 0x6C, 0x97, 0xE5, 0xF3, 0x31, 0xBD, 0x40, 0xD3, 0xB2, 0x58, 0x18, 0xEC, 0x64, 0x37, 0x0A, 0xC8, 0x42, 0x49, 0x80, 0xE9, 0x75, 0xF0, 0x13, 0x17, 0x1A, 0xE2, 0x51, 0x52, 0x43, 0x25, 0x72, 0xEE, 0x79, 0x08, 0xEB, 0xDA, 0xFD, 0xDA, 0xEB, 0x82, 0xE2, 0xC5, 0x5D, 0x75, 0x4A, 0x5F, 0xF1, 0x42, 0xCC, 0x27, 0x6F, 0x74, 0x91, 0x1B, 0x39, 0xE8, 0x3E, 0x05, 0xE8, 0x65, 0x71, 0x74, 0xE4, 0x8F, 0x53, 0x6F, 0x31, 0x91, 0x23, 0xD2, 0x06, 0xC9, 0x32, 0x0E, 0xB3, 0xFA, 0x8B, 0x38, 0xD2, 0x9E, 0x74, 0x8E, 0xCF, 0x3C, 0xE8, 0xE7, 0xDB, 0xEC, 0xEA, 0x51, 0x24, 0x3D, 0xCA, 0x5C, 0x5A, 0xC2, 0x64, 0xEF, 0x9B, 0x9C, 0xBA, 0x88, 0x2E, 0x02, 0x43, 0x84, 0xB4, 0x4D, 0x11, 0x7E, 0x52, 0xC2, 0xA5, 0xAE, 0x29, 0xA1, 0xF8, 0x2C, 0x75, 0x83, 0xE0, 0x59, 0xCB, 0xFB, 0xE7, 0xB3, 0x88, 0x8D, 0xC9, 0x60, 0xCB, 0xDE, 0x74, 0x78, 0x12, 0xC0, 0x50, 0xB4, 0xA4, 0xD2, 0x45, 0x11, 0x84, 0x98, 0x26, 0xB7, 0x2A, 0xC3, 0x4B, 0xE4, 0xFE, 0x3D, 0x22, 0xDB, 0xE4, 0x75, 0xA4, 0x0A, 0xDB, 0xBA, 0xC6, 0x79, 0xF1, 0xBE, 0xB8, 0x17, 0x6E, 0xB4, 0x0A, 0xE7, 0x35, 0xD8, 0xC8, 0x74, 0x52, 0xF1, 0xD2, 0x35, 0xEF, 0xEA, 0xA6, 0x1C, 0xE6, 0xED, 0xCB, 0xAF, 0x72, 0x5E, 0x26, 0x6C, 0xCB, 0x73, 0x88, 0xCA, 0x5F, 0xA2, 0x79, 0xE0, 0xC6, 0x9E, 0x93, 0xF4, 0x0E, 0x68, 0x39, 0xE2, 0x30, 0x1A, 0x82, 0x98, 0xAF, 0x0F, 0x9C, 0xB7, 0x2E, 0x8D, 0xE4, 0x5E, 0xBF, 0xAD, 0x5B, 0x47, 0xAB, 0x42, 0xBC, 0xFB, 0x19, 0x14, 0xAF, 0x05, 0x7D, 0x23, 0x6D, 0x12, 0x8B, 0xA2, 0x9F, 0xD9, 0x1A, 0x60, 0x10, 0xB0, 0xF7, 0xF2, 0x97, 0x48, 0xCD, 0x1D, 0x67, 0x62, 0x86, 0xFA, 0x9B, 0x78, 0xA7, 0x42, 0x2F, 0x70, 0x37, 0xBB, 0x75, 0x74, 0x5F, 0xF4, 0xDE, 0xC9, 0xF6, 0x24, 0x96, 0x3E, 0xE3, 0x07, 0xC7, 0x17, 0xB6, 0x36, 0xE3, 0x09, 0x5F, 0xFC, 0x55, 0x16, 0xDD, 0xA0, 0xD8, 0x4D, 0xF5, 0x43, 0x25, 0xA2, 0x70, 0x0C, 0xD6, 0xBD, 0xC8, 0x9A, 0xD9, 0x4B, 0xCF, 0xD5, 0x1A, 0xF1, 0xB8, 0x66, 0x07, 0x92, 0x53, 0xB8, 0x15, 0x2D, 0xD8, 0xE8, 0x98, 0x25, 0xDB, 0x05, 0xF5, 0x4E, 0x1D, 0xE0, 0x98, 0xA7, 0xAE, 0xA4, 0xE5, 0x23, 0xDD, 0xD1, 0x60, 0x58, 0x86, 0x6C, 0xDC, 0xCE, 0x19, 0x55, 0x34, 0x61, 0x1B, 0x42, 0xDC, 0x87, 0xDF, 0x3A, 0x50, 0x15, 0x02, 0x79, 0x10, 0x14, 0x88, 0xC0, 0x42, 0xD2, 0x55, 0xDA, 0x6E, 0xFB, 0x2F, 0xA2, 0x85, 0xC5, 0x3A, 0x10, 0x6B, 0x82, 0xDC, 0x5C, 0x0B, 0x5D, 0xBC, 0xA9, 0x80, 0x50, 0x00, 0x4B, 0xE6, 0x85, 0xDA, 0x5C, 0x81, 0x2F, 0x8E, 0xA8, 0x69, 0x79, 0x73, 0x18, 0x91, 0x85, 0x34, 0xFE, 0xE0, 0x2E, 0xDB, 0x66, 0x56, 0x97, 0xDA, 0x07, 0xC7, 0x4D, 0xB5, 0xEA, 0xC3, 0xDB, 0x87, 0xC9, 0xE3, 0xF1, 0x83, 0x6F, 0x82, 0xB7, 0x2F, 0x71, 0x7D, 0x70, 0xD1, 0x7F, 0xDB, 0xA9, 0x1A, 0x04, 0xCB, 0xE7, 0x85, 0x77, 0x0B, 0xFE, 0x13, 0xB8, 0xB5, 0x2C, 0x65, 0xC5, 0x5E, 0xFD, 0x2F, 0x83, 0x8F, 0x39, 0xF7, 0x46, 0x2B, 0x2E, 0x29, 0x28, 0x66, 0xB8, 0x6D, 0xCB, 0x8B, 0xD4, 0xA3, 0xD7, 0x77, 0xF6, 0xF0, 0xBC, 0xBE, 0x46, 0xFF, 0xB5, 0xED, 0xCE, 0xD3, 0x19, 0x23, 0x4E, 0xCE, 0x4F, 0xCC, 0xBD, 0x8B, 0x8F, 0x3E, 0x75, 0xCE, 0x4D, 0x97, 0x7F, 0xD1, 0x38, 0x90, 0x43, 0x87, 0xEE, 0x20, 0x37, 0x8C, 0xF6, 0x2F, 0x40, 0x47, 0x39, 0x1F, 0x47, 0x78, 0x7B, 0x17, 0x3D, 0x7B, 0x50, 0x32, 0xE9, 0xC3, 0x3E, 0x3C, 0xAB, 0x71, 0xDE, 0xA7, 0x0E, 0x06, 0x58, 0xD1, 0xB7, 0x30, 0x04, 0x14, 0xD1, 0x4A, 0x22, 0x77, 0x44, 0x97, 0x86, 0x09, 0xAB, 0xC0, 0x85, 0xFB, 0x5F, 0x89, 0x17, 0x5F, 0xA8, 0x73, 0x0B, 0x54, 0x4E, 0xDB, 0x97, 0x89, 0xFD, 0x7B, 0x76, 0x10, 0x16, 0x11, 0x7E, 0x29, 0x31, 0xDB, 0xF1, 0x79, 0xAF, 0xD2, 0xEA, 0xE6, 0x36, 0x8A, 0x3B, 0x4A, 0x07, 0xFF, 0x5F, 0x89, 0xD8, 0xDE, 0xC8, 0x28, 0xA3, 0xA1, 0x78, 0xD4, 0xAE, 0xEF, 0x3F, 0x6B, 0xDE, 0x4E, 0x71, 0x6B, 0x89, 0x34, 0xA0, 0xF1, 0xA6, 0x70, 0x7B, 0xE6, 0xD4, 0xFA, 0x3A, 0x72, 0x4E, 0x0D, 0x1A, 0x92, 0x8A, 0xE8, 0x29, 0xF6, 0x11, 0xA3, 0x7B, 0xE1, 0xB5, 0x51, 0x14, 0xD1, 0x72, 0xCB, 0xFE, 0x63, 0x8D, 0xB6, 0x1A, 0xA5, 0x3B, 0xB6, 0x77, 0xBF, 0x5D, 0x57, 0x36, 0x68, 0xD4, 0x96, 0x97, 0xB8, 0x3F, 0xFB, 0xCA, 0x62, 0x3F, 0x95, 0xC6, 0x7B, 0xDE, 0x40, 0x6C, 0xAB, 0x24, 0xFF, 0xD1, 0xF5, 0xDC, 0x93, 0xE4, 0x3C, 0x34, 0xD3, 0x27, 0xA1, 0xCE, 0x54, 0x44, 0x06, 0x74, 0x8B, 0xF6, 0x0E, 0x43, 0x5B, 0x58, 0xD5, 0xF2, 0x36, 0x12, 0xB3, 0xFE, 0x1C, 0xAD, 0xA3, 0xB4, 0xE9, 0x65, 0xEF, 0xAE, 0x47, 0xD7, 0x77, 0x22, 0x4B, 0xB4, 0xE2, 0xED, 0x60, 0xF9, 0x9B, 0xD4, 0xBC, 0xAD, 0x8D, 0x4C, 0xFA, 0x3B, 0x67, 0x11, 0x05, 0xE1, 0x9E, 0xC1, 0xD6, 0x93, 0x27, 0xC3, 0xBF, 0xBB, 0xFA, 0x76, 0x1D, 0x02, 0x0F, 0x6F, 0x58, 0x90, 0x00, 0xF7, 0xC4, 0xEC, 0x3F, 0x9A, 0x0C, 0x50, 0x0A, 0xAE, 0xCF, 0x0F, 0x44, 0xC6, 0xDF, 0xAB, 0x60, 0x01, 0xB5, 0xEF, 0x93, 0xF7, 0x27, 0x66, 0xA9, 0xE0, 0x8A, 0x2D, 0x1A, 0xCF, 0x85, 0x85, 0xFD, 0xBB, 0xD0, 0xE2, 0xC3, 0x49, 0xC6, 0x8C, 0xCA, 0xB5, 0x30, 0x36, 0x25, 0x68, 0xF4, 0x5D, 0x0A, 0x52, 0x9D, 0xED, 0xE0, 0x99, 0xF5, 0x91, 0x25, 0x61, 0x4A, 0xBF, 0x53, 0xE6, 0x12, 0xC0, 0x4B, 0x1A, 0x09, 0x91, 0xD8, 0xEC, 0x72, 0xEC, 0xDA, 0x89, 0xE3, 0xCA, 0x02, 0x7C, 0x8D, 0xF9, 0xCE, 0xF0, 0x4B, 0x99, 0x61, 0x39, 0x38, 0x60, 0xCD, 0x3F, 0xF1, 0xA2, 0x4F, 0xA4, 0x89, 0x57, 0xC3, 0xA5, 0x8B, 0xBF, 0x2C, 0xCA, 0x98, 0xE8, 0xA5, 0x8C, 0x69, 0x51, 0x59, 0x7E, 0x86, 0x3C, 0x4F, 0xB2, 0xC7, 0xA1, 0xC8, 0x41, 0xC1, 0x48, 0xEA, 0x28, 0xBB, 0x6E, 0x78, 0x51, 0x71, 0xEF, 0x8C, 0x0D, 0x10, 0xD6, 0x41, 0x5A, 0x7B, 0xD9, 0xD9, 0x0D, 0x8F, 0xF9, 0xB2, 0x97, 0xB4, 0xAD, 0x2E, 0xE0, 0xBF, 0x83, 0x16, 0x89, 0x65, 0x04, 0xF5, 0x4E, 0x6A, 0xD5, 0x52, 0xC2, 0x87, 0x58, 0x04, 0x4D, 0x42, 0xAC, 0xF4, 0x86, 0xA3, 0xF1, 0x13, 0x2B, 0x5A, 0x43, 0xD0, 0xED, 0xFF, 0xE7, 0xF3, 0x2F, 0x86, 0xEF, 0x34, 0xB2, 0xDF, 0xA0, 0xB6, 0x3E, 0xE8, 0x86, 0x80, 0x2C, 0xDC, 0x6B, 0x91, 0x60, 0x17, 0x73, 0x0B, 0x5E, 0xCA, 0x8B, 0x22, 0x8F, 0x33, 0x47, 0x78, 0x2F, 0x49, 0xF8, 0xAA, 0x5C, 0x8F, 0xEE, 0xF0, 0xF8, 0xB9, 0xB2, 0xCC, 0x1B, 0x5C, 0xE4, 0xD2, 0xB8, 0xFD, 0xE8, 0x52, 0x10, 0x22, 0xC1, 0x3F, 0xCF, 0x7E, 0x8A, 0x6C, 0x11, 0x1F, 0xAA, 0x98, 0x62, 0x68, 0x69, 0x1C, 0x0D, 0x75, 0x7C, 0xA6, 0x47, 0xC6, 0x6E, 0xBD, 0xF1, 0xB5, 0x47, 0x67, 0x2D, 0xAD, 0xC1, 0x7D, 0x4E, 0x82, 0xE2, 0x96, 0xDA, 0x80, 0x7F, 0xC2, 0x9E, 0xBB, 0x3A, 0x49, 0x00, 0x0A, 0x9B, 0xC6, 0x6F, 0xFD, 0x30, 0x05, 0xDC, 0x02, 0xBA, 0x64, 0x86, 0x26, 0x4B, 0xE8, 0xE5, 0xEB, 0x4A, 0x47, 0x1C, 0x84, 0x57, 0xD0, 0x40, 0x0D, 0x3B, 0x64, 0x12, 0xC8, 0x1C, 0xB5, 0x35, 0x7F, 0xF7, 0xC4, 0xD9, 0x8F, 0x76, 0xBE, 0x8C, 0x83, 0x41, 0xEF, 0xD5, 0xD0, 0x13, 0xA8, 0xFD, 0xB1, 0x8F, 0x8F, 0x2E, 0xAF, 0x5E, 0xDB, 0x29, 0x46, 0x6A, 0x60, 0xBA, 0xC0, 0x63, 0xD8, 0x4F, 0x8B, 0xDB, 0x28, 0x02, 0x12, 0x80, 0xD1, 0x18, 0xE8, 0x66, 0x1B, 0x37, 0x5B, 0x2D, 0x8F, 0x23, 0x7C, 0xCB, 0xF2, 0x7D, 0xC0, 0xB6, 0x68, 0xDD, 0x04, 0x3E, 0x80, 0x21, 0x92, 0xFB, 0xFF, 0x8E, 0x18, 0x60, 0xEC, 0x2A, 0x1C, 0x7B, 0x75, 0x6D, 0xC9, 0xAC, 0x4C, 0x8E, 0xED, 0x56, 0xBE, 0x00, 0xE6, 0x29, 0x3F, 0x38, 0xBA, 0x33, 0xA6, 0x2B, 0x21, 0xB6, 0xC3, 0xA9, 0xE3, 0xA7, 0xE6, 0xD3, 0xBE, 0x56, 0x18, 0x46, 0xB5, 0x89, 0xFE, 0x2B, 0x82, 0x25, 0xB9, 0x55, 0xCD, 0xEE, 0x04, 0x4E, 0x95, 0x5C, 0x63, 0x4B, 0xFD, 0xDF, 0x2F, 0x71, 0x18, 0x40, 0xB8, 0x8A, 0xDE, 0xD8, 0x7E, 0x23, 0xD1, 0xCB, 0x71, 0x12, 0x83, 0x02, 0xE5, 0xED, 0x96, 0x97, 0x9A, 0x44, 0xBC, 0x34, 0xB0, 0x11, 0x75, 0xEB, 0xC7, 0x30, 0x28, 0x53, 0x0E, 0xAE, 0x94, 0x10, 0x15, 0xA9, 0x49, 0x31, 0x69, 0xB9, 0x2A, 0xC2, 0x6E, 0x5F, 0x5F, 0xEC, 0xAA, 0x3E, 0x5B, 0xB1, 0xCE, 0x7D, 0x15, 0xEB, 0xB4, 0xF7, 0xE3, 0x54, 0x11, 0x69, 0xA4, 0xD3, 0x44, 0xD0, 0xF1, 0x6B, 0x07, 0xE8, 0xB2, 0x36, 0xD3, 0xE5, 0x51, 0x76, 0x76, 0x27, 0xAF, 0xFD, 0xE4, 0xAA, 0x23, 0xBD, 0x19, 0xAC, 0x89, 0xF7, 0xD5, 0x5F, 0xBE, 0xEE, 0x3C, 0x83, 0x85, 0x91, 0xBD, 0xC1, 0xD8, 0xA2, 0x0A, 0x71, 0x05, 0x12, 0x96, 0x3C, 0xD4, 0x40, 0x6A, 0x79, 0x88, 0x8A, 0x55, 0x83, 0x67, 0x65, 0x5D, 0xAC, 0xA3, 0xDD, 0x07, 0x9E, 0x83, 0xB8, 0x40, 0x08, 0xB5, 0xA7, 0xB1, 0x76, 0xAD, 0x57, 0x1B, 0xB5, 0x08, 0x13, 0xDF, 0x52, 0xBE, 0xF5, 0x2C, 0xCE, 0x50, 0x58, 0x1A, 0xBF, 0x4E, 0xC3, 0xED, 0x12, 0x38, 0xBF, 0xA5, 0xA5, 0x04, 0x47, 0xDA, 0x5F, 0x96, 0x78, 0x30, 0x24, 0x24, 0x96, 0x61, 0x46, 0x4D, 0x73, 0x8D, 0x44, 0xB4, 0x54, 0x25, 0x14, 0xD7, 0xF7, 0x22, 0xF5, 0x1B, 0x1F, 0x36, 0x17, 0xDA, 0x68, 0xF3, 0x43, 0x36, 0x06, 0x79, 0x47, 0x80, 0x87, 0x3F, 0xEA, 0x3D, 0x31, 0x1D, 0x1F, 0x10, 0xB3, 0xAA, 0xAE, 0x97, 0x23, 0x44, 0x8C, 0xCE, 0xB8, 0x03, 0xE0, 0xDD, 0xD8, 0x28, 0x19, 0x1C, 0x1E, 0x6A, 0x75, 0x1D, 0xF3, 0xEA, 0x32, 0xF7, 0xC0, 0xC7, 0x85, 0x48, 0xA5, 0x7A, 0x3D, 0x3A, 0x69, 0xBB, 0xA0, 0xD4, 0x8C, 0x38, 0xE2, 0x61, 0xF8, 0x28, 0xE5, 0x77, 0x5D, 0x4B, 0x5C, 0x07, 0x21, 0x4A, 0x2E, 0xE9, 0x12, 0x54, 0xC8, 0x9D, 0xA5, 0x47, 0x9F, 0x97, 0x2E, 0x1B, 0x47, 0x23, 0x50, 0x6E, 0xE9, 0x57, 0x7A, 0xB7, 0x7C, 0x25, 0xE2, 0x15, 0x8D, 0xB4, 0x65, 0xC2, 0x67, 0x1A, 0xC9, 0x3B, 0x97, 0x7C, 0x4D, 0x94, 0x4E, 0x7F, 0x52, 0x65, 0xF2, 0xF3, 0x52, 0x91, 0x61, 0x3A, 0x67, 0x66, 0xCB, 0xEE, 0xB7, 0x8D, 0x04, 0x95, 0xF8, 0xDE, 0xDB, 0x33, 0xCE, 0x3F, 0x05, 0x2F, 0xB8, 0xF8, 0x83, 0xD0, 0xB4, 0xF4, 0x42, 0x6E, 0xF7, 0xA9, 0x1F, 0x5A, 0x9F, 0x89, 0x0E, 0xC8, 0x31, 0x6F, 0x66, 0x65, 0xF9, 0xF6, 0x25, 0x30, 0x3E, 0x6F, 0xCA, 0x33, 0xEC, 0xD9, 0xF4, 0x49, 0x5A, 0x8E, 0x46, 0xC3, 0xE0, 0x13, 0x1D, 0x27, 0x7F, 0xFE, 0xD9, 0xD4, 0x20, 0x1B, 0xDC, 0x40, 0x53, 0xB1, 0x42, 0x18, 0x0F, 0x97, 0x9C, 0xE0, 0xD6, 0x5E, 0x66, 0xB1, 0x8E, 0xD7, 0x91, 0x5F, 0x6F, 0x50, 0x7C, 0x75, 0x43, 0xA6, 0x8E, 0x59, 0x1F, 0x63, 0xF9, 0x20, 0x1F, 0xCE, 0x89, 0x67, 0x9A, 0x33, 0x72, 0xED, 0xEC, 0x57, 0xAB, 0x07, 0x9C, 0x86, 0xA5, 0x89, 0x8B, 0x93, 0x66, 0x0B, 0xF4, 0x72, 0x18, 0xA8, 0x21, 0x63, 0x56, 0x89, 0xB4, 0x93, 0x3F, 0x95, 0x0D, 0x4B, 0xF9, 0xAD, 0xEB, 0xD3, 0x69, 0xED, 0xA5, 0x0C, 0xFB, 0x2C, 0x21, 0x33, 0xCD, 0x88, 0x89, 0x39, 0x2B, 0x5E, 0xEA, 0xB6, 0xE0, 0x4A, 0xF4, 0x77, 0x2F, 0xD5, 0xFA, 0xF9, 0x01, 0xC8, 0x55, 0xC6, 0x56, 0x6E, 0x00, 0x73, 0xAD, 0xC9, 0xF9, 0xB5, 0xAF, 0xF2, 0x2F, 0xDA, 0xED, 0x11, 0x86, 0xA1, 0x97, 0x46, 0xAF, 0x66, 0x5B, 0xC6, 0x4B, 0xEA, 0x84, 0x53, 0x41, 0x89, 0x24, 0x98, 0x22, 0x61, 0xE8, 0xD9, 0x55, 0x26, 0x77, 0xA0, 0x74, 0x3B, 0x18, 0x2C, 0xE9, 0x82, 0x23, 0x16, 0x28, 0x9B, 0x2F, 0xF0, 0x63, 0xC9, 0x2F, 0xCC, 0x01, 0x51, 0xBD, 0x50, 0x09, 0x7A, 0x3E, 0xA5, 0x76, 0xCF, 0x10, 0x25, 0xF1, 0x74, 0x2E, 0x72, 0x8A, 0x63, 0xEB, 0x33, 0xBE, 0xBF, 0xDB, 0x36, 0x45, 0xC7, 0x16, 0x1B, 0x8B, 0x4E, 0x26, 0x49, 0x9D, 0xF5, 0x53, 0x42, 0x85, 0x5E, 0xE3, 0xDB, 0x08, 0xC2, 0xA4, 0x34, 0x8B, 0xB5, 0x62, 0x42, 0x83, 0xA3, 0x78, 0xDF, 0x50, 0x23, 0x38, 0x97, 0x5B, 0x24, 0x83, 0x07, 0x17, 0x4F, 0xEC, 0x56, 0x2D, 0x02, 0xB6, 0x1C, 0x2D, 0xE2, 0xFE, 0x70, 0x2C, 0x68, 0x28, 0x1F, 0xD6, 0x56, 0x16, 0x39, 0x69, 0x12, 0xFA, 0x9C, 0x82, 0x22, 0xD5, 0xC7, 0x0E, 0xDD, 0x10, 0xD8, 0x08, 0xBC, 0x36, 0x45, 0x92, 0xDC, 0x57, 0x5B, 0xA2, 0xA3, 0x25, 0x83, 0x8B, 0x87, 0x5F, 0x4A, 0xD7, 0xA3, 0x4F, 0x53, 0x1A, 0xD3, 0xC5, 0x4B, 0x02, 0xAF, 0xB9, 0x50, 0x34, 0x2C, 0x5D, 0x01, 0x54, 0x20, 0xF1, 0x19, 0x70, 0x44, 0x88, 0xFC, 0x79, 0xA9, 0x6E, 0x4D, 0xC9, 0x17, 0x14, 0x4A, 0xF6, 0xDB, 0xE0, 0xED, 0x61, 0xDA, 0xBE, 0xBD, 0xA7, 0xC1, 0x97, 0x11, 0xB5, 0xE4, 0x19, 0x8E, 0x88, 0x8A, 0xFB, 0x30, 0x55, 0x69, 0x2D, 0xD9, 0xB3, 0x6B, 0x3C, 0x68, 0xCF, 0x91, 0x22, 0xA6, 0x49, 0x5A, 0xE4, 0xEA, 0x06, 0x6C, 0x12, 0x72, 0x16, 0xAE, 0xD8, 0xB1, 0x5F, 0x0E, 0x52, 0x90, 0xE4, 0xCA, 0x7D, 0x08, 0xD7, 0x00, 0xCB, 0x67, 0x80, 0xA4, 0xEE, 0x6C, 0x00, 0x75, 0xEE, 0x7C, 0xD5, 0xEA, 0x5C, 0xBF, 0x85, 0x0A, 0x91, 0xDD, 0xE9, 0x40, 0x00, 0xD3, 0xFB, 0x2D, 0x70, 0xD0, 0x5E, 0x54, 0xC6, 0x2C, 0x71, 0x64, 0x60, 0x41, 0xB9, 0xB8, 0x5C, 0xFC, 0x38, 0xE8, 0x35, 0xA4, 0x36, 0x26, 0x1F, 0x1D, 0x26, 0xBD, 0x92, 0x73, 0x41, 0x56, 0x91, 0x68, 0xF4, 0xD9, 0xD4, 0x68, 0xD8, 0xAD, 0x0B, 0xA7, 0x85, 0x23, 0x68, 0xE7, 0x40, 0x47, 0x71, 0x9F, 0x08, 0xBE, 0x21, 0xED, 0xE8, 0x5E, 0x84, 0xA7, 0x14, 0x7A, 0xE5, 0x7C, 0xC3, 0x56, 0x63, 0x57, 0x71, 0x68, 0xB2, 0xFC, 0x98, 0x7F, 0xBC, 0x7A, 0x01, 0x96, 0x05, 0x54, 0xB6, 0xB4, 0x41, 0xE1, 0xA4, 0x7B, 0xAA, 0xB5, 0xF7, 0x14, 0x14, 0xF3, 0x9F, 0x4E, 0xFB, 0xC2, 0x3D, 0x7D, 0x66, 0xA5, 0x65, 0x66, 0xA2, 0x25, 0x27, 0x65, 0x19, 0x27, 0x4F, 0x1A, 0xE2, 0x76, 0xB9, 0x1D, 0x5E, 0x83, 0x99, 0x7A, 0xF0, 0x77, 0x8D, 0x09, 0xF5, 0x00, 0xE8, 0xC1, 0x8B, 0x84, 0x1F, 0x0D, 0x9E, 0xA4, 0xA7, 0x1E, 0x53, 0xBF, 0x97, 0x0E, 0x81, 0xCF, 0x03, 0x01, 0xD4, 0x52, 0x2E, 0x08, 0x84, 0x55, 0xE7, 0x9F, 0x43, 0x99, 0x55, 0xF3, 0x2B, 0xB9, 0xF5, 0x9F, 0x12, 0xF1, 0x4A, 0x07, 0xB8, 0x5C, 0xD4, 0x11, 0x88, 0xA4, 0xF0, 0xA3, 0x65, 0xF1, 0x52, 0xD3, 0x55, 0x7A, 0x40, 0xCA, 0x53, 0x5B, 0xA6, 0xA2, 0xC7, 0x17, 0x98, 0x3D, 0x4A, 0xCB, 0x22, 0x62, 0x43, 0xCC, 0x32, 0x76, 0xE2, 0x16, 0xFC, 0xC4, 0x61, 0x3F, 0x51, 0xEA, 0xFF, 0x9B, 0xC5, 0x11, 0x04, 0x69, 0x6E, 0x1D, 0x5F, 0xD1, 0x49, 0xA3, 0x9E, 0xCD, 0xFC, 0x08, 0x8A, 0xA8, 0xCA, 0x38, 0x4F, 0x5C, 0x31, 0x8C, 0x04, 0xFB, 0xEB, 0x9E, 0x2E, 0x0C, 0x96, 0x9D, 0x68, 0x6D, 0xAC, 0x44, 0xA4, 0x0E, 0x11, 0xFB, 0xD5, 0x95, 0xAC, 0x25, 0x4C, 0xC4, 0x81, 0x4B, 0xFE, 0xBD, 0x88, 0x21, 0x3D, 0xCD, 0xE3, 0x17, 0xBB, 0xAC, 0xD0, 0x7E, 0x7C, 0xBE, 0x75, 0x24, 0x7C, 0xC6, 0x3B, 0xE4, 0xC2, 0xD9, 0x03, 0xA8, 0x16, 0x47, 0x1D, 0x8E, 0x5F, 0xB7, 0x16, 0xCA, 0xAD, 0xD8, 0x89, 0x05, 0x33, 0x57, 0x6B, 0x37, 0xC8, 0x9D, 0x6B, 0x97, 0x42, 0x9D, 0x93, 0x18, 0xC4, 0x6D, 0x5A, 0x85, 0x4F, 0x60, 0x72, 0x5B, 0x27, 0x61, 0x04, 0xDB, 0x6D, 0x56, 0xCC, 0x70, 0xF7, 0x04, 0x1F, 0x98, 0xB1, 0x57, 0xB2, 0x58, 0x53, 0x4A, 0xF7, 0x9C, 0x14, 0x52, 0x41, 0xD1, 0xE6, 0xD0, 0x7E, 0x08, 0x44, 0x53, 0xA0, 0xE1, 0xE5, 0xFD, 0x2E, 0xF5, 0x54, 0xE9, 0xFA, 0xAB, 0xAD, 0xC9, 0x5C, 0x54, 0x94, 0x7D, 0x06, 0xB9, 0xBE, 0x4E, 0x35, 0x33, 0x8C, 0x4E, 0xEE, 0x46, 0xC6, 0x22, 0xC0, 0x9E, 0x95, 0xF5, 0x20, 0xD5, 0x1A, 0x76, 0x72, 0xC5, 0x27, 0xED, 0x44, 0x65, 0xE7, 0x5C, 0x21, 0x09, 0x93, 0xAB, 0xFB, 0xF8, 0x80, 0x92, 0x41, 0x21, 0xD7, 0xF6, 0xDF, 0x76, 0x0C, 0x21, 0x15, 0x10, 0xDD, 0x0B, 0x3A, 0x5D, 0x84, 0x36, 0x3F, 0x75, 0x1F, 0xE9, 0x18, 0x3E, 0x84, 0x19, 0x13, 0xD8, 0x67, 0xDA, 0xA7, 0x57, 0xFB, 0xDA, 0x5B, 0x5D, 0x4B, 0xC7, 0x85, 0xD5, 0x6A, 0x49, 0x4D, 0x98, 0xD5, 0x8B, 0xCA, 0xAA, 0xD5, 0xD5, 0x96, 0xC1, 0x42, 0x32, 0x58, 0xB6, 0x86, 0x0D, 0xD5, 0xAF, 0x7B, 0xE6, 0x74, 0xA1, 0x0D, 0x95, 0x92, 0x80, 0x7A, 0x4E, 0x4D, 0x9C, 0x2A, 0xD5, 0x77, 0xF0, 0xCF, 0xC4, 0x1A, 0x2E, 0x5F, 0xBD, 0x63, 0xE0, 0xAC, 0xFC, 0xB0, 0xFD, 0x48, 0x42, 0xBE, 0x1C, 0x3F, 0xF6, 0xC8, 0x8A, 0x35, 0xBD,
};

struct ML_DSA {
  const char name[20];
  const int nid;
  const size_t public_key_len;
  const size_t secret_key_len;
  const size_t signature_len;
  const char *kat_filename;
  const uint8_t *kPublicKey;
  const uint8_t *kPublicKeySPKI;
  const size_t kPublicKeySPKI_len;
};

#define CMP_VEC_AND_PTR(vec, ptr, len)         \
{                                    \
std::vector<uint8_t> tmp(len);     \
tmp.assign(ptr, ptr+len);          \
EXPECT_EQ(Bytes(vec), Bytes(tmp)); \
}

#define CMP_VEC_AND_PKEY_PUBLIC(vec, pkey, len) \
CMP_VEC_AND_PTR(vec, pkey->pkey.nistdsa_key->public_key, len)

#define CMP_VEC_AND_PKEY_SECRET(vec, pkey, len) \
CMP_VEC_AND_PTR(vec, pkey->pkey.nistdsa_key->secret_key, len)

static const struct ML_DSA parameterSet[] = {
  {"MLDSA44", NID_MLDSA44, 1312, 2560, 2420,  "dilithium/kat/mldsa44.txt",mldsa44kPublicKey, mldsa44kPublicKeySPKI, 1333},
  {"MLDSA65", NID_MLDSA65, 1952, 4032, 3309,  "dilithium/kat/mldsa65.txt",mldsa65kPublicKey, mldsa65kPublicKeySPKI, 1973},
  {"MLDSA87", NID_MLDSA87, 2592, 4896, 4627,  "dilithium/kat/mldsa87.txt",mldsa87kPublicKey, mldsa87kPublicKeySPKI, 2613},
};

class MLDSAParameterTest : public testing::TestWithParam<ML_DSA> {};

INSTANTIATE_TEST_SUITE_P(All, MLDSAParameterTest, testing::ValuesIn(parameterSet),
                         [](const testing::TestParamInfo<ML_DSA> &params)
                             -> std::string { return params.param.name; });


TEST_P(MLDSAParameterTest, KAT) {
  std::string kat_filepath = "crypto/";
  kat_filepath += GetParam().kat_filename;

  FileTestGTest(kat_filepath.c_str(), [&](FileTest *t) {
    std::string count, mlen, smlen;
    std::vector<uint8_t> seed, msg, pk, sk, sm;

    ASSERT_TRUE(t->GetAttribute(&count, "count"));
    ASSERT_TRUE(t->GetBytes(&seed, "seed"));
    ASSERT_TRUE(t->GetAttribute(&mlen, "mlen"));
    ASSERT_TRUE(t->GetBytes(&msg, "msg"));
    ASSERT_TRUE(t->GetBytes(&pk, "pk"));
    ASSERT_TRUE(t->GetBytes(&sk, "sk"));
    ASSERT_TRUE(t->GetAttribute(&smlen, "smlen"));
    ASSERT_TRUE(t->GetBytes(&sm, "sm"));

    size_t pk_len = GetParam().public_key_len;
    size_t sk_len = GetParam().secret_key_len;
    size_t sig_len = GetParam().signature_len;

    // The KAT files generated by the dilithium team use the optional APIs that
    // create a signature for a message m and append the message to the end of
    // the signature. We only want to bring the APIs that create and verify just
    // the signature, therefore each signature is a constant
    // DILITHIUM3_SIGNATURE_BYTES and we truncate the signed message down to a
    // constant DILITHIUM3_SIGNATURE_BYTES.

    std::vector<uint8_t> signature(sig_len);
    sm.resize(sig_len);

    // Convert string read from KAT to int
    size_t mlen_int = std::stoi(mlen);

    // Here we fix the DRBG (AES-CTR) so that we are able to seed it with the
    // seed from the KAT (testing only)
    pq_custom_randombytes_use_deterministic_for_testing();
    pq_custom_randombytes_init_for_testing(seed.data());

    // Generate our dilithium public and private key pair
    bssl::UniquePtr<EVP_PKEY_CTX> pctx(EVP_PKEY_CTX_new_id(EVP_PKEY_NISTDSA, nullptr));
    ASSERT_TRUE(pctx);
    ASSERT_TRUE(EVP_PKEY_CTX_nistdsa_set_params(pctx.get(),GetParam().nid));
    ASSERT_TRUE(EVP_PKEY_keygen_init(pctx.get()));
    EVP_PKEY *raw = nullptr;
    ASSERT_TRUE(EVP_PKEY_keygen(pctx.get(), &raw));
    bssl::UniquePtr<EVP_PKEY> pkey(raw);

    // Compare the expected public/secret key from KATs with generated values
    CMP_VEC_AND_PKEY_PUBLIC(pk, pkey, pk_len);
    CMP_VEC_AND_PKEY_SECRET(sk, pkey, sk_len);

    // Generate a signature for the message
    // We use EVP_DigestSign because dilithium supports the use of
    // non-hash-then-sign (just like ed25519) so we first init EVP_DigestSign
    // WITHOUT a hash function.
    bssl::ScopedEVP_MD_CTX ctx;
    ASSERT_TRUE(EVP_DigestSignInit(ctx.get(), nullptr, nullptr, nullptr, pkey.get()));
    ASSERT_TRUE(EVP_DigestSign(ctx.get(), signature.data(), &sig_len, msg.data(), mlen_int));
    EXPECT_EQ(Bytes(sm), Bytes(signature.data(), sig_len));
    ctx.Reset();

    // Verify the signature
    ASSERT_TRUE(EVP_DigestVerifyInit(ctx.get(), nullptr, nullptr, nullptr, pkey.get()));
    ASSERT_TRUE(EVP_DigestVerify(ctx.get(), signature.data(), sig_len, msg.data(), mlen_int));
  });
}

TEST_P(MLDSAParameterTest, KeyGen) {
  // Basic key generation tests for MLDSA
  // Generate a MLDSA key
  int nid = GetParam().nid;
  size_t pk_len = GetParam().public_key_len;
  size_t sk_len = GetParam().secret_key_len;

  bssl::UniquePtr<EVP_PKEY_CTX> ctx(EVP_PKEY_CTX_new_id(EVP_PKEY_NISTDSA, nullptr));
  ASSERT_TRUE(ctx);
  ASSERT_TRUE(EVP_PKEY_CTX_nistdsa_set_params(ctx.get(),nid));
  ASSERT_TRUE(EVP_PKEY_keygen_init(ctx.get()));
  EVP_PKEY *raw = nullptr;
  ASSERT_TRUE(EVP_PKEY_keygen(ctx.get(), &raw));
  bssl::UniquePtr<EVP_PKEY> pkey(raw);

  // Extract public key and check it is of the correct size
  uint8_t *buf = nullptr;
  size_t buf_size;
  EXPECT_TRUE(EVP_PKEY_get_raw_public_key(pkey.get(), buf, &buf_size));
  EXPECT_EQ(pk_len, buf_size);

  buf = (uint8_t *)OPENSSL_malloc(buf_size);
  ASSERT_NE(buf, nullptr);
  EXPECT_TRUE(EVP_PKEY_get_raw_public_key(pkey.get(), buf, &buf_size));

  buf_size = 0;
  EXPECT_FALSE(EVP_PKEY_get_raw_public_key(pkey.get(), buf, &buf_size));

  uint32_t err = ERR_get_error();
  EXPECT_EQ(ERR_LIB_EVP, ERR_GET_LIB(err));
  EXPECT_EQ(EVP_R_BUFFER_TOO_SMALL, ERR_GET_REASON(err));
  OPENSSL_free(buf);
  buf = nullptr;

  // Extract private key and check it is of the correct size
  EXPECT_TRUE(EVP_PKEY_get_raw_private_key(pkey.get(), buf, &buf_size));
  EXPECT_EQ((size_t)sk_len, buf_size);

  buf = (uint8_t *)OPENSSL_malloc(buf_size);
  ASSERT_NE(buf, nullptr);
  EXPECT_TRUE(EVP_PKEY_get_raw_private_key(pkey.get(), buf, &buf_size));

  buf_size = 0;
  EXPECT_FALSE(EVP_PKEY_get_raw_private_key(pkey.get(), buf, &buf_size));
  err = ERR_get_error();
  EXPECT_EQ(ERR_LIB_EVP, ERR_GET_LIB(err));
  EXPECT_EQ(EVP_R_BUFFER_TOO_SMALL, ERR_GET_REASON(err));
  OPENSSL_free(buf);
}

TEST_P(MLDSAParameterTest, KeyCmp) {
  // Generate two MLDSA keys are check that they are not equal.
  const int nid = GetParam().nid;

  // Generate first keypair
  bssl::UniquePtr<EVP_PKEY_CTX> ctx1(EVP_PKEY_CTX_new_id(EVP_PKEY_NISTDSA, nullptr));
  ASSERT_TRUE(ctx1);
  ASSERT_TRUE(EVP_PKEY_CTX_nistdsa_set_params(ctx1.get(),nid));
  ASSERT_TRUE(EVP_PKEY_keygen_init(ctx1.get()));
  EVP_PKEY *raw1 = nullptr;
  ASSERT_TRUE(EVP_PKEY_keygen(ctx1.get(), &raw1));
  bssl::UniquePtr<EVP_PKEY> pkey1(raw1);

  // Generate second keypair
  bssl::UniquePtr<EVP_PKEY_CTX> ctx2(EVP_PKEY_CTX_new_id(EVP_PKEY_NISTDSA, nullptr));
  ASSERT_TRUE(ctx2);
  ASSERT_TRUE(EVP_PKEY_CTX_nistdsa_set_params(ctx2.get(),nid));
  ASSERT_TRUE(EVP_PKEY_keygen_init(ctx2.get()));
  EVP_PKEY *raw2 = nullptr;
  ASSERT_TRUE(EVP_PKEY_keygen(ctx2.get(), &raw2));
  bssl::UniquePtr<EVP_PKEY> pkey2(raw2);

  // Compare keys
  EXPECT_EQ(0, EVP_PKEY_cmp(pkey1.get(), pkey2.get()));
}

TEST_P(MLDSAParameterTest, KeySize) {
  // Test the key size of MLDSA key is as expected
  int nid = GetParam().nid;
  int pk_len = GetParam().public_key_len;
  int sig_len = GetParam().signature_len;

  // generate an MLDSA keypair
  bssl::UniquePtr<EVP_PKEY_CTX> ctx(EVP_PKEY_CTX_new_id(EVP_PKEY_NISTDSA, nullptr));
  ASSERT_TRUE(ctx);
  ASSERT_TRUE(EVP_PKEY_CTX_nistdsa_set_params(ctx.get(),nid));
  ASSERT_TRUE(EVP_PKEY_keygen_init(ctx.get()));
  EVP_PKEY *raw = nullptr;
  ASSERT_TRUE(EVP_PKEY_keygen(ctx.get(), &raw));
  bssl::UniquePtr<EVP_PKEY> pkey(raw);

  EXPECT_EQ(sig_len, EVP_PKEY_size(pkey.get()));
  EXPECT_EQ(8*(pk_len), EVP_PKEY_bits(pkey.get()));
}

TEST_P(MLDSAParameterTest, NewKeyFromBytes) {
  // Test the generation of a MLDSA key from bytes
  int nid = GetParam().nid;
  size_t pk_len = GetParam().public_key_len;
  size_t sk_len = GetParam().secret_key_len;

  // Source key
  bssl::UniquePtr<EVP_PKEY_CTX> ctx(EVP_PKEY_CTX_new_id(EVP_PKEY_NISTDSA, nullptr));
  ASSERT_TRUE(ctx);
  ASSERT_TRUE(EVP_PKEY_CTX_nistdsa_set_params(ctx.get(), nid));
  ASSERT_TRUE(EVP_PKEY_keygen_init(ctx.get()));
  EVP_PKEY *raw = nullptr;
  ASSERT_TRUE(EVP_PKEY_keygen(ctx.get(), &raw));
  bssl::UniquePtr<EVP_PKEY> pkey(raw);


  // New raw pkey to store raw public key
  bssl::UniquePtr<EVP_PKEY> new_pkey(EVP_PKEY_new_raw_public_key(EVP_PKEY_NISTDSA,
                                                     nullptr,
                                                     pkey->pkey.nistdsa_key->public_key,
                                                     pk_len));

  // check that public key is present and secret key is not present
  ASSERT_NE(new_pkey, nullptr);
  EXPECT_NE(new_pkey->pkey.nistdsa_key->public_key, nullptr);
  EXPECT_EQ(new_pkey->pkey.nistdsa_key->secret_key, nullptr);

  // check that EVP_PKEY_get_raw_private_key fails correctly
  uint8_t *buf = nullptr;
  size_t buf_size;
  EXPECT_FALSE(EVP_PKEY_get_raw_private_key(new_pkey.get(), buf, &buf_size));
  uint32_t err = ERR_get_error();
  EXPECT_EQ(ERR_LIB_EVP, ERR_GET_LIB(err));
  EXPECT_EQ(EVP_R_NOT_A_PRIVATE_KEY, ERR_GET_REASON(err));

  // EVP_PKEY_cmp compares the public keys so this should return 1
  EXPECT_EQ(1, EVP_PKEY_cmp(pkey.get(), new_pkey.get()));

  // New raw pkey to store raw secret key
  bssl::UniquePtr<EVP_PKEY> private_pkey(EVP_PKEY_new_raw_private_key(EVP_PKEY_NISTDSA,
                                                     nullptr,
                                                     pkey->pkey.nistdsa_key->secret_key,
                                                     sk_len));

  // check that secret key is present and public key is not present
  ASSERT_NE(private_pkey, nullptr);
  EXPECT_EQ(private_pkey->pkey.nistdsa_key->public_key, nullptr);
  EXPECT_NE(private_pkey->pkey.nistdsa_key->secret_key, nullptr);
  EXPECT_EQ(0, OPENSSL_memcmp(private_pkey->pkey.nistdsa_key->secret_key, pkey->pkey.nistdsa_key->secret_key, sk_len));
}

TEST_P(MLDSAParameterTest, RawFunctions) {
  // Test EVP_PKEY_get_raw_public_key for extracting public keys
  // Test EVP_PKEY_get_raw_private_key for extracting private keys
  // Test EVP_PKEY_new_raw_public_key for generating a new PKEY from raw pub
  // Test EVP_parse_public_key can parse the DER to a PKEY
  // Test EVP_PKEY_new_raw_private_key for generating a new PKEY from raw priv

  int nid = GetParam().nid;
  size_t pk_len = GetParam().public_key_len;
  size_t sk_len = GetParam().secret_key_len;

  // Generate mldsa key
  bssl::UniquePtr<EVP_PKEY_CTX> ctx(EVP_PKEY_CTX_new_id(EVP_PKEY_NISTDSA, nullptr));
  ASSERT_TRUE(ctx);
  ASSERT_TRUE(EVP_PKEY_CTX_nistdsa_set_params(ctx.get(),nid));
  ASSERT_TRUE(EVP_PKEY_keygen_init(ctx.get()));
  EVP_PKEY *raw = nullptr;
  ASSERT_TRUE(EVP_PKEY_keygen(ctx.get(), &raw));
  bssl::UniquePtr<EVP_PKEY> pkey(raw);

  // The public key must be extractable.
  std::vector<uint8_t> pub_buf(pk_len);
  size_t pub_len;
  ASSERT_TRUE(EVP_PKEY_get_raw_public_key(pkey.get(), nullptr, &pub_len));
  EXPECT_EQ(pub_len, pk_len);
  ASSERT_TRUE(EVP_PKEY_get_raw_public_key(pkey.get(), pub_buf.data(), &pub_len));

  // Generate a new pkey with only public key set from the extracted public key
  bssl::UniquePtr<EVP_PKEY> pkey_pk_new(EVP_PKEY_new_raw_public_key(EVP_PKEY_NISTDSA,
                                                                      nullptr,
                                                                      pub_buf.data(),
                                                                      pk_len));
  ASSERT_TRUE(pkey_pk_new);
  // set the correct params for the PKEY
  EVP_PKEY_nistdsa_set_params(pkey_pk_new.get(), nid);

  // The public key must encode properly.
  bssl::ScopedCBB cbb;
  uint8_t *der;
  size_t der_len;
  ASSERT_TRUE(CBB_init(cbb.get(), 0));
  ASSERT_TRUE(EVP_marshal_public_key(cbb.get(), pkey_pk_new.get()));
  ASSERT_TRUE(CBB_finish(cbb.get(), &der, &der_len));
  bssl::UniquePtr<uint8_t> free_der(der);

  // The public key must parse properly.
  CBS cbs;
  CBS_init(&cbs, der, der_len);
  bssl::UniquePtr<EVP_PKEY> pkey_from_der(EVP_parse_public_key(&cbs));
  ASSERT_TRUE(pkey_from_der.get());
  EXPECT_EQ(1, EVP_PKEY_cmp(pkey.get(), pkey_from_der.get()));

  // The secret key must be extractable.
  std::vector<uint8_t> priv_buf(sk_len);
  size_t priv_len;
  ASSERT_TRUE(EVP_PKEY_get_raw_private_key(pkey.get(), nullptr, &priv_len));
  EXPECT_EQ(priv_len, sk_len);
  ASSERT_TRUE(EVP_PKEY_get_raw_private_key(pkey.get(), priv_buf.data(), &priv_len));

  // Generate a new pkey with only secret key set from the extracted secret key
  bssl::UniquePtr<EVP_PKEY> pkey_sk_new(EVP_PKEY_new_raw_private_key(EVP_PKEY_NISTDSA,
                                                     nullptr,
                                                     priv_buf.data(),
                                                     sk_len));
  ASSERT_TRUE(pkey_sk_new);
  // set the correct params for the PKEY
  EVP_PKEY_nistdsa_set_params(pkey_sk_new.get(), nid);


  // The private key must encode properly.
  ASSERT_TRUE(CBB_init(cbb.get(), 0));
  ASSERT_TRUE(EVP_marshal_private_key(cbb.get(), pkey_sk_new.get()));
  ASSERT_TRUE(CBB_finish(cbb.get(), &der, &der_len));
  free_der.reset(der);

  // private key parse
  CBS_init(&cbs, der, der_len);
  bssl::UniquePtr<EVP_PKEY> pkey_priv_from_der(EVP_parse_private_key(&cbs));
  ASSERT_TRUE(pkey_priv_from_der);

  // set the correct params for the PKEY
  EVP_PKEY_nistdsa_set_params(pkey_priv_from_der.get(), nid);
  // check that the private key from pkey_priv_from_der matches the original key
  EXPECT_EQ(Bytes(pkey_priv_from_der->pkey.nistdsa_key->secret_key,
            pkey_priv_from_der->pkey.nistdsa_key->nistdsa->secret_key_len),
            Bytes(priv_buf.data(), sk_len));
}

TEST_P(MLDSAParameterTest, SIGOperations) {
  // Test basic functionality for MLDSA
  int nid = GetParam().nid;
  size_t sig_len = GetParam().signature_len;

  // Generate a mldsa key
  bssl::UniquePtr<EVP_PKEY_CTX> ctx(EVP_PKEY_CTX_new_id(EVP_PKEY_NISTDSA, nullptr));
  ASSERT_TRUE(ctx);
  ASSERT_TRUE(EVP_PKEY_CTX_nistdsa_set_params(ctx.get(),nid));
  ASSERT_TRUE(EVP_PKEY_keygen_init(ctx.get()));
  EVP_PKEY *raw = nullptr;
  ASSERT_TRUE(EVP_PKEY_keygen(ctx.get(), &raw));
  bssl::UniquePtr<EVP_PKEY> pkey(raw);

  // Sign a message
  bssl::ScopedEVP_MD_CTX md_ctx;
  std::vector<uint8_t> signature(sig_len);

  std::vector<uint8_t> msg = {
      0x4a, 0x41, 0x4b, 0x45, 0x20, 0x4d, 0x41, 0x53, 0x53, 0x49,
      0x4d, 0x4f, 0x20, 0x41, 0x57, 0x53, 0x32, 0x30, 0x32, 0x32, 0x2e};
  std::vector<uint8_t> badmsg = {
      0x4a, 0x41, 0x4b, 0x45, 0x20, 0x4d, 0x41, 0x53, 0x53, 0x49,
      0x4d, 0x4f, 0x20, 0x41, 0x57, 0x53, 0x32, 0x30, 0x32, 0x31, 0x2e};

  ASSERT_TRUE(EVP_DigestSignInit(md_ctx.get(), nullptr, nullptr,
                                 nullptr, pkey.get()));
  ASSERT_TRUE(EVP_DigestSign(md_ctx.get(), signature.data(), &sig_len,
                             msg.data(), msg.size()));

  // Verify the correct signed message
  ASSERT_TRUE(EVP_DigestVerify(md_ctx.get(), signature.data(), sig_len,
                               msg.data(), msg.size()));

  // Verify the signed message fails upon a bad message
  ASSERT_FALSE(EVP_DigestVerify(md_ctx.get(), signature.data(), sig_len,
                                badmsg.data(), badmsg.size()));

  // Sign the bad message

  std::vector<uint8_t> signature1(sig_len);
  ASSERT_TRUE(EVP_DigestSign(md_ctx.get(), signature1.data(), &sig_len,
                             badmsg.data(), badmsg.size()));

  // Check that the two signatures are not equal
  EXPECT_NE(0, OPENSSL_memcmp(signature.data(), signature1.data(), sig_len));

  // Verify the signed message fails upon a bad signature
  ASSERT_FALSE(EVP_DigestVerify(md_ctx.get(), signature1.data(), sig_len,
                                msg.data(), msg.size()));
  md_ctx.Reset();
}

TEST_P(MLDSAParameterTest, MarshalParse) {
  // Test the example public key kPublicKey encodes correctly as kPublicKeySPKI
  // Test that the DER encoding can be parsed as a PKEY
  // Test that extacting the public key from the PKEY is the same as the original key

  int nid = GetParam().nid;
  size_t pk_len = GetParam().public_key_len;
  const uint8_t * kPublicKey = GetParam().kPublicKey;
  const uint8_t * kPublicKeySPKI = GetParam().kPublicKeySPKI;
  size_t kPublicKeySPKI_len = GetParam().kPublicKeySPKI_len;

  // Generate a new pkey with only public key set from the extracted public key
  bssl::UniquePtr<EVP_PKEY> pkey_pk_new(EVP_PKEY_new_raw_public_key(EVP_PKEY_NISTDSA,
                                                                      nullptr,
                                                                      kPublicKey,
                                                                      pk_len));
  ASSERT_TRUE(pkey_pk_new);
  // set the correct params for the PKEY
  EVP_PKEY_nistdsa_set_params(pkey_pk_new.get(), nid);

  // Encode the public key as DER
  bssl::ScopedCBB cbb;
  uint8_t *der;
  size_t der_len;
  ASSERT_TRUE(CBB_init(cbb.get(), 0));
  ASSERT_TRUE(EVP_marshal_public_key(cbb.get(), pkey_pk_new.get()));
  ASSERT_TRUE(CBB_finish(cbb.get(), &der, &der_len));
  bssl::UniquePtr<uint8_t> free_der(der);

  // Test that the encoded public key encodes as expected
  EXPECT_EQ(Bytes(kPublicKeySPKI, kPublicKeySPKI_len), Bytes(der, der_len));

  // decode the DER structure, then parse as a PKEY.
  CBS cbs;
  CBS_init(&cbs, der, der_len);
  bssl::UniquePtr<EVP_PKEY> pkey_from_der(EVP_parse_public_key(&cbs));
  ASSERT_TRUE(pkey_from_der);

  // set the correct params for the PKEY
  EVP_PKEY_nistdsa_set_params(pkey_from_der.get(), nid);

  // Extract the public key and check it is equivalent to original key
  std::vector<uint8_t> pub_buf(pk_len);
  size_t pub_len;
  ASSERT_TRUE(EVP_PKEY_get_raw_public_key(pkey_from_der.get(), nullptr, &pub_len));
  EXPECT_EQ(pub_len, pk_len);
  ASSERT_TRUE(EVP_PKEY_get_raw_public_key(pkey_from_der.get(), pub_buf.data(), &pub_len));
  EXPECT_EQ(Bytes(kPublicKey, pk_len), Bytes(pub_buf.data(), pub_len));
}

#else

TEST(Dilithium3Test, EvpDisabled) {
  ASSERT_EQ(nullptr, EVP_PKEY_CTX_new_id(EVP_PKEY_NISTDSA, nullptr));
  bssl::UniquePtr<EVP_PKEY> pkey(EVP_PKEY_new());
  ASSERT_FALSE(EVP_PKEY_set_type(pkey.get(), EVP_PKEY_NISTDSA));
}

#endif
