// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
#include <time.h>

#include <gtest/gtest.h>

#include "openssl/ocsp.h"
#include "openssl/pem.h"

#include "../internal.h"

// Test data below are taken from s2n's ocsp test files:
// https://github.com/aws/s2n-tls/blob/main/tests/pems/ocsp
// OCSP testing methods were taken from s2n's validation tests:
// https://github.com/aws/s2n-tls/blob/main/tests/unit/s2n_x509_validator_test.c

static const time_t invalid_before_ocsp_update_time = 1621988613;
static const time_t valid_after_ocsp_update_time = 1621988615;
static const time_t valid_before_ocsp_expire_time = 1937348613;
static const time_t invalid_after_ocsp_expire_time = 1937348615;

static const time_t invalid_before_ocsp_update_time_sha256 = 1622145762;
static const time_t valid_after_ocsp_update_time_sha256 = 1622145764;
static const time_t valid_before_ocsp_expire_time_sha256 = 1937505762;
static const time_t invalid_after_ocsp_expire_time_sha256 = 1937505764;

#define OCSP_VERIFYSTATUS_SUCCESS                   1
#define OCSP_VERIFYSTATUS_ERROR                     0
#define OCSP_VERIFYSTATUS_FATALERROR                -1

#define OCSP_RESPFINDSTATUS_SUCCESS                 1
#define OCSP_RESPFINDSTATUS_ERROR                   0

//static const char server_ecdsa_cert[] = R"(
//-----BEGIN CERTIFICATE-----
//MIIECTCCAfGgAwIBAgIBAzANBgkqhkiG9w0BAQsFADAoMQswCQYDVQQGEwJVUzEL
//MAkGA1UECAwCV0ExDDAKBgNVBAoMA3MybjAgFw0xOTA3MTEyMTQ5MDVaGA8yMTE5
//MDYxNzIxNDkwNVowTjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAldBMQwwCgYDVQQK
//DANzMm4xDDAKBgNVBAsMA3MybjEWMBQGA1UEAwwNczJuIFRlc3QgQ2VydDBZMBMG
//ByqGSM49AgEGCCqGSM49AwEHA0IABHKbmPNWSqD37R0lKFUMy9ct5PtyZgQ70fza
//o00OjS5E2WwUwSUO+8gJIXtrBl7z6c3Mwwo1c5q+3s7AqOzxrYmjgeAwgd0wLAYJ
//YIZIAYb4QgENBB8WHU9wZW5TU0wgR2VuZXJhdGVkIENlcnRpZmljYXRlMB0GA1Ud
//DgQWBBQLtWXnPNV3aXoN8pc/9ssWBRIbljAfBgNVHSMEGDAWgBQS34F1ccqS084b
//LCt3O54zd/P3bzAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIEsDAdBgNVHSUEFjAU
//BggrBgEFBQcDAQYIKwYBBQUHAwIwMwYIKwYBBQUHAQEEJzAlMCMGCCsGAQUFBzAB
//hhdodHRwOi8vb2NzcC5zMm50ZXN0LmNvbTANBgkqhkiG9w0BAQsFAAOCAgEAWUvZ
//xu4SPozbN7QMzMmvlv+rMvlUgC8uQGs5v/OgopbAK1qypSB6s4R+ARZ5kP2k2olo
//UjsuxAf5L7KLxElauXAhSetV1irKtm1c7ui5kqpLRskBc50e8yQa+JzRu5p+vs1o
//8RSuT0OpGiz00oqu25Cie9nRaQ8uo9KeUNOg5gnWBXGg0bs+1Dvkfc44gwNCxr+D
//YCjOpXW39xtuW+r/MmHTNhuDHx/pJucjVILOy7lZTPYldqQzsO//Iy9DnpCR9Ii+
//GvlzAwCnhgOK6GJShH9cRr1cEgPD5etyIqHW7BmeYz4JmJtDqnkeOW5xWclRemrR
//p66O0UxqjQtjagWSwTFrnX9GZTzUPItCj3+0Suhf1K8fl6jVfkuGghCSCWcUdDzd
//gixMQH1TPYKJZxELkRMoN9YtBaYEMshm7ioqreMHBHD/rZqKYHpZkW8ImMVzlt0L
//dfg+OQrZvTiivHpVVtzSJvJCXiMCoTN1EZbUJyP+EDeyOBPJcwz4lb3O3T4oFy7+
//nT9Q3IgxG/efy72gbJJKhxa+7oVTQa/Kpk1V/tVr0srSRTIZNeus4X5QSfqS8Sxe
//vn2lcze2FDpzpAohAL5Yd5GJx7CLDWikGLp0AVUBUbA4oDZuItUbRUfcsPNBExo3
//e7YxAiOh9JRWT5aTMofdGdoGduoCpkURjhSEPeg=
//-----END CERTIFICATE-----
//)";


//static const uint8_t ocsp_response_ca_signed_der[] = {
//    0x30, 0x82, 0x08, 0x42, 0x0a, 0x01, 0x00, 0xa0, 0x82, 0x08, 0x3b, 0x30,
//    0x82, 0x08, 0x37, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
//    0x01, 0x01, 0x04, 0x82, 0x08, 0x28, 0x30, 0x82, 0x08, 0x24, 0x30, 0x81,
//    0xc9, 0xa1, 0x2a, 0x30, 0x28, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
//    0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
//    0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06,
//    0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x18, 0x0f, 0x32,
//    0x30, 0x32, 0x31, 0x30, 0x36, 0x30, 0x33, 0x32, 0x32, 0x30, 0x30, 0x32,
//    0x36, 0x5a, 0x30, 0x65, 0x30, 0x63, 0x30, 0x3b, 0x30, 0x09, 0x06, 0x05,
//    0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14, 0xde, 0x79, 0x32,
//    0xb3, 0x21, 0x7e, 0x48, 0xfb, 0x4e, 0x47, 0xae, 0x0b, 0x90, 0x07, 0xa5,
//    0x53, 0x76, 0xae, 0x44, 0xca, 0x04, 0x14, 0x12, 0xdf, 0x81, 0x75, 0x71,
//    0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b, 0x77, 0x3b, 0x9e, 0x33, 0x77,
//    0xf3, 0xf7, 0x6f, 0x02, 0x02, 0x77, 0x78, 0x80, 0x00, 0x18, 0x0f, 0x32,
//    0x30, 0x32, 0x31, 0x30, 0x36, 0x30, 0x33, 0x32, 0x32, 0x30, 0x30, 0x32,
//    0x36, 0x5a, 0xa0, 0x11, 0x18, 0x0f, 0x32, 0x30, 0x33, 0x31, 0x30, 0x36,
//    0x30, 0x31, 0x32, 0x32, 0x30, 0x30, 0x32, 0x36, 0x5a, 0xa1, 0x23, 0x30,
//    0x21, 0x30, 0x1f, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
//    0x01, 0x02, 0x04, 0x12, 0x04, 0x10, 0x74, 0x01, 0xac, 0x0a, 0x8a, 0x1c,
//    0xb3, 0xa4, 0x39, 0x0e, 0xde, 0x26, 0x5e, 0x61, 0x0e, 0xbd, 0x30, 0x0d,
//    0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
//    0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x16, 0x63, 0x17, 0x6d, 0x1b, 0x6d,
//    0x73, 0x39, 0x4e, 0xb4, 0x15, 0x56, 0x4e, 0x45, 0x3d, 0x51, 0x86, 0x75,
//    0x3e, 0x8d, 0x4a, 0x85, 0x3b, 0xa0, 0xb8, 0x55, 0x8d, 0x6b, 0x6f, 0xab,
//    0x32, 0x40, 0xa0, 0x66, 0xd6, 0x87, 0x34, 0xfc, 0x5d, 0xbe, 0x46, 0x95,
//    0xf4, 0x2b, 0x68, 0x3c, 0xa4, 0xaa, 0xef, 0x28, 0x0f, 0xa8, 0xce, 0x70,
//    0xce, 0xd6, 0x3e, 0x44, 0x32, 0x27, 0x49, 0xa7, 0x89, 0xc7, 0x06, 0x7e,
//    0x09, 0xcd, 0x34, 0xd5, 0xe0, 0xcf, 0xeb, 0x05, 0x59, 0x6f, 0x7c, 0x18,
//    0xa1, 0xbf, 0x67, 0x8f, 0x2f, 0xe0, 0x4f, 0xc4, 0x46, 0x28, 0x2e, 0x03,
//    0x0a, 0xb8, 0x36, 0x60, 0x14, 0x62, 0x07, 0x08, 0xd8, 0x16, 0x3d, 0xa2,
//    0x1e, 0x86, 0xf3, 0x2a, 0x26, 0x1f, 0xe7, 0xde, 0xd2, 0xa0, 0x10, 0x78,
//    0xa1, 0x32, 0x7f, 0x4b, 0x46, 0x72, 0xc9, 0x74, 0xef, 0xae, 0x73, 0x51,
//    0xf2, 0x36, 0xd1, 0x01, 0x0a, 0x38, 0xd0, 0x5b, 0x8e, 0x62, 0x49, 0xb3,
//    0xbf, 0xf7, 0x42, 0xc1, 0x8a, 0x3a, 0xb3, 0x6d, 0x63, 0x0d, 0x83, 0xde,
//    0xd7, 0x55, 0xd1, 0xf3, 0x77, 0x3e, 0xe5, 0x2b, 0x6d, 0x32, 0x09, 0x27,
//    0x0b, 0x30, 0x42, 0x79, 0xa5, 0xd4, 0x12, 0x12, 0x1b, 0x04, 0x83, 0xfa,
//    0xae, 0x60, 0x97, 0x55, 0xe6, 0xc4, 0x46, 0xe0, 0xb2, 0x50, 0x01, 0xad,
//    0x5f, 0x74, 0x15, 0x9d, 0x18, 0x2c, 0x19, 0xb6, 0x00, 0x6c, 0x05, 0x4b,
//    0x2b, 0x87, 0x68, 0xfa, 0xe9, 0xb1, 0x60, 0x51, 0x89, 0xeb, 0x67, 0x73,
//    0xec, 0x31, 0x5d, 0x63, 0xda, 0xc3, 0x7b, 0xf5, 0x67, 0x57, 0xbb, 0x4a,
//    0x67, 0x2e, 0xfd, 0x38, 0x6f, 0x47, 0xa3, 0xb9, 0x8f, 0x79, 0x85, 0x0c,
//    0x29, 0x20, 0xb8, 0x33, 0x54, 0x34, 0x44, 0x52, 0xd5, 0x85, 0xba, 0x5f,
//    0x95, 0xd6, 0x80, 0x1b, 0x4b, 0xaa, 0x34, 0x3c, 0x36, 0xfd, 0x03, 0x82,
//    0x6b, 0x2b, 0x6f, 0x40, 0x77, 0x8c, 0xf7, 0x21, 0x64, 0xfe, 0xcf, 0x0f,
//    0x22, 0x28, 0xe2, 0xac, 0x83, 0xd5, 0x79, 0x6d, 0xf1, 0x43, 0x9b, 0x5d,
//    0x4f, 0xb5, 0x4c, 0x81, 0x7e, 0x90, 0x59, 0x67, 0x9b, 0xc8, 0xc0, 0x01,
//    0x09, 0x1a, 0xa3, 0x26, 0xd2, 0xee, 0xfb, 0x7c, 0xa4, 0x7b, 0x52, 0x36,
//    0x3d, 0xe7, 0xd3, 0x7a, 0x3f, 0xcb, 0x99, 0x13, 0x82, 0xe2, 0x2c, 0x93,
//    0xd0, 0xa0, 0x30, 0x86, 0xee, 0x5e, 0x4a, 0x42, 0x65, 0x00, 0xdb, 0x9a,
//    0x43, 0xb8, 0xd4, 0x35, 0x00, 0x7f, 0x25, 0x87, 0x4e, 0xff, 0xac, 0xf2,
//    0x58, 0x79, 0x11, 0x6a, 0x04, 0x8e, 0x25, 0xca, 0x78, 0xa6, 0xc8, 0xc5,
//    0x98, 0xa3, 0xd7, 0x6a, 0xf9, 0x93, 0x57, 0x6a, 0x3b, 0xa5, 0x78, 0xb0,
//    0xb4, 0xfa, 0x57, 0x44, 0x0d, 0x1f, 0x4b, 0xf5, 0x03, 0x30, 0x2a, 0x36,
//    0xf8, 0xd8, 0x06, 0x8f, 0xcf, 0x77, 0x70, 0x8e, 0x5b, 0x45, 0x72, 0x8e,
//    0x62, 0x66, 0x41, 0xa1, 0xea, 0xac, 0x80, 0xc6, 0xfd, 0x6a, 0x8c, 0x21,
//    0xc3, 0x5c, 0x10, 0x58, 0x92, 0xd9, 0x33, 0x0f, 0xe3, 0x6f, 0x71, 0x7e,
//    0xdd, 0xd2, 0x28, 0xcb, 0xe3, 0xbf, 0x02, 0x83, 0xad, 0xb4, 0xf1, 0xf6,
//    0x83, 0x24, 0xb1, 0x4c, 0x8f, 0xae, 0xfb, 0x0e, 0xcb, 0x72, 0xab, 0x17,
//    0xff, 0xd6, 0xfc, 0x34, 0x61, 0x64, 0x3e, 0x42, 0x01, 0xa7, 0xca, 0xe0,
//    0xce, 0x5e, 0x1e, 0x73, 0xcc, 0x1f, 0x7a, 0xe4, 0x83, 0x0f, 0xf0, 0xdd,
//    0x6c, 0xd8, 0xfb, 0x18, 0x2e, 0x70, 0x24, 0x9e, 0xf8, 0xe9, 0xd0, 0x03,
//    0xa2, 0x35, 0x81, 0x0a, 0x73, 0x02, 0x59, 0x17, 0xa5, 0x54, 0xfb, 0x31,
//    0xea, 0x58, 0x5a, 0x3b, 0xfc, 0xeb, 0x04, 0x6c, 0x8d, 0xa7, 0x78, 0x22,
//    0xa8, 0x0f, 0xf9, 0xbd, 0x05, 0x6c, 0x86, 0xfc, 0x0e, 0xf7, 0xbf, 0xe4,
//    0x62, 0x41, 0xa0, 0x82, 0x05, 0x40, 0x30, 0x82, 0x05, 0x3c, 0x30, 0x82,
//    0x05, 0x38, 0x30, 0x82, 0x03, 0x20, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02,
//    0x09, 0x00, 0x86, 0xcd, 0xbd, 0x21, 0x8c, 0x44, 0xd7, 0x77, 0x30, 0x0d,
//    0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
//    0x00, 0x30, 0x28, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
//    0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
//    0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55,
//    0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x30, 0x20, 0x17, 0x0d, 0x31,
//    0x37, 0x30, 0x39, 0x30, 0x35, 0x30, 0x35, 0x31, 0x35, 0x30, 0x35, 0x5a,
//    0x18, 0x0f, 0x32, 0x31, 0x31, 0x37, 0x30, 0x38, 0x31, 0x32, 0x30, 0x35,
//    0x31, 0x35, 0x30, 0x35, 0x5a, 0x30, 0x28, 0x31, 0x0b, 0x30, 0x09, 0x06,
//    0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09,
//    0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30,
//    0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x30,
//    0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
//    0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00, 0x30,
//    0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xbe, 0x38, 0x0a, 0x82,
//    0xa2, 0xc9, 0xbd, 0xa0, 0xe7, 0x75, 0x74, 0xb7, 0xa8, 0xfa, 0x4d, 0x03,
//    0xe8, 0x68, 0x75, 0x87, 0x0e, 0x94, 0xff, 0xa3, 0x8a, 0xde, 0xc3, 0xc0,
//    0x8d, 0x34, 0x38, 0xbe, 0x36, 0xb2, 0x01, 0x16, 0xd1, 0x79, 0xa4, 0xf6,
//    0xed, 0xa4, 0x19, 0x3c, 0x08, 0x15, 0x6d, 0x62, 0x40, 0xf0, 0x8f, 0xa3,
//    0x49, 0x01, 0xd3, 0x03, 0x13, 0xc5, 0x2c, 0x17, 0xae, 0xe6, 0x49, 0xa7,
//    0x32, 0x36, 0x6a, 0xc3, 0x18, 0x6c, 0xda, 0x64, 0x54, 0x6c, 0x4c, 0x04,
//    0x14, 0xfd, 0xe2, 0x9f, 0x4e, 0x25, 0xc9, 0xe5, 0x8d, 0xe6, 0x82, 0x62,
//    0xc1, 0x1e, 0xd9, 0x67, 0x5c, 0x9b, 0xdd, 0xf4, 0x8b, 0x19, 0x76, 0xc3,
//    0xd3, 0x23, 0x1b, 0x76, 0xae, 0xee, 0x26, 0xb0, 0x98, 0x02, 0xfe, 0x47,
//    0xa7, 0x06, 0xd3, 0xa5, 0x69, 0x91, 0x39, 0x53, 0x1f, 0xd6, 0xfa, 0xf9,
//    0x8d, 0x4c, 0x41, 0x43, 0x3d, 0xf6, 0x33, 0xe6, 0xca, 0xa1, 0xeb, 0xda,
//    0x0e, 0x77, 0x39, 0xcc, 0x34, 0x78, 0xbd, 0x96, 0x72, 0x75, 0x0b, 0xb1,
//    0xf3, 0x85, 0x40, 0xe3, 0x71, 0x4c, 0xb4, 0x0f, 0x68, 0xa1, 0x6b, 0x74,
//    0x07, 0x09, 0x74, 0x1f, 0xa0, 0xcb, 0xac, 0x80, 0xf3, 0xa2, 0x7b, 0x08,
//    0x04, 0x9d, 0x3e, 0x3c, 0x8f, 0xa8, 0x43, 0x2a, 0xa5, 0xec, 0x46, 0x8a,
//    0xc5, 0x30, 0x4d, 0x7d, 0x9b, 0x8b, 0xc6, 0xb9, 0xaf, 0xb2, 0x7d, 0x13,
//    0x99, 0xa6, 0x5d, 0x2a, 0x4b, 0x55, 0x21, 0xee, 0x6e, 0xb6, 0x5f, 0x9f,
//    0x55, 0x2e, 0xa1, 0x97, 0x2b, 0xf0, 0xac, 0xe8, 0xf7, 0xd2, 0x40, 0x6d,
//    0x7c, 0x84, 0xbc, 0xe9, 0x31, 0x8b, 0xd2, 0x31, 0x1f, 0xeb, 0x23, 0x76,
//    0xe3, 0x74, 0xd9, 0xb3, 0xc1, 0xb3, 0xa3, 0xec, 0x61, 0x04, 0xe2, 0xce,
//    0x9b, 0x00, 0x4d, 0xf8, 0x2d, 0x22, 0xe8, 0xeb, 0x88, 0xa6, 0x56, 0xe9,
//    0x12, 0xea, 0x16, 0xbb, 0x2d, 0xe2, 0x70, 0x87, 0xcb, 0xc3, 0x0f, 0x6d,
//    0x8f, 0xd9, 0xa0, 0xf8, 0xac, 0x31, 0xa2, 0x00, 0xdf, 0xe6, 0x85, 0x75,
//    0x42, 0xf2, 0xa4, 0x6b, 0xf3, 0x0c, 0x97, 0xac, 0x8a, 0xf6, 0x85, 0x4a,
//    0x69, 0xe3, 0x68, 0x89, 0x57, 0x2c, 0xd5, 0x1d, 0x60, 0xd1, 0x92, 0xae,
//    0x1d, 0x53, 0x7d, 0x71, 0x6c, 0xdb, 0x23, 0xff, 0xcf, 0x45, 0x12, 0x1f,
//    0x97, 0x39, 0x88, 0xae, 0x33, 0xb6, 0x60, 0x78, 0x75, 0x7f, 0x21, 0xef,
//    0x3d, 0x9e, 0xbe, 0xfc, 0xbc, 0xe7, 0xef, 0xd2, 0x20, 0x8c, 0x80, 0x21,
//    0x6c, 0xca, 0x4a, 0x45, 0x67, 0xef, 0x2f, 0x0c, 0x2d, 0xb6, 0x9b, 0xaa,
//    0x46, 0xae, 0x5e, 0x7c, 0x55, 0xd6, 0x39, 0xf5, 0xde, 0xa3, 0x1e, 0xda,
//    0x4d, 0xb5, 0x06, 0x16, 0x9f, 0x50, 0x79, 0xc3, 0x10, 0x71, 0xd2, 0xe8,
//    0x0f, 0x1d, 0xdd, 0x2e, 0x47, 0x20, 0x6f, 0x93, 0xcc, 0xeb, 0x21, 0xff,
//    0x40, 0xeb, 0x44, 0x2c, 0x43, 0x9e, 0x85, 0xde, 0x29, 0x89, 0x0b, 0xa7,
//    0x51, 0xfb, 0x84, 0x7c, 0x33, 0xcb, 0x7c, 0xe1, 0x69, 0xba, 0xb0, 0x34,
//    0x00, 0x56, 0xf8, 0xf2, 0x62, 0x8c, 0xbd, 0xbb, 0x87, 0xb8, 0xac, 0xb5,
//    0xd3, 0xe4, 0x83, 0x05, 0x1c, 0x68, 0xc8, 0xed, 0x57, 0x5a, 0x84, 0x0d,
//    0x01, 0x98, 0x80, 0x73, 0x04, 0xb7, 0xce, 0x6f, 0xa6, 0x54, 0x5f, 0x69,
//    0xda, 0xd1, 0xc9, 0x06, 0xbd, 0x5b, 0xbc, 0x0c, 0x2a, 0xe6, 0xf6, 0x52,
//    0x4f, 0xd4, 0xd6, 0x29, 0x1e, 0xe4, 0x37, 0x5b, 0x61, 0xf0, 0xb3, 0x5f,
//    0xab, 0x30, 0x3d, 0x14, 0x44, 0x9a, 0x99, 0xcb, 0xf0, 0xf6, 0x6e, 0xdb,
//    0x4f, 0xc5, 0x58, 0x13, 0xff, 0x92, 0xaa, 0x09, 0x2a, 0x66, 0x06, 0x3b,
//    0xec, 0xbf, 0x6b, 0xa7, 0x4d, 0xfc, 0x55, 0x6d, 0x92, 0x27, 0x41, 0x01,
//    0x6d, 0xb7, 0xbd, 0x25, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x63, 0x30,
//    0x61, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14,
//    0x12, 0xdf, 0x81, 0x75, 0x71, 0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b,
//    0x77, 0x3b, 0x9e, 0x33, 0x77, 0xf3, 0xf7, 0x6f, 0x30, 0x1f, 0x06, 0x03,
//    0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x12, 0xdf, 0x81,
//    0x75, 0x71, 0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b, 0x77, 0x3b, 0x9e,
//    0x33, 0x77, 0xf3, 0xf7, 0x6f, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13,
//    0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0e,
//    0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02,
//    0x01, 0x86, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
//    0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0xb3, 0x60,
//    0xb5, 0x79, 0x27, 0x21, 0xb2, 0xd6, 0x7b, 0xc1, 0x46, 0x8e, 0x7c, 0x9e,
//    0x3f, 0xe1, 0x3d, 0x9b, 0xcd, 0x9f, 0x9a, 0x3e, 0x96, 0xfd, 0xa9, 0x1f,
//    0x6b, 0x53, 0xe9, 0xe8, 0xf1, 0x0a, 0x6a, 0x5b, 0x44, 0xce, 0x3f, 0x92,
//    0x51, 0x39, 0xb6, 0xb4, 0x9a, 0x90, 0xf7, 0xa1, 0x1a, 0xd2, 0xf2, 0x11,
//    0x22, 0x86, 0x9d, 0x94, 0x3e, 0x91, 0xc8, 0x23, 0x52, 0x51, 0xab, 0x3c,
//    0xad, 0xab, 0x91, 0x87, 0x33, 0xaa, 0xd6, 0xf6, 0xca, 0x30, 0xc4, 0x9a,
//    0xa1, 0x86, 0x9e, 0x3a, 0x2f, 0x1b, 0x40, 0xa8, 0x87, 0x8b, 0xd6, 0x4d,
//    0x8f, 0x07, 0x9d, 0xc4, 0xf5, 0x42, 0x1a, 0xbf, 0x89, 0x1f, 0xe0, 0x2d,
//    0x5e, 0x3b, 0x7d, 0xa2, 0x3b, 0x4d, 0x27, 0x74, 0xaf, 0xdf, 0xb9, 0x6c,
//    0x64, 0xbb, 0xff, 0x79, 0x90, 0x80, 0xbb, 0xa3, 0x9a, 0x50, 0x6a, 0x30,
//    0xa4, 0xb0, 0x49, 0x1e, 0x12, 0x82, 0xb1, 0xea, 0x85, 0x29, 0xe9, 0x1b,
//    0x76, 0x28, 0x01, 0xab, 0x10, 0x89, 0xa9, 0xa0, 0x43, 0xf8, 0xaa, 0xac,
//    0x37, 0x18, 0xdf, 0x06, 0xae, 0x7b, 0x42, 0xd2, 0xcf, 0x85, 0x7d, 0x96,
//    0x2c, 0xae, 0x3f, 0xca, 0x4c, 0x97, 0x10, 0x40, 0x18, 0x35, 0xf2, 0x0e,
//    0xd4, 0x63, 0xaa, 0xe3, 0xd1, 0xd6, 0xf5, 0x3b, 0x16, 0xca, 0x2b, 0xb5,
//    0x12, 0xbd, 0x0c, 0xcf, 0x5a, 0x1e, 0xdc, 0xd6, 0x64, 0x0f, 0x20, 0x56,
//    0x1f, 0x4e, 0x7b, 0xe7, 0xdc, 0xa0, 0x35, 0xe2, 0xb5, 0x2e, 0x59, 0x25,
//    0xb9, 0x34, 0x5f, 0x44, 0x6f, 0xaa, 0xf0, 0xb9, 0xcc, 0xc2, 0x5a, 0x1c,
//    0xf2, 0x76, 0xfc, 0xfd, 0xe3, 0x37, 0x96, 0x31, 0x8a, 0xc7, 0xb8, 0x3c,
//    0x09, 0x2d, 0xbb, 0x4b, 0x06, 0xfe, 0x9f, 0xe8, 0x23, 0xcf, 0x9a, 0x56,
//    0x9d, 0x1b, 0xc0, 0x69, 0x18, 0xa0, 0x5b, 0xde, 0x9f, 0x65, 0xf0, 0x5c,
//    0xdf, 0xbd, 0x45, 0x6d, 0x02, 0xda, 0x41, 0x15, 0xc3, 0xd9, 0xe3, 0x41,
//    0xde, 0x98, 0xd3, 0xb9, 0xd2, 0x45, 0x36, 0xed, 0xb9, 0x4d, 0x9a, 0x9b,
//    0xcb, 0x0a, 0xce, 0x87, 0x70, 0x9d, 0x3f, 0x9a, 0x0c, 0xfe, 0x6d, 0x53,
//    0x43, 0x92, 0x45, 0xf2, 0x07, 0x53, 0xd2, 0x1d, 0xb5, 0x6a, 0x69, 0x61,
//    0x49, 0xe1, 0x2a, 0x7f, 0x9a, 0x8e, 0x25, 0x88, 0xd8, 0x10, 0x04, 0x68,
//    0x03, 0x7e, 0x89, 0x02, 0xff, 0x8f, 0xa1, 0x93, 0x7d, 0x04, 0x32, 0x7f,
//    0x30, 0x5a, 0x32, 0x0b, 0x6e, 0x67, 0x67, 0xaa, 0x25, 0x12, 0x5c, 0x4c,
//    0x2b, 0xa0, 0x48, 0xb5, 0xa8, 0xd5, 0x6f, 0xfc, 0xf2, 0x7d, 0xed, 0x90,
//    0x4e, 0xa5, 0x0c, 0x74, 0xd5, 0xd7, 0x1f, 0xb6, 0xe0, 0xb1, 0x04, 0x8a,
//    0xd0, 0x48, 0x0a, 0x77, 0x6e, 0xc6, 0xe0, 0xb8, 0xea, 0x22, 0x0b, 0xfb,
//    0x40, 0xa0, 0x63, 0xec, 0x62, 0x9c, 0x47, 0x1d, 0xf7, 0xe6, 0x1c, 0x50,
//    0xfe, 0xd9, 0x66, 0x43, 0xac, 0x16, 0x0a, 0xc3, 0x39, 0x78, 0x4b, 0xb8,
//    0xf8, 0xfc, 0xd4, 0x6d, 0xe7, 0xb0, 0xdd, 0x2d, 0x9f, 0x2d, 0x76, 0x62,
//    0xd0, 0xa1, 0x6c, 0x85, 0x3e, 0x39, 0x8f, 0xc9, 0x12, 0x4b, 0x16, 0x12,
//    0x2a, 0x2d, 0x2a, 0xe5, 0x99, 0x98, 0x13, 0xdb, 0xf1, 0x4d, 0x38, 0xe6,
//    0x11, 0x81, 0x9f, 0x99, 0xe2, 0xe6, 0xa8, 0x11, 0x95, 0x5d, 0x67, 0xd6,
//    0x0b, 0x8f, 0xa4, 0x7e, 0xc1, 0x6e, 0x0d, 0x06, 0x2e, 0x4a, 0xfa, 0xc7,
//    0x75, 0xfd, 0x1f, 0x91, 0xec, 0x4b, 0x3d, 0x89, 0x01, 0x6a, 0x49, 0x82,
//    0x97, 0x68, 0x93, 0x61, 0xd2, 0xc6, 0xef, 0x54, 0xea, 0x1f, 0x5f, 0xaf,
//    0xd3, 0xa8, 0x16, 0xa9, 0x99, 0xc6, 0xd5, 0xbb, 0x73, 0x5b, 0x46, 0x75,
//    0x3a, 0x0a, 0xc7, 0x36, 0x62, 0x07, 0x58, 0xe1, 0x67, 0x4d, 0xd0, 0x6d,
//    0x00, 0x0d, 0x60, 0xb4, 0x8b, 0xc0 };
//
//static const uint8_t ocsp_revoked_response_der[] = {
//    0x30, 0x82, 0x08, 0xc5, 0x0a, 0x01, 0x00, 0xa0, 0x82, 0x08, 0xbe, 0x30,
//    0x82, 0x08, 0xba, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
//    0x01, 0x01, 0x04, 0x82, 0x08, 0xab, 0x30, 0x82, 0x08, 0xa7, 0x30, 0x82,
//    0x01, 0x0d, 0xa1, 0x5d, 0x30, 0x5b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
//    0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06,
//    0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a,
//    0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31, 0x16,
//    0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d, 0x73, 0x32, 0x6e,
//    0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4f, 0x43, 0x53, 0x50, 0x31, 0x19,
//    0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x6f, 0x63, 0x73,
//    0x70, 0x2e, 0x73, 0x32, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x6f,
//    0x6d, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x30, 0x30, 0x36, 0x32, 0x32, 0x32,
//    0x31, 0x32, 0x32, 0x32, 0x35, 0x5a, 0x30, 0x76, 0x30, 0x74, 0x30, 0x3b,
//    0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04,
//    0x14, 0xde, 0x79, 0x32, 0xb3, 0x21, 0x7e, 0x48, 0xfb, 0x4e, 0x47, 0xae,
//    0x0b, 0x90, 0x07, 0xa5, 0x53, 0x76, 0xae, 0x44, 0xca, 0x04, 0x14, 0x12,
//    0xdf, 0x81, 0x75, 0x71, 0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b, 0x77,
//    0x3b, 0x9e, 0x33, 0x77, 0xf3, 0xf7, 0x6f, 0x02, 0x02, 0x77, 0x78, 0xa1,
//    0x11, 0x18, 0x0f, 0x32, 0x30, 0x31, 0x38, 0x30, 0x38, 0x31, 0x32, 0x30,
//    0x35, 0x33, 0x39, 0x32, 0x35, 0x5a, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x30,
//    0x30, 0x36, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x35, 0x5a, 0xa0,
//    0x11, 0x18, 0x0f, 0x32, 0x30, 0x38, 0x30, 0x30, 0x36, 0x30, 0x37, 0x32,
//    0x31, 0x32, 0x32, 0x32, 0x35, 0x5a, 0xa1, 0x23, 0x30, 0x21, 0x30, 0x1f,
//    0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x02, 0x04,
//    0x12, 0x04, 0x10, 0xde, 0xe9, 0xe8, 0x06, 0xbf, 0x49, 0xe4, 0x44, 0x83,
//    0x29, 0xc2, 0x04, 0x76, 0x89, 0x60, 0x9a, 0x30, 0x0d, 0x06, 0x09, 0x2a,
//    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82,
//    0x02, 0x01, 0x00, 0x9f, 0x99, 0x98, 0x1b, 0xde, 0xcf, 0x7b, 0x35, 0xa9,
//    0x4d, 0x4b, 0x04, 0x32, 0xff, 0x96, 0xe9, 0x83, 0x29, 0x0f, 0xa3, 0x20,
//    0xb0, 0x06, 0xf9, 0x56, 0x61, 0xae, 0x64, 0x2c, 0xa6, 0x09, 0x94, 0x05,
//    0x53, 0x6b, 0xaa, 0x0d, 0x83, 0x61, 0x65, 0xae, 0x53, 0xd9, 0x2b, 0x08,
//    0x86, 0x03, 0x9e, 0x41, 0x1c, 0x1b, 0x67, 0x6c, 0xed, 0x18, 0x0f, 0x15,
//    0x0a, 0x74, 0x24, 0x99, 0x32, 0xe6, 0xa8, 0x69, 0x94, 0x8f, 0x02, 0x89,
//    0xaa, 0x4f, 0x1e, 0x3c, 0x1d, 0xf0, 0x21, 0x05, 0x3b, 0xb9, 0x82, 0x80,
//    0x35, 0xef, 0x42, 0x7f, 0x29, 0x7f, 0xc7, 0x5f, 0xb8, 0x22, 0xe2, 0x44,
//    0xd6, 0xe6, 0x0c, 0x99, 0xf3, 0x88, 0x31, 0xff, 0x2a, 0xb8, 0x4b, 0x6d,
//    0xaa, 0xd2, 0x72, 0xa4, 0x9e, 0x9d, 0xfe, 0xe5, 0xfd, 0x95, 0xb7, 0xde,
//    0xbb, 0x79, 0xc9, 0xd0, 0xdb, 0x5c, 0x3a, 0xf8, 0xa5, 0xba, 0x29, 0xd8,
//    0x8f, 0xf2, 0xdc, 0x55, 0xee, 0xd5, 0x2f, 0xab, 0x42, 0x87, 0xc4, 0x1e,
//    0x7d, 0x0a, 0xd8, 0x21, 0xdc, 0xef, 0xe0, 0x27, 0x8a, 0xa5, 0x7a, 0x42,
//    0x37, 0x79, 0x74, 0x39, 0x73, 0x91, 0x44, 0x20, 0xc1, 0xec, 0xde, 0xd2,
//    0x3e, 0xcc, 0xb5, 0xc7, 0x18, 0x98, 0xfb, 0x2c, 0xcb, 0xaa, 0x01, 0xb9,
//    0xd6, 0xd0, 0x8a, 0x4c, 0x8b, 0xcd, 0x99, 0x4d, 0xe2, 0x3e, 0x0a, 0xab,
//    0x68, 0xcc, 0xfe, 0x0a, 0x36, 0x97, 0x51, 0x74, 0x35, 0xf4, 0x18, 0x44,
//    0xb1, 0xc5, 0x41, 0xc3, 0xa9, 0x63, 0x2f, 0xd2, 0x44, 0xad, 0x8a, 0xb9,
//    0x3e, 0x75, 0xfd, 0x5e, 0x59, 0x5c, 0x77, 0x3e, 0x3c, 0x1d, 0xec, 0x68,
//    0x79, 0x8f, 0x07, 0xcd, 0x01, 0xd4, 0xdc, 0xc4, 0xcf, 0xee, 0x90, 0x6a,
//    0x1e, 0xa0, 0xb3, 0x3a, 0x9e, 0xa1, 0x11, 0x60, 0xa6, 0xf6, 0x3b, 0xf1,
//    0x53, 0x13, 0x88, 0x76, 0xa8, 0xc1, 0xb2, 0x3f, 0xba, 0x39, 0xbb, 0xd2,
//    0x8a, 0x9f, 0xfa, 0xef, 0xa9, 0x6e, 0x04, 0xad, 0xe7, 0xdb, 0x50, 0xf6,
//    0x5f, 0x73, 0xe2, 0x05, 0x8e, 0xd9, 0x74, 0x7d, 0xd5, 0x73, 0xc5, 0xe4,
//    0xd5, 0xfa, 0x75, 0xea, 0x66, 0x0a, 0x2b, 0x17, 0x79, 0x8c, 0x30, 0x84,
//    0x85, 0x6e, 0xad, 0x4e, 0x2e, 0xe1, 0x6f, 0x2f, 0x7a, 0x07, 0x7e, 0xfb,
//    0xf9, 0xe6, 0x10, 0xdf, 0x6d, 0x39, 0xed, 0x31, 0x97, 0x08, 0xbb, 0x83,
//    0xb2, 0x72, 0xc2, 0x97, 0x2c, 0x5a, 0x40, 0x80, 0xad, 0x2c, 0x33, 0x6d,
//    0xbe, 0x0d, 0xac, 0xf0, 0xbd, 0xff, 0x2b, 0x9c, 0xb9, 0xec, 0xee, 0x51,
//    0x19, 0x51, 0x91, 0xa4, 0x2d, 0xbc, 0x74, 0xbb, 0x61, 0x5e, 0x93, 0x56,
//    0x8e, 0x40, 0x1b, 0x4b, 0x85, 0xaf, 0x12, 0x80, 0x7f, 0x7a, 0x22, 0x59,
//    0x93, 0x2d, 0x0c, 0xce, 0xa5, 0x98, 0x11, 0x46, 0x53, 0x4e, 0x2d, 0x79,
//    0x3d, 0x4d, 0x9f, 0x41, 0xa2, 0x81, 0xbe, 0xfc, 0x25, 0x00, 0x50, 0x9f,
//    0x32, 0xf9, 0xe8, 0x27, 0x0a, 0x91, 0x85, 0xd7, 0x48, 0xd8, 0xd8, 0xd7,
//    0x7b, 0xbc, 0x00, 0x3b, 0x12, 0x7f, 0xb4, 0x36, 0xd1, 0x9c, 0x57, 0x39,
//    0xfa, 0x85, 0x92, 0x85, 0x16, 0xff, 0x58, 0x10, 0xe4, 0xb7, 0x1a, 0xa1,
//    0xb9, 0x3d, 0x94, 0x59, 0x2b, 0xb8, 0x20, 0x26, 0x3c, 0xfd, 0xa6, 0x8e,
//    0x60, 0xa0, 0x9e, 0xb9, 0xb3, 0x77, 0x1b, 0x7d, 0xbc, 0xc4, 0x71, 0xf3,
//    0x2e, 0x3f, 0xeb, 0xe8, 0x3c, 0xcf, 0x3d, 0x19, 0xed, 0xb6, 0x0f, 0x36,
//    0x46, 0xae, 0x39, 0x99, 0x4b, 0xff, 0xfc, 0x14, 0x3a, 0x58, 0xf5, 0x82,
//    0x6f, 0x4f, 0x64, 0x9e, 0x62, 0x20, 0x13, 0x64, 0x4e, 0x58, 0xf3, 0x92,
//    0xf1, 0xed, 0x8f, 0x28, 0xfd, 0x77, 0x04, 0x8a, 0x34, 0xbb, 0xe6, 0x59,
//    0x95, 0xeb, 0x9f, 0xb1, 0xfe, 0x07, 0x64, 0x11, 0x05, 0xbe, 0xe8, 0xa0,
//    0x82, 0x05, 0x7e, 0x30, 0x82, 0x05, 0x7a, 0x30, 0x82, 0x05, 0x76, 0x30,
//    0x82, 0x03, 0x5e, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x77, 0x79,
//    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
//    0x0b, 0x05, 0x00, 0x30, 0x28, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
//    0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
//    0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06,
//    0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x30, 0x20, 0x17,
//    0x0d, 0x31, 0x37, 0x30, 0x39, 0x30, 0x35, 0x30, 0x35, 0x34, 0x33, 0x32,
//    0x32, 0x5a, 0x18, 0x0f, 0x32, 0x31, 0x31, 0x37, 0x30, 0x38, 0x31, 0x32,
//    0x30, 0x35, 0x34, 0x33, 0x32, 0x32, 0x5a, 0x30, 0x5b, 0x31, 0x0b, 0x30,
//    0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b,
//    0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31,
//    0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32,
//    0x6e, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d,
//    0x73, 0x32, 0x6e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4f, 0x43, 0x53,
//    0x50, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10,
//    0x6f, 0x63, 0x73, 0x70, 0x2e, 0x73, 0x32, 0x6e, 0x74, 0x65, 0x73, 0x74,
//    0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09,
//    0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
//    0x82, 0x02, 0x0f, 0x00, 0x30, 0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01,
//    0x00, 0xaf, 0x41, 0x47, 0xed, 0x6a, 0x7e, 0xb1, 0x31, 0x0d, 0xe6, 0x4c,
//    0xd8, 0x44, 0x75, 0xc5, 0x2e, 0x4f, 0xaa, 0xaf, 0x84, 0x4e, 0xc5, 0xe0,
//    0xf3, 0x74, 0xd0, 0x6f, 0x02, 0x87, 0xca, 0x51, 0x68, 0x18, 0x83, 0xdd,
//    0x4b, 0x7c, 0x8b, 0x31, 0xe8, 0x2d, 0x39, 0x09, 0x88, 0x0d, 0xa5, 0xbc,
//    0x79, 0x67, 0x77, 0x08, 0x0f, 0x8b, 0xc8, 0xa5, 0x8b, 0x6a, 0x7b, 0x68,
//    0xda, 0x05, 0x53, 0xbc, 0x35, 0x8f, 0xbb, 0x7f, 0x01, 0x26, 0xb9, 0x98,
//    0xe6, 0x7b, 0x5c, 0x2a, 0xe3, 0x1b, 0x53, 0x93, 0xb3, 0xfd, 0x2a, 0x2e,
//    0x38, 0xbc, 0x8f, 0xfc, 0xb1, 0x09, 0x93, 0x95, 0xec, 0xf2, 0x96, 0xbc,
//    0x44, 0x3c, 0x43, 0x45, 0xa5, 0xf5, 0xd5, 0x6c, 0x4b, 0xa9, 0xb2, 0x0c,
//    0xb6, 0xb8, 0x72, 0x56, 0x95, 0xad, 0xbc, 0x67, 0x39, 0x26, 0x86, 0x61,
//    0x13, 0x02, 0xf3, 0xcb, 0xe1, 0xca, 0x3b, 0x80, 0x24, 0xc9, 0x40, 0xbb,
//    0xbb, 0xb5, 0xd9, 0x75, 0x37, 0x2f, 0x68, 0x6a, 0x4a, 0x31, 0x02, 0xb8,
//    0xa7, 0x1a, 0xb5, 0x65, 0x2c, 0x71, 0x11, 0x46, 0xc5, 0x5a, 0xb5, 0x6f,
//    0x3d, 0x68, 0x20, 0xe5, 0xf2, 0x21, 0x5b, 0xf5, 0x5d, 0x64, 0xf0, 0x36,
//    0x9c, 0x8f, 0x8c, 0x1f, 0xde, 0x02, 0x1a, 0x30, 0xe2, 0x25, 0xee, 0x17,
//    0xc1, 0xfe, 0x5d, 0xd4, 0x96, 0xf5, 0x33, 0xf9, 0x22, 0xff, 0xfb, 0x4a,
//    0xe9, 0xeb, 0x5b, 0x72, 0xb9, 0x9d, 0x65, 0xfd, 0x99, 0xaa, 0x3a, 0xd5,
//    0x02, 0x65, 0xa5, 0x28, 0x5f, 0xc3, 0x8e, 0x91, 0x13, 0xbc, 0xd4, 0xa5,
//    0xce, 0x2c, 0x1c, 0xb9, 0xee, 0x96, 0x7f, 0xf5, 0xa4, 0xd4, 0xdd, 0xe0,
//    0x20, 0xd9, 0x24, 0x07, 0x54, 0xdf, 0x81, 0xe5, 0x2b, 0xfa, 0x45, 0xeb,
//    0x3c, 0x80, 0x07, 0x5d, 0x0f, 0xfc, 0xd6, 0xec, 0x4d, 0x18, 0x51, 0x68,
//    0x4f, 0x68, 0x98, 0x2f, 0x45, 0x41, 0x93, 0x47, 0x4f, 0xdb, 0xfa, 0x39,
//    0xec, 0x8a, 0x41, 0xb7, 0x0e, 0xcc, 0x6b, 0xe9, 0x64, 0xc2, 0x65, 0x60,
//    0x6b, 0x69, 0xb9, 0x96, 0x40, 0xee, 0xd2, 0xb4, 0x27, 0x87, 0x5b, 0x72,
//    0xb7, 0xf0, 0x0f, 0x7b, 0x03, 0xb3, 0x51, 0xbe, 0xb5, 0xae, 0x9b, 0xfd,
//    0xe0, 0xdc, 0x08, 0xf1, 0x44, 0xa0, 0xaa, 0x7a, 0xd7, 0xe8, 0x66, 0xb3,
//    0x2a, 0x3b, 0x16, 0xc8, 0x51, 0xda, 0x2c, 0xcd, 0x27, 0x8b, 0xf9, 0x5e,
//    0x88, 0x46, 0xce, 0x66, 0xd2, 0x2d, 0xd7, 0x2b, 0x44, 0x13, 0xcd, 0xd2,
//    0xa7, 0xe9, 0x99, 0x3c, 0x42, 0x46, 0xfd, 0x15, 0x00, 0x7d, 0x05, 0x04,
//    0x77, 0x2a, 0x89, 0xb5, 0xe3, 0x83, 0x26, 0x1e, 0xc7, 0x91, 0x73, 0xa7,
//    0x02, 0x6c, 0x62, 0x59, 0x05, 0x5c, 0x1f, 0xde, 0x47, 0x2a, 0x4c, 0xb5,
//    0x60, 0x86, 0xf2, 0x4d, 0x10, 0xfa, 0x9d, 0x58, 0x06, 0x8e, 0x68, 0x94,
//    0x0a, 0x57, 0xb9, 0x6a, 0x51, 0x0f, 0x9a, 0x4b, 0xb2, 0x4d, 0xf1, 0x23,
//    0x23, 0xd2, 0x09, 0xaa, 0x5a, 0xa4, 0xe8, 0x97, 0xd4, 0x31, 0xa3, 0xc6,
//    0x97, 0x90, 0xe2, 0x8c, 0x32, 0x0f, 0x26, 0x5f, 0xbb, 0xb4, 0x19, 0x23,
//    0xd4, 0xb7, 0xa9, 0x77, 0xb5, 0xca, 0xca, 0xbe, 0xdf, 0x47, 0xc5, 0x11,
//    0x1c, 0x8e, 0xf8, 0xdc, 0x5a, 0x47, 0xe8, 0x1a, 0x36, 0xfe, 0xd8, 0x1b,
//    0xdd, 0x2e, 0x9e, 0x21, 0x8a, 0x61, 0xfd, 0xa7, 0x1d, 0xea, 0xcb, 0xe5,
//    0x98, 0xb7, 0xf0, 0xa2, 0x69, 0xe8, 0xfc, 0xf1, 0xa3, 0x74, 0xed, 0x9b,
//    0x09, 0x2e, 0x1b, 0x2f, 0x71, 0x9d, 0xde, 0x1a, 0x59, 0x0a, 0x92, 0x12,
//    0x07, 0xf9, 0xc1, 0x3a, 0x53, 0x53, 0xf2, 0x94, 0x5d, 0x7e, 0x5d, 0x56,
//    0x89, 0x71, 0x96, 0xdb, 0x1b, 0x23, 0x4c, 0xea, 0xe6, 0x6a, 0x9e, 0xc5,
//    0xcf, 0x00, 0x99, 0x6e, 0x54, 0x73, 0x27, 0xa3, 0x0b, 0x02, 0x03, 0x01,
//    0x00, 0x01, 0xa3, 0x75, 0x30, 0x73, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d,
//    0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
//    0x04, 0x16, 0x04, 0x14, 0x24, 0x27, 0xf4, 0x6c, 0x82, 0x56, 0x02, 0x65,
//    0xea, 0xfa, 0x70, 0x9c, 0x75, 0xb9, 0x1b, 0x6f, 0x45, 0xeb, 0x76, 0x38,
//    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
//    0x14, 0x12, 0xdf, 0x81, 0x75, 0x71, 0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c,
//    0x2b, 0x77, 0x3b, 0x9e, 0x33, 0x77, 0xf3, 0xf7, 0x6f, 0x30, 0x0e, 0x06,
//    0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07,
//    0x80, 0x30, 0x16, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04,
//    0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
//    0x09, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
//    0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x8f, 0xbb, 0xc9,
//    0x53, 0x27, 0x88, 0x07, 0x3f, 0x27, 0xd5, 0x04, 0x2b, 0xb6, 0xe5, 0x86,
//    0x35, 0x4d, 0x01, 0xbc, 0xfe, 0xdc, 0x05, 0x69, 0x9d, 0xa0, 0xa6, 0x44,
//    0x80, 0x60, 0xf5, 0xc4, 0x09, 0xae, 0xb2, 0xc8, 0xbb, 0x09, 0xc2, 0xeb,
//    0x0c, 0xe2, 0x16, 0xfb, 0xe4, 0xa4, 0x63, 0x87, 0x97, 0x73, 0x92, 0xc2,
//    0xaa, 0x7d, 0xec, 0x4b, 0xe8, 0x93, 0xe5, 0x9e, 0x4a, 0x8a, 0x7c, 0x28,
//    0xd9, 0x4e, 0xcc, 0x07, 0x63, 0xda, 0x4d, 0xef, 0x75, 0xa8, 0x1e, 0x36,
//    0x55, 0x3b, 0xd9, 0xbd, 0x08, 0x3c, 0x5c, 0x59, 0xcd, 0xc6, 0xe4, 0xb0,
//    0x25, 0x3f, 0x67, 0x62, 0xc0, 0x3e, 0x03, 0x1f, 0x15, 0x73, 0x07, 0x30,
//    0x9f, 0x26, 0xa5, 0x3a, 0xcf, 0xb4, 0xb3, 0x43, 0xbb, 0xaf, 0x0e, 0x65,
//    0x7d, 0x03, 0x76, 0x27, 0x9e, 0x47, 0xe5, 0x81, 0x53, 0xd8, 0x78, 0x49,
//    0xcd, 0x64, 0xfe, 0xfa, 0x6f, 0x81, 0x96, 0xd4, 0x79, 0xfc, 0x35, 0x74,
//    0x58, 0xd8, 0x7b, 0x1e, 0xcb, 0xf6, 0xeb, 0x47, 0xda, 0xdb, 0x26, 0xa6,
//    0x99, 0x58, 0x3d, 0xcc, 0xa3, 0x37, 0x41, 0xd8, 0xe4, 0xb8, 0x88, 0x4a,
//    0x55, 0xb5, 0x8e, 0xfc, 0x95, 0xed, 0x78, 0xca, 0xcd, 0x29, 0x87, 0x0d,
//    0xdb, 0x09, 0x2f, 0x57, 0x7e, 0x41, 0x94, 0x85, 0x8d, 0x13, 0xd7, 0xa2,
//    0x7b, 0xf8, 0xaa, 0x4f, 0x4f, 0xe4, 0x0a, 0x52, 0x04, 0xc5, 0xeb, 0x65,
//    0x63, 0x04, 0x43, 0xee, 0xe2, 0x9a, 0x6a, 0xf8, 0xaa, 0xb0, 0xc4, 0xc4,
//    0xd3, 0xf6, 0x4b, 0xbd, 0x70, 0xca, 0x57, 0x89, 0xbd, 0x98, 0x8b, 0x9a,
//    0xb4, 0xb5, 0xdb, 0x94, 0x6d, 0x52, 0xa0, 0x2a, 0x03, 0x19, 0x61, 0xee,
//    0xb8, 0x03, 0xe7, 0x79, 0x9d, 0xb7, 0x52, 0xb7, 0x87, 0xc0, 0xc6, 0xc7,
//    0xec, 0xf8, 0x91, 0xc6, 0xc1, 0x87, 0xf7, 0x6e, 0xb8, 0x13, 0xd5, 0x74,
//    0x3f, 0x48, 0xb1, 0xcd, 0x19, 0x75, 0xcb, 0xb1, 0x34, 0x4a, 0x23, 0x07,
//    0xb3, 0x3e, 0xd1, 0x13, 0x74, 0x14, 0x7a, 0xf3, 0x80, 0x15, 0x9e, 0x87,
//    0x2d, 0x41, 0xef, 0x77, 0x0e, 0x58, 0x0c, 0xcf, 0xf8, 0xe3, 0x59, 0xce,
//    0xc3, 0xb6, 0xe4, 0x7b, 0x24, 0x47, 0x9a, 0x1a, 0xb6, 0x8c, 0xd4, 0xa9,
//    0x7f, 0x5c, 0x35, 0x74, 0x78, 0xf0, 0xa5, 0x70, 0xdc, 0x17, 0xe7, 0x4a,
//    0xec, 0x92, 0x54, 0x92, 0x64, 0xd8, 0xbd, 0xf8, 0x32, 0x2a, 0x07, 0x32,
//    0x90, 0x44, 0xd1, 0xdc, 0x91, 0x1f, 0x79, 0x68, 0xea, 0x88, 0x92, 0xc7,
//    0xb0, 0xc6, 0x1c, 0xed, 0x29, 0xc7, 0x68, 0x7f, 0x06, 0x43, 0x33, 0x25,
//    0x05, 0xd1, 0xe5, 0x2a, 0xb4, 0xd9, 0xfe, 0xc3, 0x01, 0x8d, 0x6a, 0x4e,
//    0x27, 0x49, 0xc4, 0x93, 0xe9, 0x0f, 0x5a, 0xc0, 0x20, 0x55, 0xe8, 0xa2,
//    0xbc, 0x42, 0x53, 0x5d, 0x45, 0x33, 0xb3, 0x08, 0xc6, 0xc6, 0x17, 0x2d,
//    0x5c, 0x19, 0x09, 0x13, 0xfd, 0x1f, 0x24, 0xe9, 0x3d, 0x48, 0xff, 0x50,
//    0x81, 0x50, 0xcc, 0x80, 0x42, 0xf3, 0x77, 0xb0, 0xff, 0xa9, 0xe7, 0x60,
//    0x70, 0x97, 0x5d, 0xb8, 0xcb, 0x78, 0x15, 0x50, 0x3b, 0x8b, 0x0a, 0x9a,
//    0x9a, 0xb0, 0xbe, 0x61, 0x5f, 0x0e, 0xfa, 0x1e, 0xd9, 0x10, 0x26, 0xb8,
//    0x03, 0xff, 0x50, 0x2b, 0x6c, 0x06, 0x56, 0xaf, 0x5e, 0xa4, 0x74, 0x51,
//    0xac, 0x7a, 0x6f, 0x81, 0x63, 0xf2, 0xd2, 0x74, 0xdd, 0x1f, 0x9d, 0x17,
//    0xc8, 0x90, 0x9e, 0xa4, 0x79, 0xc5, 0x5f, 0xd7, 0x12, 0xb2, 0x39, 0x9c,
//    0x06, 0x35, 0x45, 0x9a, 0xae, 0xa4, 0x14, 0x17, 0x67, 0xd7, 0x9f, 0xa2,
//    0x41, 0x86, 0x4d, 0xd4, 0x31, 0xd5, 0x1a, 0xbe, 0x8e, 0x5c, 0xa9, 0x0d,
//    0xdc, 0x8a, 0x0a, 0xa9, 0x65, 0x4a, 0xd5, 0x38, 0x22, 0xc8, 0x14, 0x5b,
//    0xb9, 0x5f, 0x50, 0x8b, 0x94 };
//
//static const uint8_t ocsp_response_wrong_signer_der[] = {
//    0x30, 0x82, 0x05, 0x79, 0x0a, 0x01, 0x00, 0xa0, 0x82, 0x05, 0x72, 0x30,
//    0x82, 0x05, 0x6e, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
//    0x01, 0x01, 0x04, 0x82, 0x05, 0x5f, 0x30, 0x82, 0x05, 0x5b, 0x30, 0x81,
//    0xef, 0xa1, 0x50, 0x30, 0x4e, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
//    0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
//    0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06,
//    0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31, 0x0c, 0x30,
//    0x0a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31,
//    0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0d, 0x73, 0x32,
//    0x6e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x18,
//    0x0f, 0x32, 0x30, 0x32, 0x30, 0x30, 0x36, 0x32, 0x32, 0x32, 0x31, 0x33,
//    0x37, 0x33, 0x34, 0x5a, 0x30, 0x65, 0x30, 0x63, 0x30, 0x3b, 0x30, 0x09,
//    0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14, 0xde,
//    0x79, 0x32, 0xb3, 0x21, 0x7e, 0x48, 0xfb, 0x4e, 0x47, 0xae, 0x0b, 0x90,
//    0x07, 0xa5, 0x53, 0x76, 0xae, 0x44, 0xca, 0x04, 0x14, 0x12, 0xdf, 0x81,
//    0x75, 0x71, 0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b, 0x77, 0x3b, 0x9e,
//    0x33, 0x77, 0xf3, 0xf7, 0x6f, 0x02, 0x02, 0x77, 0x78, 0x80, 0x00, 0x18,
//    0x0f, 0x32, 0x30, 0x32, 0x30, 0x30, 0x36, 0x32, 0x32, 0x32, 0x31, 0x33,
//    0x37, 0x33, 0x34, 0x5a, 0xa0, 0x11, 0x18, 0x0f, 0x32, 0x30, 0x38, 0x30,
//    0x30, 0x36, 0x30, 0x37, 0x32, 0x31, 0x33, 0x37, 0x33, 0x34, 0x5a, 0xa1,
//    0x23, 0x30, 0x21, 0x30, 0x1f, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05,
//    0x07, 0x30, 0x01, 0x02, 0x04, 0x12, 0x04, 0x10, 0x4b, 0x7a, 0xcf, 0x10,
//    0xec, 0xc7, 0x8f, 0x50, 0x8b, 0x2c, 0x79, 0xa5, 0x83, 0x3f, 0x40, 0x5b,
//    0x30, 0x09, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x01, 0x03,
//    0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x27, 0x35, 0x45, 0x86, 0x7a, 0xd7,
//    0xd1, 0xbd, 0x9c, 0x5f, 0x41, 0xf1, 0x0c, 0x17, 0xc3, 0xa6, 0xc3, 0x79,
//    0x6a, 0x73, 0xbb, 0xf9, 0x06, 0xe8, 0xe3, 0x19, 0x26, 0x93, 0x26, 0xcf,
//    0x3f, 0x2b, 0x02, 0x20, 0x1b, 0x9d, 0xf6, 0xb5, 0x2d, 0x57, 0xe5, 0x1d,
//    0x9f, 0xc8, 0x76, 0xe4, 0x1c, 0x65, 0x2c, 0xba, 0xa8, 0x96, 0x26, 0x81,
//    0x4a, 0xee, 0x95, 0x74, 0xde, 0x30, 0xc3, 0x5d, 0x08, 0xb5, 0x11, 0x43,
//    0xa0, 0x82, 0x04, 0x11, 0x30, 0x82, 0x04, 0x0d, 0x30, 0x82, 0x04, 0x09,
//    0x30, 0x82, 0x01, 0xf1, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03,
//    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
//    0x0b, 0x05, 0x00, 0x30, 0x28, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
//    0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
//    0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06,
//    0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x30, 0x20, 0x17,
//    0x0d, 0x31, 0x39, 0x30, 0x37, 0x31, 0x31, 0x32, 0x31, 0x34, 0x39, 0x30,
//    0x35, 0x5a, 0x18, 0x0f, 0x32, 0x31, 0x31, 0x39, 0x30, 0x36, 0x31, 0x37,
//    0x32, 0x31, 0x34, 0x39, 0x30, 0x35, 0x5a, 0x30, 0x4e, 0x31, 0x0b, 0x30,
//    0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b,
//    0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31,
//    0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32,
//    0x6e, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03,
//    0x73, 0x32, 0x6e, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03,
//    0x0c, 0x0d, 0x73, 0x32, 0x6e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43,
//    0x65, 0x72, 0x74, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48,
//    0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03,
//    0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x72, 0x9b, 0x98, 0xf3, 0x56, 0x4a,
//    0xa0, 0xf7, 0xed, 0x1d, 0x25, 0x28, 0x55, 0x0c, 0xcb, 0xd7, 0x2d, 0xe4,
//    0xfb, 0x72, 0x66, 0x04, 0x3b, 0xd1, 0xfc, 0xda, 0xa3, 0x4d, 0x0e, 0x8d,
//    0x2e, 0x44, 0xd9, 0x6c, 0x14, 0xc1, 0x25, 0x0e, 0xfb, 0xc8, 0x09, 0x21,
//    0x7b, 0x6b, 0x06, 0x5e, 0xf3, 0xe9, 0xcd, 0xcc, 0xc3, 0x0a, 0x35, 0x73,
//    0x9a, 0xbe, 0xde, 0xce, 0xc0, 0xa8, 0xec, 0xf1, 0xad, 0x89, 0xa3, 0x81,
//    0xe0, 0x30, 0x81, 0xdd, 0x30, 0x2c, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01,
//    0x86, 0xf8, 0x42, 0x01, 0x0d, 0x04, 0x1f, 0x16, 0x1d, 0x4f, 0x70, 0x65,
//    0x6e, 0x53, 0x53, 0x4c, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
//    0x65, 0x64, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
//    0x74, 0x65, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
//    0x14, 0x0b, 0xb5, 0x65, 0xe7, 0x3c, 0xd5, 0x77, 0x69, 0x7a, 0x0d, 0xf2,
//    0x97, 0x3f, 0xf6, 0xcb, 0x16, 0x05, 0x12, 0x1b, 0x96, 0x30, 0x1f, 0x06,
//    0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x12, 0xdf,
//    0x81, 0x75, 0x71, 0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b, 0x77, 0x3b,
//    0x9e, 0x33, 0x77, 0xf3, 0xf7, 0x6f, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d,
//    0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03,
//    0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x04, 0xb0, 0x30, 0x1d, 0x06,
//    0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06,
//    0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,
//    0x05, 0x07, 0x03, 0x02, 0x30, 0x33, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,
//    0x05, 0x07, 0x01, 0x01, 0x04, 0x27, 0x30, 0x25, 0x30, 0x23, 0x06, 0x08,
//    0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x17, 0x68, 0x74,
//    0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x73, 0x32,
//    0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x0d, 0x06,
//    0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
//    0x03, 0x82, 0x02, 0x01, 0x00, 0x59, 0x4b, 0xd9, 0xc6, 0xee, 0x12, 0x3e,
//    0x8c, 0xdb, 0x37, 0xb4, 0x0c, 0xcc, 0xc9, 0xaf, 0x96, 0xff, 0xab, 0x32,
//    0xf9, 0x54, 0x80, 0x2f, 0x2e, 0x40, 0x6b, 0x39, 0xbf, 0xf3, 0xa0, 0xa2,
//    0x96, 0xc0, 0x2b, 0x5a, 0xb2, 0xa5, 0x20, 0x7a, 0xb3, 0x84, 0x7e, 0x01,
//    0x16, 0x79, 0x90, 0xfd, 0xa4, 0xda, 0x89, 0x68, 0x52, 0x3b, 0x2e, 0xc4,
//    0x07, 0xf9, 0x2f, 0xb2, 0x8b, 0xc4, 0x49, 0x5a, 0xb9, 0x70, 0x21, 0x49,
//    0xeb, 0x55, 0xd6, 0x2a, 0xca, 0xb6, 0x6d, 0x5c, 0xee, 0xe8, 0xb9, 0x92,
//    0xaa, 0x4b, 0x46, 0xc9, 0x01, 0x73, 0x9d, 0x1e, 0xf3, 0x24, 0x1a, 0xf8,
//    0x9c, 0xd1, 0xbb, 0x9a, 0x7e, 0xbe, 0xcd, 0x68, 0xf1, 0x14, 0xae, 0x4f,
//    0x43, 0xa9, 0x1a, 0x2c, 0xf4, 0xd2, 0x8a, 0xae, 0xdb, 0x90, 0xa2, 0x7b,
//    0xd9, 0xd1, 0x69, 0x0f, 0x2e, 0xa3, 0xd2, 0x9e, 0x50, 0xd3, 0xa0, 0xe6,
//    0x09, 0xd6, 0x05, 0x71, 0xa0, 0xd1, 0xbb, 0x3e, 0xd4, 0x3b, 0xe4, 0x7d,
//    0xce, 0x38, 0x83, 0x03, 0x42, 0xc6, 0xbf, 0x83, 0x60, 0x28, 0xce, 0xa5,
//    0x75, 0xb7, 0xf7, 0x1b, 0x6e, 0x5b, 0xea, 0xff, 0x32, 0x61, 0xd3, 0x36,
//    0x1b, 0x83, 0x1f, 0x1f, 0xe9, 0x26, 0xe7, 0x23, 0x54, 0x82, 0xce, 0xcb,
//    0xb9, 0x59, 0x4c, 0xf6, 0x25, 0x76, 0xa4, 0x33, 0xb0, 0xef, 0xff, 0x23,
//    0x2f, 0x43, 0x9e, 0x90, 0x91, 0xf4, 0x88, 0xbe, 0x1a, 0xf9, 0x73, 0x03,
//    0x00, 0xa7, 0x86, 0x03, 0x8a, 0xe8, 0x62, 0x52, 0x84, 0x7f, 0x5c, 0x46,
//    0xbd, 0x5c, 0x12, 0x03, 0xc3, 0xe5, 0xeb, 0x72, 0x22, 0xa1, 0xd6, 0xec,
//    0x19, 0x9e, 0x63, 0x3e, 0x09, 0x98, 0x9b, 0x43, 0xaa, 0x79, 0x1e, 0x39,
//    0x6e, 0x71, 0x59, 0xc9, 0x51, 0x7a, 0x6a, 0xd1, 0xa7, 0xae, 0x8e, 0xd1,
//    0x4c, 0x6a, 0x8d, 0x0b, 0x63, 0x6a, 0x05, 0x92, 0xc1, 0x31, 0x6b, 0x9d,
//    0x7f, 0x46, 0x65, 0x3c, 0xd4, 0x3c, 0x8b, 0x42, 0x8f, 0x7f, 0xb4, 0x4a,
//    0xe8, 0x5f, 0xd4, 0xaf, 0x1f, 0x97, 0xa8, 0xd5, 0x7e, 0x4b, 0x86, 0x82,
//    0x10, 0x92, 0x09, 0x67, 0x14, 0x74, 0x3c, 0xdd, 0x82, 0x2c, 0x4c, 0x40,
//    0x7d, 0x53, 0x3d, 0x82, 0x89, 0x67, 0x11, 0x0b, 0x91, 0x13, 0x28, 0x37,
//    0xd6, 0x2d, 0x05, 0xa6, 0x04, 0x32, 0xc8, 0x66, 0xee, 0x2a, 0x2a, 0xad,
//    0xe3, 0x07, 0x04, 0x70, 0xff, 0xad, 0x9a, 0x8a, 0x60, 0x7a, 0x59, 0x91,
//    0x6f, 0x08, 0x98, 0xc5, 0x73, 0x96, 0xdd, 0x0b, 0x75, 0xf8, 0x3e, 0x39,
//    0x0a, 0xd9, 0xbd, 0x38, 0xa2, 0xbc, 0x7a, 0x55, 0x56, 0xdc, 0xd2, 0x26,
//    0xf2, 0x42, 0x5e, 0x23, 0x02, 0xa1, 0x33, 0x75, 0x11, 0x96, 0xd4, 0x27,
//    0x23, 0xfe, 0x10, 0x37, 0xb2, 0x38, 0x13, 0xc9, 0x73, 0x0c, 0xf8, 0x95,
//    0xbd, 0xce, 0xdd, 0x3e, 0x28, 0x17, 0x2e, 0xfe, 0x9d, 0x3f, 0x50, 0xdc,
//    0x88, 0x31, 0x1b, 0xf7, 0x9f, 0xcb, 0xbd, 0xa0, 0x6c, 0x92, 0x4a, 0x87,
//    0x16, 0xbe, 0xee, 0x85, 0x53, 0x41, 0xaf, 0xca, 0xa6, 0x4d, 0x55, 0xfe,
//    0xd5, 0x6b, 0xd2, 0xca, 0xd2, 0x45, 0x32, 0x19, 0x35, 0xeb, 0xac, 0xe1,
//    0x7e, 0x50, 0x49, 0xfa, 0x92, 0xf1, 0x2c, 0x5e, 0xbe, 0x7d, 0xa5, 0x73,
//    0x37, 0xb6, 0x14, 0x3a, 0x73, 0xa4, 0x0a, 0x21, 0x00, 0xbe, 0x58, 0x77,
//    0x91, 0x89, 0xc7, 0xb0, 0x8b, 0x0d, 0x68, 0xa4, 0x18, 0xba, 0x74, 0x01,
//    0x55, 0x01, 0x51, 0xb0, 0x38, 0xa0, 0x36, 0x6e, 0x22, 0xd5, 0x1b, 0x45,
//    0x47, 0xdc, 0xb0, 0xf3, 0x41, 0x13, 0x1a, 0x37, 0x7b, 0xb6, 0x31, 0x02,
//    0x23, 0xa1, 0xf4, 0x94, 0x56, 0x4f, 0x96, 0x93, 0x32, 0x87, 0xdd, 0x19,
//    0xda, 0x06, 0x76, 0xea, 0x02, 0xa6, 0x45, 0x11, 0x8e, 0x14, 0x84, 0x3d,
//    0xe8 };
//
//static const uint8_t ocsp_response_sha256_der[] = {
//    0x30, 0x82, 0x08, 0xd1, 0x0a, 0x01, 0x00, 0xa0, 0x82, 0x08, 0xca, 0x30,
//    0x82, 0x08, 0xc6, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
//    0x01, 0x01, 0x04, 0x82, 0x08, 0xb7, 0x30, 0x82, 0x08, 0xb3, 0x30, 0x82,
//    0x01, 0x19, 0xa1, 0x5d, 0x30, 0x5b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
//    0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06,
//    0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a,
//    0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31, 0x16,
//    0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d, 0x73, 0x32, 0x6e,
//    0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4f, 0x43, 0x53, 0x50, 0x31, 0x19,
//    0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x6f, 0x63, 0x73,
//    0x70, 0x2e, 0x73, 0x32, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x6f,
//    0x6d, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x31, 0x30, 0x35, 0x32, 0x37, 0x32,
//    0x30, 0x30, 0x32, 0x34, 0x33, 0x5a, 0x30, 0x81, 0x81, 0x30, 0x7f, 0x30,
//    0x57, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04,
//    0x02, 0x01, 0x05, 0x00, 0x04, 0x20, 0xbc, 0x69, 0x8a, 0xbb, 0x16, 0x21,
//    0x7a, 0x1e, 0x0e, 0xc0, 0xb5, 0x02, 0xc3, 0x6d, 0x35, 0x77, 0x8d, 0x64,
//    0x51, 0x8d, 0xd9, 0x46, 0x59, 0x97, 0x3f, 0x31, 0xc2, 0x93, 0xa9, 0x28,
//    0xf6, 0x71, 0x04, 0x20, 0xa6, 0xee, 0x69, 0x05, 0x46, 0xcd, 0x13, 0x98,
//    0x38, 0x93, 0xf6, 0x82, 0x6c, 0xfa, 0xd2, 0xba, 0xb0, 0x96, 0x62, 0xed,
//    0x60, 0xff, 0xd6, 0xc3, 0x7b, 0x6b, 0x7f, 0x60, 0x4c, 0x36, 0x78, 0xd7,
//    0x02, 0x02, 0x77, 0x78, 0x80, 0x00, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x31,
//    0x30, 0x35, 0x32, 0x37, 0x32, 0x30, 0x30, 0x32, 0x34, 0x33, 0x5a, 0xa0,
//    0x11, 0x18, 0x0f, 0x32, 0x30, 0x33, 0x31, 0x30, 0x35, 0x32, 0x35, 0x32,
//    0x30, 0x30, 0x32, 0x34, 0x33, 0x5a, 0xa1, 0x23, 0x30, 0x21, 0x30, 0x1f,
//    0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x02, 0x04,
//    0x12, 0x04, 0x10, 0x2a, 0x0f, 0xa7, 0x27, 0xd8, 0x3d, 0x89, 0x03, 0x9e,
//    0x18, 0x98, 0x03, 0xe8, 0x60, 0x2d, 0x08, 0x30, 0x0d, 0x06, 0x09, 0x2a,
//    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82,
//    0x02, 0x01, 0x00, 0x55, 0x04, 0xf2, 0xec, 0x5c, 0x3e, 0x53, 0x0a, 0xca,
//    0xb1, 0x29, 0xf3, 0x32, 0x12, 0x4a, 0xe0, 0x30, 0x7c, 0x2f, 0x83, 0xb9,
//    0x74, 0xbd, 0x83, 0xa3, 0x2d, 0x5f, 0xa4, 0x79, 0x31, 0x44, 0xb1, 0xcf,
//    0xf3, 0x2c, 0x51, 0x9a, 0xeb, 0xe6, 0xff, 0xb6, 0x4c, 0xed, 0xbc, 0x7a,
//    0x35, 0x7e, 0x89, 0x83, 0x2e, 0x50, 0x22, 0x4a, 0xaa, 0xf1, 0xf1, 0x49,
//    0xb1, 0x8a, 0x20, 0x89, 0x14, 0x1e, 0x31, 0xa6, 0x9d, 0xd4, 0x39, 0x66,
//    0x26, 0x3c, 0xa5, 0xc4, 0x39, 0x48, 0xbf, 0xc9, 0xbc, 0x2c, 0x22, 0x3c,
//    0x55, 0xc8, 0xc9, 0xc2, 0x01, 0x10, 0xb6, 0xc4, 0x61, 0xf8, 0x28, 0x8a,
//    0x30, 0x55, 0xc4, 0xc1, 0x6f, 0xb3, 0x26, 0xb9, 0x8a, 0xb3, 0xc0, 0x16,
//    0x8b, 0xfe, 0x31, 0xbb, 0x1d, 0x66, 0xc5, 0xdf, 0xc8, 0x18, 0x70, 0x9a,
//    0xfc, 0x35, 0x53, 0xe5, 0xa4, 0x82, 0x97, 0x41, 0x74, 0xea, 0x0b, 0xe9,
//    0x79, 0x8c, 0x9b, 0x13, 0x25, 0xa1, 0xd0, 0xd3, 0xd6, 0x45, 0x76, 0x0f,
//    0xf8, 0x51, 0xa8, 0xbc, 0x57, 0x50, 0x6e, 0x6a, 0x17, 0x0c, 0x9e, 0xff,
//    0xae, 0x8f, 0xe7, 0x37, 0x6f, 0xd3, 0x8f, 0x7f, 0x47, 0x3f, 0x27, 0x22,
//    0xee, 0x6e, 0x5e, 0xa5, 0x26, 0xeb, 0x9e, 0x46, 0xbd, 0x56, 0x08, 0xc4,
//    0x38, 0x72, 0x02, 0xc0, 0x09, 0xd1, 0x8f, 0x55, 0x9e, 0xaa, 0x1a, 0x0f,
//    0x41, 0x6b, 0xc0, 0x26, 0xfa, 0xfc, 0x4d, 0xc6, 0x13, 0xdd, 0x2a, 0x32,
//    0xee, 0x64, 0x71, 0x33, 0x2b, 0x92, 0xa3, 0xb6, 0x24, 0x26, 0xd6, 0x93,
//    0xb1, 0xda, 0x0a, 0xfb, 0xf7, 0x0e, 0xa4, 0xd6, 0xb0, 0xd7, 0xcc, 0xba,
//    0x6a, 0xbe, 0x9d, 0xd1, 0x24, 0x2e, 0x82, 0x38, 0x2a, 0x63, 0xa7, 0x71,
//    0x12, 0x8a, 0xd7, 0x3a, 0x0d, 0xe7, 0x93, 0x8a, 0xf3, 0x91, 0x61, 0x8d,
//    0x52, 0x2d, 0x6a, 0x5c, 0x9d, 0x42, 0x67, 0xcc, 0x2e, 0xa1, 0x20, 0x81,
//    0x27, 0xc3, 0xa0, 0x33, 0xbb, 0xd9, 0x99, 0xcb, 0x15, 0x0b, 0x2e, 0x8e,
//    0xfb, 0x7a, 0x3f, 0x63, 0x2f, 0xb8, 0x59, 0xde, 0xab, 0x57, 0xaa, 0x7b,
//    0x73, 0xe7, 0xeb, 0xa6, 0xd1, 0x0f, 0xe2, 0x35, 0x9f, 0x3e, 0x2d, 0xce,
//    0x09, 0xf0, 0x40, 0x03, 0x72, 0x6f, 0x48, 0x1a, 0xde, 0x6d, 0x74, 0xda,
//    0x1f, 0x0b, 0x96, 0xa5, 0x68, 0x02, 0x8a, 0x27, 0x22, 0x3d, 0x86, 0x48,
//    0x6d, 0xee, 0x5c, 0xac, 0x55, 0x85, 0x77, 0x68, 0xbe, 0x15, 0xe4, 0x2e,
//    0x63, 0x41, 0xa5, 0x11, 0xb7, 0x13, 0xf8, 0x11, 0xee, 0x92, 0xd3, 0x2b,
//    0x5e, 0xf3, 0x76, 0x8c, 0xe0, 0x9d, 0x2f, 0x4d, 0x90, 0x62, 0xb8, 0x41,
//    0xdc, 0x05, 0x94, 0x78, 0x7e, 0xfa, 0x34, 0x45, 0x94, 0x01, 0x0c, 0xb8,
//    0x71, 0x57, 0x39, 0xd7, 0x6f, 0x3b, 0x90, 0x82, 0x47, 0x6b, 0x24, 0xe9,
//    0x96, 0xbe, 0x1c, 0x3a, 0x59, 0x5e, 0x18, 0x4f, 0xce, 0x0d, 0x73, 0xd3,
//    0x37, 0xb9, 0x2f, 0x88, 0x1e, 0x15, 0xf0, 0x36, 0x28, 0x90, 0x24, 0x92,
//    0xbc, 0x00, 0xd0, 0x8a, 0x28, 0x74, 0xe1, 0x01, 0xa3, 0x6f, 0xf5, 0x51,
//    0xd4, 0x14, 0x6b, 0x7b, 0x3d, 0x09, 0xb0, 0xe9, 0xae, 0x94, 0x98, 0x3a,
//    0x81, 0xd6, 0xc7, 0x73, 0x90, 0xd3, 0x0a, 0x2d, 0x13, 0xdd, 0xcf, 0xad,
//    0x01, 0xe0, 0x53, 0xf4, 0x3b, 0xcf, 0xc8, 0x69, 0xbe, 0x59, 0x55, 0x22,
//    0x82, 0xf4, 0xf9, 0x83, 0x7c, 0x9a, 0x99, 0xed, 0x17, 0x99, 0x00, 0x99,
//    0xb3, 0x87, 0xeb, 0xc5, 0x09, 0x5c, 0x31, 0x0a, 0xd8, 0x1b, 0x81, 0x6d,
//    0xe3, 0xb0, 0x61, 0x69, 0x20, 0xd5, 0x72, 0x79, 0x6b, 0xcc, 0x84, 0xb2,
//    0x1e, 0x42, 0xda, 0x37, 0x2d, 0xbb, 0x5f, 0xdf, 0x1c, 0xca, 0xc1, 0x0c,
//    0x2f, 0x7c, 0xde, 0x75, 0xbd, 0xd5, 0x9a, 0x03, 0x08, 0xd8, 0x53, 0xa0,
//    0x82, 0x05, 0x7e, 0x30, 0x82, 0x05, 0x7a, 0x30, 0x82, 0x05, 0x76, 0x30,
//    0x82, 0x03, 0x5e, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x77, 0x79,
//    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
//    0x0b, 0x05, 0x00, 0x30, 0x28, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
//    0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
//    0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06,
//    0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x30, 0x20, 0x17,
//    0x0d, 0x31, 0x37, 0x30, 0x39, 0x30, 0x35, 0x30, 0x35, 0x34, 0x33, 0x32,
//    0x32, 0x5a, 0x18, 0x0f, 0x32, 0x31, 0x31, 0x37, 0x30, 0x38, 0x31, 0x32,
//    0x30, 0x35, 0x34, 0x33, 0x32, 0x32, 0x5a, 0x30, 0x5b, 0x31, 0x0b, 0x30,
//    0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b,
//    0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31,
//    0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32,
//    0x6e, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d,
//    0x73, 0x32, 0x6e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4f, 0x43, 0x53,
//    0x50, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10,
//    0x6f, 0x63, 0x73, 0x70, 0x2e, 0x73, 0x32, 0x6e, 0x74, 0x65, 0x73, 0x74,
//    0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09,
//    0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
//    0x82, 0x02, 0x0f, 0x00, 0x30, 0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01,
//    0x00, 0xaf, 0x41, 0x47, 0xed, 0x6a, 0x7e, 0xb1, 0x31, 0x0d, 0xe6, 0x4c,
//    0xd8, 0x44, 0x75, 0xc5, 0x2e, 0x4f, 0xaa, 0xaf, 0x84, 0x4e, 0xc5, 0xe0,
//    0xf3, 0x74, 0xd0, 0x6f, 0x02, 0x87, 0xca, 0x51, 0x68, 0x18, 0x83, 0xdd,
//    0x4b, 0x7c, 0x8b, 0x31, 0xe8, 0x2d, 0x39, 0x09, 0x88, 0x0d, 0xa5, 0xbc,
//    0x79, 0x67, 0x77, 0x08, 0x0f, 0x8b, 0xc8, 0xa5, 0x8b, 0x6a, 0x7b, 0x68,
//    0xda, 0x05, 0x53, 0xbc, 0x35, 0x8f, 0xbb, 0x7f, 0x01, 0x26, 0xb9, 0x98,
//    0xe6, 0x7b, 0x5c, 0x2a, 0xe3, 0x1b, 0x53, 0x93, 0xb3, 0xfd, 0x2a, 0x2e,
//    0x38, 0xbc, 0x8f, 0xfc, 0xb1, 0x09, 0x93, 0x95, 0xec, 0xf2, 0x96, 0xbc,
//    0x44, 0x3c, 0x43, 0x45, 0xa5, 0xf5, 0xd5, 0x6c, 0x4b, 0xa9, 0xb2, 0x0c,
//    0xb6, 0xb8, 0x72, 0x56, 0x95, 0xad, 0xbc, 0x67, 0x39, 0x26, 0x86, 0x61,
//    0x13, 0x02, 0xf3, 0xcb, 0xe1, 0xca, 0x3b, 0x80, 0x24, 0xc9, 0x40, 0xbb,
//    0xbb, 0xb5, 0xd9, 0x75, 0x37, 0x2f, 0x68, 0x6a, 0x4a, 0x31, 0x02, 0xb8,
//    0xa7, 0x1a, 0xb5, 0x65, 0x2c, 0x71, 0x11, 0x46, 0xc5, 0x5a, 0xb5, 0x6f,
//    0x3d, 0x68, 0x20, 0xe5, 0xf2, 0x21, 0x5b, 0xf5, 0x5d, 0x64, 0xf0, 0x36,
//    0x9c, 0x8f, 0x8c, 0x1f, 0xde, 0x02, 0x1a, 0x30, 0xe2, 0x25, 0xee, 0x17,
//    0xc1, 0xfe, 0x5d, 0xd4, 0x96, 0xf5, 0x33, 0xf9, 0x22, 0xff, 0xfb, 0x4a,
//    0xe9, 0xeb, 0x5b, 0x72, 0xb9, 0x9d, 0x65, 0xfd, 0x99, 0xaa, 0x3a, 0xd5,
//    0x02, 0x65, 0xa5, 0x28, 0x5f, 0xc3, 0x8e, 0x91, 0x13, 0xbc, 0xd4, 0xa5,
//    0xce, 0x2c, 0x1c, 0xb9, 0xee, 0x96, 0x7f, 0xf5, 0xa4, 0xd4, 0xdd, 0xe0,
//    0x20, 0xd9, 0x24, 0x07, 0x54, 0xdf, 0x81, 0xe5, 0x2b, 0xfa, 0x45, 0xeb,
//    0x3c, 0x80, 0x07, 0x5d, 0x0f, 0xfc, 0xd6, 0xec, 0x4d, 0x18, 0x51, 0x68,
//    0x4f, 0x68, 0x98, 0x2f, 0x45, 0x41, 0x93, 0x47, 0x4f, 0xdb, 0xfa, 0x39,
//    0xec, 0x8a, 0x41, 0xb7, 0x0e, 0xcc, 0x6b, 0xe9, 0x64, 0xc2, 0x65, 0x60,
//    0x6b, 0x69, 0xb9, 0x96, 0x40, 0xee, 0xd2, 0xb4, 0x27, 0x87, 0x5b, 0x72,
//    0xb7, 0xf0, 0x0f, 0x7b, 0x03, 0xb3, 0x51, 0xbe, 0xb5, 0xae, 0x9b, 0xfd,
//    0xe0, 0xdc, 0x08, 0xf1, 0x44, 0xa0, 0xaa, 0x7a, 0xd7, 0xe8, 0x66, 0xb3,
//    0x2a, 0x3b, 0x16, 0xc8, 0x51, 0xda, 0x2c, 0xcd, 0x27, 0x8b, 0xf9, 0x5e,
//    0x88, 0x46, 0xce, 0x66, 0xd2, 0x2d, 0xd7, 0x2b, 0x44, 0x13, 0xcd, 0xd2,
//    0xa7, 0xe9, 0x99, 0x3c, 0x42, 0x46, 0xfd, 0x15, 0x00, 0x7d, 0x05, 0x04,
//    0x77, 0x2a, 0x89, 0xb5, 0xe3, 0x83, 0x26, 0x1e, 0xc7, 0x91, 0x73, 0xa7,
//    0x02, 0x6c, 0x62, 0x59, 0x05, 0x5c, 0x1f, 0xde, 0x47, 0x2a, 0x4c, 0xb5,
//    0x60, 0x86, 0xf2, 0x4d, 0x10, 0xfa, 0x9d, 0x58, 0x06, 0x8e, 0x68, 0x94,
//    0x0a, 0x57, 0xb9, 0x6a, 0x51, 0x0f, 0x9a, 0x4b, 0xb2, 0x4d, 0xf1, 0x23,
//    0x23, 0xd2, 0x09, 0xaa, 0x5a, 0xa4, 0xe8, 0x97, 0xd4, 0x31, 0xa3, 0xc6,
//    0x97, 0x90, 0xe2, 0x8c, 0x32, 0x0f, 0x26, 0x5f, 0xbb, 0xb4, 0x19, 0x23,
//    0xd4, 0xb7, 0xa9, 0x77, 0xb5, 0xca, 0xca, 0xbe, 0xdf, 0x47, 0xc5, 0x11,
//    0x1c, 0x8e, 0xf8, 0xdc, 0x5a, 0x47, 0xe8, 0x1a, 0x36, 0xfe, 0xd8, 0x1b,
//    0xdd, 0x2e, 0x9e, 0x21, 0x8a, 0x61, 0xfd, 0xa7, 0x1d, 0xea, 0xcb, 0xe5,
//    0x98, 0xb7, 0xf0, 0xa2, 0x69, 0xe8, 0xfc, 0xf1, 0xa3, 0x74, 0xed, 0x9b,
//    0x09, 0x2e, 0x1b, 0x2f, 0x71, 0x9d, 0xde, 0x1a, 0x59, 0x0a, 0x92, 0x12,
//    0x07, 0xf9, 0xc1, 0x3a, 0x53, 0x53, 0xf2, 0x94, 0x5d, 0x7e, 0x5d, 0x56,
//    0x89, 0x71, 0x96, 0xdb, 0x1b, 0x23, 0x4c, 0xea, 0xe6, 0x6a, 0x9e, 0xc5,
//    0xcf, 0x00, 0x99, 0x6e, 0x54, 0x73, 0x27, 0xa3, 0x0b, 0x02, 0x03, 0x01,
//    0x00, 0x01, 0xa3, 0x75, 0x30, 0x73, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d,
//    0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
//    0x04, 0x16, 0x04, 0x14, 0x24, 0x27, 0xf4, 0x6c, 0x82, 0x56, 0x02, 0x65,
//    0xea, 0xfa, 0x70, 0x9c, 0x75, 0xb9, 0x1b, 0x6f, 0x45, 0xeb, 0x76, 0x38,
//    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
//    0x14, 0x12, 0xdf, 0x81, 0x75, 0x71, 0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c,
//    0x2b, 0x77, 0x3b, 0x9e, 0x33, 0x77, 0xf3, 0xf7, 0x6f, 0x30, 0x0e, 0x06,
//    0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07,
//    0x80, 0x30, 0x16, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04,
//    0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
//    0x09, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
//    0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x8f, 0xbb, 0xc9,
//    0x53, 0x27, 0x88, 0x07, 0x3f, 0x27, 0xd5, 0x04, 0x2b, 0xb6, 0xe5, 0x86,
//    0x35, 0x4d, 0x01, 0xbc, 0xfe, 0xdc, 0x05, 0x69, 0x9d, 0xa0, 0xa6, 0x44,
//    0x80, 0x60, 0xf5, 0xc4, 0x09, 0xae, 0xb2, 0xc8, 0xbb, 0x09, 0xc2, 0xeb,
//    0x0c, 0xe2, 0x16, 0xfb, 0xe4, 0xa4, 0x63, 0x87, 0x97, 0x73, 0x92, 0xc2,
//    0xaa, 0x7d, 0xec, 0x4b, 0xe8, 0x93, 0xe5, 0x9e, 0x4a, 0x8a, 0x7c, 0x28,
//    0xd9, 0x4e, 0xcc, 0x07, 0x63, 0xda, 0x4d, 0xef, 0x75, 0xa8, 0x1e, 0x36,
//    0x55, 0x3b, 0xd9, 0xbd, 0x08, 0x3c, 0x5c, 0x59, 0xcd, 0xc6, 0xe4, 0xb0,
//    0x25, 0x3f, 0x67, 0x62, 0xc0, 0x3e, 0x03, 0x1f, 0x15, 0x73, 0x07, 0x30,
//    0x9f, 0x26, 0xa5, 0x3a, 0xcf, 0xb4, 0xb3, 0x43, 0xbb, 0xaf, 0x0e, 0x65,
//    0x7d, 0x03, 0x76, 0x27, 0x9e, 0x47, 0xe5, 0x81, 0x53, 0xd8, 0x78, 0x49,
//    0xcd, 0x64, 0xfe, 0xfa, 0x6f, 0x81, 0x96, 0xd4, 0x79, 0xfc, 0x35, 0x74,
//    0x58, 0xd8, 0x7b, 0x1e, 0xcb, 0xf6, 0xeb, 0x47, 0xda, 0xdb, 0x26, 0xa6,
//    0x99, 0x58, 0x3d, 0xcc, 0xa3, 0x37, 0x41, 0xd8, 0xe4, 0xb8, 0x88, 0x4a,
//    0x55, 0xb5, 0x8e, 0xfc, 0x95, 0xed, 0x78, 0xca, 0xcd, 0x29, 0x87, 0x0d,
//    0xdb, 0x09, 0x2f, 0x57, 0x7e, 0x41, 0x94, 0x85, 0x8d, 0x13, 0xd7, 0xa2,
//    0x7b, 0xf8, 0xaa, 0x4f, 0x4f, 0xe4, 0x0a, 0x52, 0x04, 0xc5, 0xeb, 0x65,
//    0x63, 0x04, 0x43, 0xee, 0xe2, 0x9a, 0x6a, 0xf8, 0xaa, 0xb0, 0xc4, 0xc4,
//    0xd3, 0xf6, 0x4b, 0xbd, 0x70, 0xca, 0x57, 0x89, 0xbd, 0x98, 0x8b, 0x9a,
//    0xb4, 0xb5, 0xdb, 0x94, 0x6d, 0x52, 0xa0, 0x2a, 0x03, 0x19, 0x61, 0xee,
//    0xb8, 0x03, 0xe7, 0x79, 0x9d, 0xb7, 0x52, 0xb7, 0x87, 0xc0, 0xc6, 0xc7,
//    0xec, 0xf8, 0x91, 0xc6, 0xc1, 0x87, 0xf7, 0x6e, 0xb8, 0x13, 0xd5, 0x74,
//    0x3f, 0x48, 0xb1, 0xcd, 0x19, 0x75, 0xcb, 0xb1, 0x34, 0x4a, 0x23, 0x07,
//    0xb3, 0x3e, 0xd1, 0x13, 0x74, 0x14, 0x7a, 0xf3, 0x80, 0x15, 0x9e, 0x87,
//    0x2d, 0x41, 0xef, 0x77, 0x0e, 0x58, 0x0c, 0xcf, 0xf8, 0xe3, 0x59, 0xce,
//    0xc3, 0xb6, 0xe4, 0x7b, 0x24, 0x47, 0x9a, 0x1a, 0xb6, 0x8c, 0xd4, 0xa9,
//    0x7f, 0x5c, 0x35, 0x74, 0x78, 0xf0, 0xa5, 0x70, 0xdc, 0x17, 0xe7, 0x4a,
//    0xec, 0x92, 0x54, 0x92, 0x64, 0xd8, 0xbd, 0xf8, 0x32, 0x2a, 0x07, 0x32,
//    0x90, 0x44, 0xd1, 0xdc, 0x91, 0x1f, 0x79, 0x68, 0xea, 0x88, 0x92, 0xc7,
//    0xb0, 0xc6, 0x1c, 0xed, 0x29, 0xc7, 0x68, 0x7f, 0x06, 0x43, 0x33, 0x25,
//    0x05, 0xd1, 0xe5, 0x2a, 0xb4, 0xd9, 0xfe, 0xc3, 0x01, 0x8d, 0x6a, 0x4e,
//    0x27, 0x49, 0xc4, 0x93, 0xe9, 0x0f, 0x5a, 0xc0, 0x20, 0x55, 0xe8, 0xa2,
//    0xbc, 0x42, 0x53, 0x5d, 0x45, 0x33, 0xb3, 0x08, 0xc6, 0xc6, 0x17, 0x2d,
//    0x5c, 0x19, 0x09, 0x13, 0xfd, 0x1f, 0x24, 0xe9, 0x3d, 0x48, 0xff, 0x50,
//    0x81, 0x50, 0xcc, 0x80, 0x42, 0xf3, 0x77, 0xb0, 0xff, 0xa9, 0xe7, 0x60,
//    0x70, 0x97, 0x5d, 0xb8, 0xcb, 0x78, 0x15, 0x50, 0x3b, 0x8b, 0x0a, 0x9a,
//    0x9a, 0xb0, 0xbe, 0x61, 0x5f, 0x0e, 0xfa, 0x1e, 0xd9, 0x10, 0x26, 0xb8,
//    0x03, 0xff, 0x50, 0x2b, 0x6c, 0x06, 0x56, 0xaf, 0x5e, 0xa4, 0x74, 0x51,
//    0xac, 0x7a, 0x6f, 0x81, 0x63, 0xf2, 0xd2, 0x74, 0xdd, 0x1f, 0x9d, 0x17,
//    0xc8, 0x90, 0x9e, 0xa4, 0x79, 0xc5, 0x5f, 0xd7, 0x12, 0xb2, 0x39, 0x9c,
//    0x06, 0x35, 0x45, 0x9a, 0xae, 0xa4, 0x14, 0x17, 0x67, 0xd7, 0x9f, 0xa2,
//    0x41, 0x86, 0x4d, 0xd4, 0x31, 0xd5, 0x1a, 0xbe, 0x8e, 0x5c, 0xa9, 0x0d,
//    0xdc, 0x8a, 0x0a, 0xa9, 0x65, 0x4a, 0xd5, 0x38, 0x22, 0xc8, 0x14, 0x5b,
//    0xb9, 0x5f, 0x50, 0x8b, 0x94};
//
//static const uint8_t ocsp_revoked_response_sha256_der[] = {
//    0x30, 0x82, 0x08, 0xe3, 0x0a, 0x01, 0x00, 0xa0, 0x82, 0x08, 0xdc, 0x30,
//    0x82, 0x08, 0xd8, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
//    0x01, 0x01, 0x04, 0x82, 0x08, 0xc9, 0x30, 0x82, 0x08, 0xc5, 0x30, 0x82,
//    0x01, 0x2b, 0xa1, 0x5d, 0x30, 0x5b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
//    0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06,
//    0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a,
//    0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31, 0x16,
//    0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d, 0x73, 0x32, 0x6e,
//    0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4f, 0x43, 0x53, 0x50, 0x31, 0x19,
//    0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x6f, 0x63, 0x73,
//    0x70, 0x2e, 0x73, 0x32, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x6f,
//    0x6d, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x31, 0x30, 0x35, 0x32, 0x37, 0x32,
//    0x31, 0x35, 0x36, 0x32, 0x31, 0x5a, 0x30, 0x81, 0x93, 0x30, 0x81, 0x90,
//    0x30, 0x57, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03,
//    0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20, 0xbc, 0x69, 0x8a, 0xbb, 0x16,
//    0x21, 0x7a, 0x1e, 0x0e, 0xc0, 0xb5, 0x02, 0xc3, 0x6d, 0x35, 0x77, 0x8d,
//    0x64, 0x51, 0x8d, 0xd9, 0x46, 0x59, 0x97, 0x3f, 0x31, 0xc2, 0x93, 0xa9,
//    0x28, 0xf6, 0x71, 0x04, 0x20, 0xa6, 0xee, 0x69, 0x05, 0x46, 0xcd, 0x13,
//    0x98, 0x38, 0x93, 0xf6, 0x82, 0x6c, 0xfa, 0xd2, 0xba, 0xb0, 0x96, 0x62,
//    0xed, 0x60, 0xff, 0xd6, 0xc3, 0x7b, 0x6b, 0x7f, 0x60, 0x4c, 0x36, 0x78,
//    0xd7, 0x02, 0x02, 0x77, 0x78, 0xa1, 0x11, 0x18, 0x0f, 0x32, 0x30, 0x31,
//    0x38, 0x30, 0x38, 0x31, 0x32, 0x30, 0x35, 0x33, 0x39, 0x32, 0x35, 0x5a,
//    0x18, 0x0f, 0x32, 0x30, 0x32, 0x31, 0x30, 0x35, 0x32, 0x37, 0x32, 0x31,
//    0x35, 0x36, 0x32, 0x31, 0x5a, 0xa0, 0x11, 0x18, 0x0f, 0x32, 0x30, 0x33,
//    0x31, 0x30, 0x35, 0x32, 0x35, 0x32, 0x31, 0x35, 0x36, 0x32, 0x31, 0x5a,
//    0xa1, 0x23, 0x30, 0x21, 0x30, 0x1f, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05,
//    0x05, 0x07, 0x30, 0x01, 0x02, 0x04, 0x12, 0x04, 0x10, 0xe5, 0x90, 0x5f,
//    0xb2, 0x1e, 0xe2, 0xe4, 0xd0, 0xde, 0x0c, 0x59, 0xc5, 0x8d, 0x7c, 0x79,
//    0xa2, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
//    0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x89, 0x20, 0x5d,
//    0xc2, 0x87, 0x75, 0x23, 0x75, 0x78, 0x0f, 0x93, 0x89, 0xba, 0xe1, 0x2f,
//    0x09, 0x7a, 0x7a, 0x39, 0xeb, 0x45, 0x45, 0xf5, 0x67, 0x7c, 0xeb, 0xa9,
//    0xbc, 0x72, 0x3f, 0x7c, 0xc2, 0x72, 0xe7, 0x49, 0xff, 0x20, 0x5c, 0xeb,
//    0x13, 0xf0, 0x53, 0xe3, 0x0c, 0x1f, 0xee, 0xa9, 0x5d, 0x22, 0x6d, 0xc9,
//    0xd9, 0x9d, 0x36, 0x1b, 0xe8, 0xb3, 0xa8, 0x06, 0xb4, 0x0c, 0x4d, 0xce,
//    0x71, 0x2d, 0x45, 0x4a, 0x5b, 0x43, 0xe8, 0xa7, 0xeb, 0x11, 0xf1, 0x25,
//    0x06, 0x89, 0xc3, 0xcd, 0x42, 0x1b, 0xe2, 0xc4, 0x2c, 0x1e, 0x02, 0x82,
//    0x55, 0xd8, 0x0b, 0x4a, 0x61, 0xa0, 0x54, 0xfb, 0x67, 0x64, 0xf0, 0xc3,
//    0xde, 0x91, 0xf4, 0xca, 0x02, 0x2f, 0x77, 0x13, 0x75, 0x09, 0xf3, 0x90,
//    0x1b, 0xd7, 0x0a, 0xe9, 0xba, 0x1a, 0xb0, 0xeb, 0x9b, 0xbf, 0x65, 0xb4,
//    0xe5, 0x95, 0x6d, 0x40, 0x8c, 0xec, 0x74, 0xdc, 0x9d, 0x08, 0x5d, 0xa0,
//    0x2c, 0xab, 0x3f, 0xdf, 0xc5, 0x1b, 0xa0, 0x3d, 0xf0, 0xf5, 0xdb, 0x87,
//    0x24, 0xc8, 0x7d, 0xee, 0x62, 0x22, 0xe8, 0x36, 0x90, 0x2d, 0x55, 0x01,
//    0x24, 0xef, 0xf4, 0x3a, 0x5a, 0xcc, 0x92, 0x87, 0x79, 0xb8, 0x1e, 0x55,
//    0x72, 0x4a, 0x31, 0x8f, 0x02, 0x50, 0xea, 0xe2, 0x0c, 0x61, 0x7d, 0x82,
//    0x8a, 0x55, 0x3b, 0xbf, 0x63, 0x03, 0x4a, 0x8d, 0x13, 0xf7, 0x16, 0x12,
//    0x25, 0x8f, 0x4d, 0xf5, 0xc5, 0x4c, 0xf6, 0x07, 0xc8, 0xd0, 0x46, 0xf0,
//    0xb0, 0x2c, 0x70, 0xe1, 0xf5, 0x59, 0xc1, 0x72, 0x5d, 0x9c, 0xf8, 0xaa,
//    0xfd, 0xf9, 0x55, 0xf8, 0x15, 0xc6, 0x49, 0x6d, 0x59, 0x89, 0xc4, 0x33,
//    0x71, 0xb2, 0x89, 0x58, 0xe2, 0x00, 0xdb, 0x5b, 0x6d, 0x25, 0x8f, 0x8d,
//    0x51, 0x2e, 0xa7, 0x45, 0xee, 0xfd, 0xea, 0xf6, 0x01, 0xeb, 0x15, 0x95,
//    0x4b, 0x28, 0xfa, 0x9a, 0x94, 0x2f, 0xa2, 0xab, 0x25, 0xb7, 0x6c, 0x28,
//    0xc4, 0x9d, 0xd9, 0xf6, 0x4a, 0x65, 0x91, 0x7f, 0xf7, 0x42, 0x85, 0x4e,
//    0x71, 0x8c, 0xcc, 0x95, 0x4a, 0xfa, 0x09, 0x44, 0xd8, 0xd0, 0x53, 0xd0,
//    0x3b, 0x4b, 0xff, 0xa7, 0xa0, 0x67, 0xf9, 0x25, 0xe2, 0x67, 0xc5, 0x6f,
//    0x6a, 0xc8, 0x30, 0xfa, 0xed, 0x7c, 0xfe, 0x46, 0x99, 0x12, 0x9d, 0x09,
//    0x1f, 0x06, 0x5e, 0x31, 0x74, 0x87, 0xcf, 0x21, 0xc1, 0x50, 0x70, 0xf8,
//    0x8e, 0x96, 0xce, 0x50, 0x9c, 0x0d, 0xa8, 0xcb, 0x0e, 0xdc, 0x7a, 0xd2,
//    0x40, 0x60, 0x1b, 0x46, 0xfa, 0x19, 0xcd, 0x89, 0x54, 0xb1, 0x77, 0x7f,
//    0x06, 0xbd, 0x17, 0xbd, 0x16, 0x73, 0x44, 0x3a, 0x56, 0x77, 0xf9, 0xd3,
//    0xab, 0x0c, 0x6a, 0x01, 0x6a, 0x7e, 0xe3, 0xad, 0x91, 0xfe, 0x7e, 0x6b,
//    0x23, 0x96, 0xde, 0xea, 0xd9, 0xc9, 0x59, 0x5b, 0x30, 0xd4, 0xd4, 0x60,
//    0x37, 0x2a, 0xeb, 0xed, 0xb8, 0x92, 0x59, 0xc3, 0x75, 0xc1, 0x13, 0x40,
//    0xf8, 0x9f, 0x61, 0x7d, 0xef, 0xe3, 0xdf, 0x73, 0xf9, 0x77, 0xb9, 0x82,
//    0xb0, 0xe2, 0x32, 0xc2, 0x7f, 0x76, 0xfd, 0x23, 0x55, 0x77, 0xf2, 0x35,
//    0xbc, 0xfe, 0x7e, 0xff, 0x55, 0x0c, 0x24, 0xe6, 0x5e, 0x21, 0xf5, 0xba,
//    0xe7, 0x94, 0xf6, 0xf0, 0x96, 0xb6, 0x26, 0xdf, 0x33, 0xab, 0x21, 0x96,
//    0x90, 0xb1, 0x6a, 0x8b, 0x50, 0xa3, 0x53, 0x05, 0x5b, 0x9f, 0x2e, 0x49,
//    0xac, 0xe5, 0x1c, 0xd8, 0x8b, 0x40, 0xbb, 0x9f, 0x6e, 0x69, 0x07, 0x72,
//    0xa6, 0xb4, 0x1d, 0x43, 0x00, 0x3d, 0x65, 0x1d, 0x06, 0xb6, 0x01, 0x80,
//    0xb4, 0xb1, 0x75, 0x93, 0x8c, 0xc0, 0x6b, 0xc1, 0x1d, 0xd1, 0x3e, 0x3c,
//    0xda, 0x3a, 0xc2, 0x17, 0x78, 0x8b, 0x10, 0xe9, 0x91, 0x47, 0xb4, 0xf9,
//    0x43, 0x8f, 0xac, 0x78, 0xa5, 0xa0, 0x82, 0x05, 0x7e, 0x30, 0x82, 0x05,
//    0x7a, 0x30, 0x82, 0x05, 0x76, 0x30, 0x82, 0x03, 0x5e, 0xa0, 0x03, 0x02,
//    0x01, 0x02, 0x02, 0x02, 0x77, 0x79, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
//    0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x28, 0x31,
//    0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53,
//    0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57,
//    0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03,
//    0x73, 0x32, 0x6e, 0x30, 0x20, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x39, 0x30,
//    0x35, 0x30, 0x35, 0x34, 0x33, 0x32, 0x32, 0x5a, 0x18, 0x0f, 0x32, 0x31,
//    0x31, 0x37, 0x30, 0x38, 0x31, 0x32, 0x30, 0x35, 0x34, 0x33, 0x32, 0x32,
//    0x5a, 0x30, 0x5b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
//    0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
//    0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55,
//    0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31, 0x16, 0x30, 0x14, 0x06,
//    0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d, 0x73, 0x32, 0x6e, 0x20, 0x54, 0x65,
//    0x73, 0x74, 0x20, 0x4f, 0x43, 0x53, 0x50, 0x31, 0x19, 0x30, 0x17, 0x06,
//    0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x73,
//    0x32, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82,
//    0x02, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
//    0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00, 0x30, 0x82,
//    0x02, 0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xaf, 0x41, 0x47, 0xed, 0x6a,
//    0x7e, 0xb1, 0x31, 0x0d, 0xe6, 0x4c, 0xd8, 0x44, 0x75, 0xc5, 0x2e, 0x4f,
//    0xaa, 0xaf, 0x84, 0x4e, 0xc5, 0xe0, 0xf3, 0x74, 0xd0, 0x6f, 0x02, 0x87,
//    0xca, 0x51, 0x68, 0x18, 0x83, 0xdd, 0x4b, 0x7c, 0x8b, 0x31, 0xe8, 0x2d,
//    0x39, 0x09, 0x88, 0x0d, 0xa5, 0xbc, 0x79, 0x67, 0x77, 0x08, 0x0f, 0x8b,
//    0xc8, 0xa5, 0x8b, 0x6a, 0x7b, 0x68, 0xda, 0x05, 0x53, 0xbc, 0x35, 0x8f,
//    0xbb, 0x7f, 0x01, 0x26, 0xb9, 0x98, 0xe6, 0x7b, 0x5c, 0x2a, 0xe3, 0x1b,
//    0x53, 0x93, 0xb3, 0xfd, 0x2a, 0x2e, 0x38, 0xbc, 0x8f, 0xfc, 0xb1, 0x09,
//    0x93, 0x95, 0xec, 0xf2, 0x96, 0xbc, 0x44, 0x3c, 0x43, 0x45, 0xa5, 0xf5,
//    0xd5, 0x6c, 0x4b, 0xa9, 0xb2, 0x0c, 0xb6, 0xb8, 0x72, 0x56, 0x95, 0xad,
//    0xbc, 0x67, 0x39, 0x26, 0x86, 0x61, 0x13, 0x02, 0xf3, 0xcb, 0xe1, 0xca,
//    0x3b, 0x80, 0x24, 0xc9, 0x40, 0xbb, 0xbb, 0xb5, 0xd9, 0x75, 0x37, 0x2f,
//    0x68, 0x6a, 0x4a, 0x31, 0x02, 0xb8, 0xa7, 0x1a, 0xb5, 0x65, 0x2c, 0x71,
//    0x11, 0x46, 0xc5, 0x5a, 0xb5, 0x6f, 0x3d, 0x68, 0x20, 0xe5, 0xf2, 0x21,
//    0x5b, 0xf5, 0x5d, 0x64, 0xf0, 0x36, 0x9c, 0x8f, 0x8c, 0x1f, 0xde, 0x02,
//    0x1a, 0x30, 0xe2, 0x25, 0xee, 0x17, 0xc1, 0xfe, 0x5d, 0xd4, 0x96, 0xf5,
//    0x33, 0xf9, 0x22, 0xff, 0xfb, 0x4a, 0xe9, 0xeb, 0x5b, 0x72, 0xb9, 0x9d,
//    0x65, 0xfd, 0x99, 0xaa, 0x3a, 0xd5, 0x02, 0x65, 0xa5, 0x28, 0x5f, 0xc3,
//    0x8e, 0x91, 0x13, 0xbc, 0xd4, 0xa5, 0xce, 0x2c, 0x1c, 0xb9, 0xee, 0x96,
//    0x7f, 0xf5, 0xa4, 0xd4, 0xdd, 0xe0, 0x20, 0xd9, 0x24, 0x07, 0x54, 0xdf,
//    0x81, 0xe5, 0x2b, 0xfa, 0x45, 0xeb, 0x3c, 0x80, 0x07, 0x5d, 0x0f, 0xfc,
//    0xd6, 0xec, 0x4d, 0x18, 0x51, 0x68, 0x4f, 0x68, 0x98, 0x2f, 0x45, 0x41,
//    0x93, 0x47, 0x4f, 0xdb, 0xfa, 0x39, 0xec, 0x8a, 0x41, 0xb7, 0x0e, 0xcc,
//    0x6b, 0xe9, 0x64, 0xc2, 0x65, 0x60, 0x6b, 0x69, 0xb9, 0x96, 0x40, 0xee,
//    0xd2, 0xb4, 0x27, 0x87, 0x5b, 0x72, 0xb7, 0xf0, 0x0f, 0x7b, 0x03, 0xb3,
//    0x51, 0xbe, 0xb5, 0xae, 0x9b, 0xfd, 0xe0, 0xdc, 0x08, 0xf1, 0x44, 0xa0,
//    0xaa, 0x7a, 0xd7, 0xe8, 0x66, 0xb3, 0x2a, 0x3b, 0x16, 0xc8, 0x51, 0xda,
//    0x2c, 0xcd, 0x27, 0x8b, 0xf9, 0x5e, 0x88, 0x46, 0xce, 0x66, 0xd2, 0x2d,
//    0xd7, 0x2b, 0x44, 0x13, 0xcd, 0xd2, 0xa7, 0xe9, 0x99, 0x3c, 0x42, 0x46,
//    0xfd, 0x15, 0x00, 0x7d, 0x05, 0x04, 0x77, 0x2a, 0x89, 0xb5, 0xe3, 0x83,
//    0x26, 0x1e, 0xc7, 0x91, 0x73, 0xa7, 0x02, 0x6c, 0x62, 0x59, 0x05, 0x5c,
//    0x1f, 0xde, 0x47, 0x2a, 0x4c, 0xb5, 0x60, 0x86, 0xf2, 0x4d, 0x10, 0xfa,
//    0x9d, 0x58, 0x06, 0x8e, 0x68, 0x94, 0x0a, 0x57, 0xb9, 0x6a, 0x51, 0x0f,
//    0x9a, 0x4b, 0xb2, 0x4d, 0xf1, 0x23, 0x23, 0xd2, 0x09, 0xaa, 0x5a, 0xa4,
//    0xe8, 0x97, 0xd4, 0x31, 0xa3, 0xc6, 0x97, 0x90, 0xe2, 0x8c, 0x32, 0x0f,
//    0x26, 0x5f, 0xbb, 0xb4, 0x19, 0x23, 0xd4, 0xb7, 0xa9, 0x77, 0xb5, 0xca,
//    0xca, 0xbe, 0xdf, 0x47, 0xc5, 0x11, 0x1c, 0x8e, 0xf8, 0xdc, 0x5a, 0x47,
//    0xe8, 0x1a, 0x36, 0xfe, 0xd8, 0x1b, 0xdd, 0x2e, 0x9e, 0x21, 0x8a, 0x61,
//    0xfd, 0xa7, 0x1d, 0xea, 0xcb, 0xe5, 0x98, 0xb7, 0xf0, 0xa2, 0x69, 0xe8,
//    0xfc, 0xf1, 0xa3, 0x74, 0xed, 0x9b, 0x09, 0x2e, 0x1b, 0x2f, 0x71, 0x9d,
//    0xde, 0x1a, 0x59, 0x0a, 0x92, 0x12, 0x07, 0xf9, 0xc1, 0x3a, 0x53, 0x53,
//    0xf2, 0x94, 0x5d, 0x7e, 0x5d, 0x56, 0x89, 0x71, 0x96, 0xdb, 0x1b, 0x23,
//    0x4c, 0xea, 0xe6, 0x6a, 0x9e, 0xc5, 0xcf, 0x00, 0x99, 0x6e, 0x54, 0x73,
//    0x27, 0xa3, 0x0b, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x75, 0x30, 0x73,
//    0x30, 0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30,
//    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x24, 0x27,
//    0xf4, 0x6c, 0x82, 0x56, 0x02, 0x65, 0xea, 0xfa, 0x70, 0x9c, 0x75, 0xb9,
//    0x1b, 0x6f, 0x45, 0xeb, 0x76, 0x38, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d,
//    0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x12, 0xdf, 0x81, 0x75, 0x71,
//    0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b, 0x77, 0x3b, 0x9e, 0x33, 0x77,
//    0xf3, 0xf7, 0x6f, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01,
//    0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x16, 0x06, 0x03, 0x55,
//    0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b,
//    0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x09, 0x30, 0x0d, 0x06, 0x09, 0x2a,
//    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82,
//    0x02, 0x01, 0x00, 0x8f, 0xbb, 0xc9, 0x53, 0x27, 0x88, 0x07, 0x3f, 0x27,
//    0xd5, 0x04, 0x2b, 0xb6, 0xe5, 0x86, 0x35, 0x4d, 0x01, 0xbc, 0xfe, 0xdc,
//    0x05, 0x69, 0x9d, 0xa0, 0xa6, 0x44, 0x80, 0x60, 0xf5, 0xc4, 0x09, 0xae,
//    0xb2, 0xc8, 0xbb, 0x09, 0xc2, 0xeb, 0x0c, 0xe2, 0x16, 0xfb, 0xe4, 0xa4,
//    0x63, 0x87, 0x97, 0x73, 0x92, 0xc2, 0xaa, 0x7d, 0xec, 0x4b, 0xe8, 0x93,
//    0xe5, 0x9e, 0x4a, 0x8a, 0x7c, 0x28, 0xd9, 0x4e, 0xcc, 0x07, 0x63, 0xda,
//    0x4d, 0xef, 0x75, 0xa8, 0x1e, 0x36, 0x55, 0x3b, 0xd9, 0xbd, 0x08, 0x3c,
//    0x5c, 0x59, 0xcd, 0xc6, 0xe4, 0xb0, 0x25, 0x3f, 0x67, 0x62, 0xc0, 0x3e,
//    0x03, 0x1f, 0x15, 0x73, 0x07, 0x30, 0x9f, 0x26, 0xa5, 0x3a, 0xcf, 0xb4,
//    0xb3, 0x43, 0xbb, 0xaf, 0x0e, 0x65, 0x7d, 0x03, 0x76, 0x27, 0x9e, 0x47,
//    0xe5, 0x81, 0x53, 0xd8, 0x78, 0x49, 0xcd, 0x64, 0xfe, 0xfa, 0x6f, 0x81,
//    0x96, 0xd4, 0x79, 0xfc, 0x35, 0x74, 0x58, 0xd8, 0x7b, 0x1e, 0xcb, 0xf6,
//    0xeb, 0x47, 0xda, 0xdb, 0x26, 0xa6, 0x99, 0x58, 0x3d, 0xcc, 0xa3, 0x37,
//    0x41, 0xd8, 0xe4, 0xb8, 0x88, 0x4a, 0x55, 0xb5, 0x8e, 0xfc, 0x95, 0xed,
//    0x78, 0xca, 0xcd, 0x29, 0x87, 0x0d, 0xdb, 0x09, 0x2f, 0x57, 0x7e, 0x41,
//    0x94, 0x85, 0x8d, 0x13, 0xd7, 0xa2, 0x7b, 0xf8, 0xaa, 0x4f, 0x4f, 0xe4,
//    0x0a, 0x52, 0x04, 0xc5, 0xeb, 0x65, 0x63, 0x04, 0x43, 0xee, 0xe2, 0x9a,
//    0x6a, 0xf8, 0xaa, 0xb0, 0xc4, 0xc4, 0xd3, 0xf6, 0x4b, 0xbd, 0x70, 0xca,
//    0x57, 0x89, 0xbd, 0x98, 0x8b, 0x9a, 0xb4, 0xb5, 0xdb, 0x94, 0x6d, 0x52,
//    0xa0, 0x2a, 0x03, 0x19, 0x61, 0xee, 0xb8, 0x03, 0xe7, 0x79, 0x9d, 0xb7,
//    0x52, 0xb7, 0x87, 0xc0, 0xc6, 0xc7, 0xec, 0xf8, 0x91, 0xc6, 0xc1, 0x87,
//    0xf7, 0x6e, 0xb8, 0x13, 0xd5, 0x74, 0x3f, 0x48, 0xb1, 0xcd, 0x19, 0x75,
//    0xcb, 0xb1, 0x34, 0x4a, 0x23, 0x07, 0xb3, 0x3e, 0xd1, 0x13, 0x74, 0x14,
//    0x7a, 0xf3, 0x80, 0x15, 0x9e, 0x87, 0x2d, 0x41, 0xef, 0x77, 0x0e, 0x58,
//    0x0c, 0xcf, 0xf8, 0xe3, 0x59, 0xce, 0xc3, 0xb6, 0xe4, 0x7b, 0x24, 0x47,
//    0x9a, 0x1a, 0xb6, 0x8c, 0xd4, 0xa9, 0x7f, 0x5c, 0x35, 0x74, 0x78, 0xf0,
//    0xa5, 0x70, 0xdc, 0x17, 0xe7, 0x4a, 0xec, 0x92, 0x54, 0x92, 0x64, 0xd8,
//    0xbd, 0xf8, 0x32, 0x2a, 0x07, 0x32, 0x90, 0x44, 0xd1, 0xdc, 0x91, 0x1f,
//    0x79, 0x68, 0xea, 0x88, 0x92, 0xc7, 0xb0, 0xc6, 0x1c, 0xed, 0x29, 0xc7,
//    0x68, 0x7f, 0x06, 0x43, 0x33, 0x25, 0x05, 0xd1, 0xe5, 0x2a, 0xb4, 0xd9,
//    0xfe, 0xc3, 0x01, 0x8d, 0x6a, 0x4e, 0x27, 0x49, 0xc4, 0x93, 0xe9, 0x0f,
//    0x5a, 0xc0, 0x20, 0x55, 0xe8, 0xa2, 0xbc, 0x42, 0x53, 0x5d, 0x45, 0x33,
//    0xb3, 0x08, 0xc6, 0xc6, 0x17, 0x2d, 0x5c, 0x19, 0x09, 0x13, 0xfd, 0x1f,
//    0x24, 0xe9, 0x3d, 0x48, 0xff, 0x50, 0x81, 0x50, 0xcc, 0x80, 0x42, 0xf3,
//    0x77, 0xb0, 0xff, 0xa9, 0xe7, 0x60, 0x70, 0x97, 0x5d, 0xb8, 0xcb, 0x78,
//    0x15, 0x50, 0x3b, 0x8b, 0x0a, 0x9a, 0x9a, 0xb0, 0xbe, 0x61, 0x5f, 0x0e,
//    0xfa, 0x1e, 0xd9, 0x10, 0x26, 0xb8, 0x03, 0xff, 0x50, 0x2b, 0x6c, 0x06,
//    0x56, 0xaf, 0x5e, 0xa4, 0x74, 0x51, 0xac, 0x7a, 0x6f, 0x81, 0x63, 0xf2,
//    0xd2, 0x74, 0xdd, 0x1f, 0x9d, 0x17, 0xc8, 0x90, 0x9e, 0xa4, 0x79, 0xc5,
//    0x5f, 0xd7, 0x12, 0xb2, 0x39, 0x9c, 0x06, 0x35, 0x45, 0x9a, 0xae, 0xa4,
//    0x14, 0x17, 0x67, 0xd7, 0x9f, 0xa2, 0x41, 0x86, 0x4d, 0xd4, 0x31, 0xd5,
//    0x1a, 0xbe, 0x8e, 0x5c, 0xa9, 0x0d, 0xdc, 0x8a, 0x0a, 0xa9, 0x65, 0x4a,
//    0xd5, 0x38, 0x22, 0xc8, 0x14, 0x5b, 0xb9, 0x5f, 0x50, 0x8b, 0x94 };
//
//static const uint8_t ocsp_response_wrong_signer_sha256_der[] = {
//    0x30, 0x82, 0x05, 0x99, 0x0a, 0x01, 0x00, 0xa0, 0x82, 0x05, 0x92, 0x30,
//    0x82, 0x05, 0x8e, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
//    0x01, 0x01, 0x04, 0x82, 0x05, 0x7f, 0x30, 0x82, 0x05, 0x7b, 0x30, 0x82,
//    0x01, 0x0c, 0xa1, 0x50, 0x30, 0x4e, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
//    0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06,
//    0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a,
//    0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31, 0x0c,
//    0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03, 0x73, 0x32, 0x6e,
//    0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0d, 0x73,
//    0x32, 0x6e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74,
//    0x18, 0x0f, 0x32, 0x30, 0x32, 0x31, 0x30, 0x35, 0x32, 0x37, 0x32, 0x33,
//    0x30, 0x33, 0x32, 0x35, 0x5a, 0x30, 0x81, 0x81, 0x30, 0x7f, 0x30, 0x57,
//    0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02,
//    0x01, 0x05, 0x00, 0x04, 0x20, 0xbc, 0x69, 0x8a, 0xbb, 0x16, 0x21, 0x7a,
//    0x1e, 0x0e, 0xc0, 0xb5, 0x02, 0xc3, 0x6d, 0x35, 0x77, 0x8d, 0x64, 0x51,
//    0x8d, 0xd9, 0x46, 0x59, 0x97, 0x3f, 0x31, 0xc2, 0x93, 0xa9, 0x28, 0xf6,
//    0x71, 0x04, 0x20, 0xa6, 0xee, 0x69, 0x05, 0x46, 0xcd, 0x13, 0x98, 0x38,
//    0x93, 0xf6, 0x82, 0x6c, 0xfa, 0xd2, 0xba, 0xb0, 0x96, 0x62, 0xed, 0x60,
//    0xff, 0xd6, 0xc3, 0x7b, 0x6b, 0x7f, 0x60, 0x4c, 0x36, 0x78, 0xd7, 0x02,
//    0x02, 0x77, 0x78, 0x80, 0x00, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x31, 0x30,
//    0x35, 0x32, 0x37, 0x32, 0x33, 0x30, 0x33, 0x32, 0x35, 0x5a, 0xa0, 0x11,
//    0x18, 0x0f, 0x32, 0x30, 0x33, 0x31, 0x30, 0x35, 0x32, 0x35, 0x32, 0x33,
//    0x30, 0x33, 0x32, 0x35, 0x5a, 0xa1, 0x23, 0x30, 0x21, 0x30, 0x1f, 0x06,
//    0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x02, 0x04, 0x12,
//    0x04, 0x10, 0x89, 0xcc, 0x1e, 0x90, 0xf7, 0x7b, 0x52, 0xa8, 0x0d, 0x3f,
//    0x02, 0x1d, 0x58, 0x4a, 0x27, 0x9a, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86,
//    0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02,
//    0x20, 0x26, 0xff, 0x2c, 0xa5, 0xe8, 0xdb, 0xa6, 0xcf, 0xf0, 0x5a, 0x22,
//    0xdb, 0x58, 0x42, 0x79, 0x8d, 0x9d, 0x98, 0xa2, 0x96, 0x2a, 0x91, 0xa8,
//    0x0d, 0x4e, 0xe1, 0x8f, 0x3e, 0xbc, 0xc4, 0x1e, 0xdc, 0x02, 0x21, 0x00,
//    0xc2, 0xca, 0x31, 0x12, 0x81, 0xb4, 0xd9, 0x32, 0xcb, 0xa3, 0xbc, 0xf9,
//    0x79, 0xa4, 0x92, 0x30, 0x5c, 0xe6, 0x67, 0xdb, 0xed, 0xb1, 0xca, 0x51,
//    0xc9, 0x71, 0x4a, 0x46, 0x5e, 0xdd, 0x45, 0x95, 0xa0, 0x82, 0x04, 0x11,
//    0x30, 0x82, 0x04, 0x0d, 0x30, 0x82, 0x04, 0x09, 0x30, 0x82, 0x01, 0xf1,
//    0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x30, 0x0d, 0x06, 0x09,
//    0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30,
//    0x28, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02,
//    0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c,
//    0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a,
//    0x0c, 0x03, 0x73, 0x32, 0x6e, 0x30, 0x20, 0x17, 0x0d, 0x31, 0x39, 0x30,
//    0x37, 0x31, 0x31, 0x32, 0x31, 0x34, 0x39, 0x30, 0x35, 0x5a, 0x18, 0x0f,
//    0x32, 0x31, 0x31, 0x39, 0x30, 0x36, 0x31, 0x37, 0x32, 0x31, 0x34, 0x39,
//    0x30, 0x35, 0x5a, 0x30, 0x4e, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
//    0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
//    0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06,
//    0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31, 0x0c, 0x30,
//    0x0a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31,
//    0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0d, 0x73, 0x32,
//    0x6e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x30,
//    0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01,
//    0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,
//    0x00, 0x04, 0x72, 0x9b, 0x98, 0xf3, 0x56, 0x4a, 0xa0, 0xf7, 0xed, 0x1d,
//    0x25, 0x28, 0x55, 0x0c, 0xcb, 0xd7, 0x2d, 0xe4, 0xfb, 0x72, 0x66, 0x04,
//    0x3b, 0xd1, 0xfc, 0xda, 0xa3, 0x4d, 0x0e, 0x8d, 0x2e, 0x44, 0xd9, 0x6c,
//    0x14, 0xc1, 0x25, 0x0e, 0xfb, 0xc8, 0x09, 0x21, 0x7b, 0x6b, 0x06, 0x5e,
//    0xf3, 0xe9, 0xcd, 0xcc, 0xc3, 0x0a, 0x35, 0x73, 0x9a, 0xbe, 0xde, 0xce,
//    0xc0, 0xa8, 0xec, 0xf1, 0xad, 0x89, 0xa3, 0x81, 0xe0, 0x30, 0x81, 0xdd,
//    0x30, 0x2c, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xf8, 0x42, 0x01,
//    0x0d, 0x04, 0x1f, 0x16, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c,
//    0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x43,
//    0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x30, 0x1d,
//    0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x0b, 0xb5, 0x65,
//    0xe7, 0x3c, 0xd5, 0x77, 0x69, 0x7a, 0x0d, 0xf2, 0x97, 0x3f, 0xf6, 0xcb,
//    0x16, 0x05, 0x12, 0x1b, 0x96, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23,
//    0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x12, 0xdf, 0x81, 0x75, 0x71, 0xca,
//    0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b, 0x77, 0x3b, 0x9e, 0x33, 0x77, 0xf3,
//    0xf7, 0x6f, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff,
//    0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04,
//    0x04, 0x03, 0x02, 0x04, 0xb0, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25,
//    0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,
//    0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02,
//    0x30, 0x33, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01,
//    0x04, 0x27, 0x30, 0x25, 0x30, 0x23, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05,
//    0x05, 0x07, 0x30, 0x01, 0x86, 0x17, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
//    0x2f, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x73, 0x32, 0x6e, 0x74, 0x65, 0x73,
//    0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48,
//    0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01,
//    0x00, 0x59, 0x4b, 0xd9, 0xc6, 0xee, 0x12, 0x3e, 0x8c, 0xdb, 0x37, 0xb4,
//    0x0c, 0xcc, 0xc9, 0xaf, 0x96, 0xff, 0xab, 0x32, 0xf9, 0x54, 0x80, 0x2f,
//    0x2e, 0x40, 0x6b, 0x39, 0xbf, 0xf3, 0xa0, 0xa2, 0x96, 0xc0, 0x2b, 0x5a,
//    0xb2, 0xa5, 0x20, 0x7a, 0xb3, 0x84, 0x7e, 0x01, 0x16, 0x79, 0x90, 0xfd,
//    0xa4, 0xda, 0x89, 0x68, 0x52, 0x3b, 0x2e, 0xc4, 0x07, 0xf9, 0x2f, 0xb2,
//    0x8b, 0xc4, 0x49, 0x5a, 0xb9, 0x70, 0x21, 0x49, 0xeb, 0x55, 0xd6, 0x2a,
//    0xca, 0xb6, 0x6d, 0x5c, 0xee, 0xe8, 0xb9, 0x92, 0xaa, 0x4b, 0x46, 0xc9,
//    0x01, 0x73, 0x9d, 0x1e, 0xf3, 0x24, 0x1a, 0xf8, 0x9c, 0xd1, 0xbb, 0x9a,
//    0x7e, 0xbe, 0xcd, 0x68, 0xf1, 0x14, 0xae, 0x4f, 0x43, 0xa9, 0x1a, 0x2c,
//    0xf4, 0xd2, 0x8a, 0xae, 0xdb, 0x90, 0xa2, 0x7b, 0xd9, 0xd1, 0x69, 0x0f,
//    0x2e, 0xa3, 0xd2, 0x9e, 0x50, 0xd3, 0xa0, 0xe6, 0x09, 0xd6, 0x05, 0x71,
//    0xa0, 0xd1, 0xbb, 0x3e, 0xd4, 0x3b, 0xe4, 0x7d, 0xce, 0x38, 0x83, 0x03,
//    0x42, 0xc6, 0xbf, 0x83, 0x60, 0x28, 0xce, 0xa5, 0x75, 0xb7, 0xf7, 0x1b,
//    0x6e, 0x5b, 0xea, 0xff, 0x32, 0x61, 0xd3, 0x36, 0x1b, 0x83, 0x1f, 0x1f,
//    0xe9, 0x26, 0xe7, 0x23, 0x54, 0x82, 0xce, 0xcb, 0xb9, 0x59, 0x4c, 0xf6,
//    0x25, 0x76, 0xa4, 0x33, 0xb0, 0xef, 0xff, 0x23, 0x2f, 0x43, 0x9e, 0x90,
//    0x91, 0xf4, 0x88, 0xbe, 0x1a, 0xf9, 0x73, 0x03, 0x00, 0xa7, 0x86, 0x03,
//    0x8a, 0xe8, 0x62, 0x52, 0x84, 0x7f, 0x5c, 0x46, 0xbd, 0x5c, 0x12, 0x03,
//    0xc3, 0xe5, 0xeb, 0x72, 0x22, 0xa1, 0xd6, 0xec, 0x19, 0x9e, 0x63, 0x3e,
//    0x09, 0x98, 0x9b, 0x43, 0xaa, 0x79, 0x1e, 0x39, 0x6e, 0x71, 0x59, 0xc9,
//    0x51, 0x7a, 0x6a, 0xd1, 0xa7, 0xae, 0x8e, 0xd1, 0x4c, 0x6a, 0x8d, 0x0b,
//    0x63, 0x6a, 0x05, 0x92, 0xc1, 0x31, 0x6b, 0x9d, 0x7f, 0x46, 0x65, 0x3c,
//    0xd4, 0x3c, 0x8b, 0x42, 0x8f, 0x7f, 0xb4, 0x4a, 0xe8, 0x5f, 0xd4, 0xaf,
//    0x1f, 0x97, 0xa8, 0xd5, 0x7e, 0x4b, 0x86, 0x82, 0x10, 0x92, 0x09, 0x67,
//    0x14, 0x74, 0x3c, 0xdd, 0x82, 0x2c, 0x4c, 0x40, 0x7d, 0x53, 0x3d, 0x82,
//    0x89, 0x67, 0x11, 0x0b, 0x91, 0x13, 0x28, 0x37, 0xd6, 0x2d, 0x05, 0xa6,
//    0x04, 0x32, 0xc8, 0x66, 0xee, 0x2a, 0x2a, 0xad, 0xe3, 0x07, 0x04, 0x70,
//    0xff, 0xad, 0x9a, 0x8a, 0x60, 0x7a, 0x59, 0x91, 0x6f, 0x08, 0x98, 0xc5,
//    0x73, 0x96, 0xdd, 0x0b, 0x75, 0xf8, 0x3e, 0x39, 0x0a, 0xd9, 0xbd, 0x38,
//    0xa2, 0xbc, 0x7a, 0x55, 0x56, 0xdc, 0xd2, 0x26, 0xf2, 0x42, 0x5e, 0x23,
//    0x02, 0xa1, 0x33, 0x75, 0x11, 0x96, 0xd4, 0x27, 0x23, 0xfe, 0x10, 0x37,
//    0xb2, 0x38, 0x13, 0xc9, 0x73, 0x0c, 0xf8, 0x95, 0xbd, 0xce, 0xdd, 0x3e,
//    0x28, 0x17, 0x2e, 0xfe, 0x9d, 0x3f, 0x50, 0xdc, 0x88, 0x31, 0x1b, 0xf7,
//    0x9f, 0xcb, 0xbd, 0xa0, 0x6c, 0x92, 0x4a, 0x87, 0x16, 0xbe, 0xee, 0x85,
//    0x53, 0x41, 0xaf, 0xca, 0xa6, 0x4d, 0x55, 0xfe, 0xd5, 0x6b, 0xd2, 0xca,
//    0xd2, 0x45, 0x32, 0x19, 0x35, 0xeb, 0xac, 0xe1, 0x7e, 0x50, 0x49, 0xfa,
//    0x92, 0xf1, 0x2c, 0x5e, 0xbe, 0x7d, 0xa5, 0x73, 0x37, 0xb6, 0x14, 0x3a,
//    0x73, 0xa4, 0x0a, 0x21, 0x00, 0xbe, 0x58, 0x77, 0x91, 0x89, 0xc7, 0xb0,
//    0x8b, 0x0d, 0x68, 0xa4, 0x18, 0xba, 0x74, 0x01, 0x55, 0x01, 0x51, 0xb0,
//    0x38, 0xa0, 0x36, 0x6e, 0x22, 0xd5, 0x1b, 0x45, 0x47, 0xdc, 0xb0, 0xf3,
//    0x41, 0x13, 0x1a, 0x37, 0x7b, 0xb6, 0x31, 0x02, 0x23, 0xa1, 0xf4, 0x94,
//    0x56, 0x4f, 0x96, 0x93, 0x32, 0x87, 0xdd, 0x19, 0xda, 0x06, 0x76, 0xea,
//    0x02, 0xa6, 0x45, 0x11, 0x8e, 0x14, 0x84, 0x3d, 0xe8 };

struct OCSPTestVector{
  std::string ocsp_response;
  std::string cafile;
  std::string server_cert;
  const EVP_MD *dgst;
  int expected_ocsp_status;
  int expected_ocsp_verify_status;
  int expected_ocsp_resp_find_status;
  int expected_ocsp_cert_status;
};

static const OCSPTestVector kTestVectors[] = {
    // === SHA1 OCSP RESPONSES ===
    // Test valid OCSP response signed by an OCSP responder
    {
        "ocsp_response",
        "ca_cert",
        "server_cert",
        EVP_sha1(),
        OCSP_RESPONSE_STATUS_SUCCESSFUL,
        OCSP_VERIFYSTATUS_SUCCESS,
        OCSP_RESPFINDSTATUS_SUCCESS,
        V_OCSP_CERTSTATUS_GOOD
    },
    // Test against same good OCSP response, but checking behavior of not
    // specifying hash algorithm used for |OCSP_cert_to_id| this time (should
    // default to sha1). When |*dgst| is set to NULL, the default hash algorithm
    // should automatically be set to sha1. The revocation status check of the
    // response should work if hash algorithm of |cert_id| has been set to sha1
    // successfully.
    {
        "ocsp_response",
        "ca_cert",
        "server_cert",
        nullptr,
        OCSP_RESPONSE_STATUS_SUCCESSFUL,
        OCSP_VERIFYSTATUS_SUCCESS,
        OCSP_RESPFINDSTATUS_SUCCESS,
        V_OCSP_CERTSTATUS_GOOD
    },
    // Test valid OCSP response directly signed by the CA certificate
    {
        "ocsp_response_ca_signed",
        "ca_cert",
        "server_cert",
        EVP_sha1(),
        OCSP_RESPONSE_STATUS_SUCCESSFUL,
        OCSP_VERIFYSTATUS_SUCCESS,
        OCSP_RESPFINDSTATUS_SUCCESS,
        V_OCSP_CERTSTATUS_GOOD
    },
    // Test OCSP response status is revoked
    {
        "ocsp_response_revoked",
        "ca_cert",
        "server_cert",
        EVP_sha1(),
        OCSP_RESPONSE_STATUS_SUCCESSFUL,
        OCSP_VERIFYSTATUS_SUCCESS,
        OCSP_RESPFINDSTATUS_SUCCESS,
        V_OCSP_CERTSTATUS_REVOKED
    },
    // Test OCSP response signed by the correct responder certificate, but not for
    // the requested certificate. (So this would be a completely valid response to a
    // different OCSP request for the other certificate.)
    {
        "ocsp_response",
        "ca_cert",
        "server_ecdsa_cert",
        EVP_sha1(),
        OCSP_RESPONSE_STATUS_SUCCESSFUL,
        OCSP_VERIFYSTATUS_SUCCESS,
        OCSP_RESPFINDSTATUS_ERROR,
        0
    },
    // Test OCSP response where the requested certificate was signed by the OCSP
    // responder, but signed by the wrong requested OCSP responder key certificate.
    // However, this incorrect OCSP responder certificate may be a valid OCSP
    // responder for some other case and also chains to a trusted root.
    {
        "ocsp_response_wrong_signer",
        "ca_cert",
        "server_cert",
        EVP_sha1(),
        OCSP_RESPONSE_STATUS_SUCCESSFUL,
        OCSP_VERIFYSTATUS_ERROR,
        0,
        0
    },

    // === SHA256 OCSP RESPONSES ===
    // Test valid OCSP response signed by an OCSP responder
    {
        "ocsp_response_sha256",
        "ca_cert",
        "server_cert",
        EVP_sha256(),
        OCSP_RESPONSE_STATUS_SUCCESSFUL,
        OCSP_VERIFYSTATUS_SUCCESS,
        OCSP_RESPFINDSTATUS_SUCCESS,
        V_OCSP_CERTSTATUS_GOOD
    },
    // Test a SHA-256 revoked OCSP response status
    {
        "ocsp_response_revoked_sha256",
        "ca_cert",
        "server_cert",
        EVP_sha256(),
        OCSP_RESPONSE_STATUS_SUCCESSFUL,
        OCSP_VERIFYSTATUS_SUCCESS,
        OCSP_RESPFINDSTATUS_SUCCESS,
        V_OCSP_CERTSTATUS_REVOKED
    },
    // Test a SHA-256 OCSP response signed by the correct responder certificate,
    // but not for the requested certificate. (So this would be a completely
    // valid response to a different OCSP request for the other certificate.)
    {
        "ocsp_response_sha256",
        "ca_cert",
        "server_ecdsa_cert",
        EVP_sha256(),
        OCSP_RESPONSE_STATUS_SUCCESSFUL,
        OCSP_VERIFYSTATUS_SUCCESS,
        OCSP_RESPFINDSTATUS_ERROR,
        0
    },
    // Test a SHA-256 OCSP response signed by the wrong responder certificate,
    // but the requested certificate was signed. (however this incorrect OCSP
    // responder certificate is a valid OCSP responder for some other case and
    // chains to a trusted root). Thus, this response is not valid for any
    // request.
    {
        "ocsp_response_wrong_signer_sha256",
        "ca_cert",
        "server_cert",
        EVP_sha256(),
        OCSP_RESPONSE_STATUS_SUCCESSFUL,
        OCSP_VERIFYSTATUS_ERROR,
        0,
        0
    },
};

class OCSPTest : public testing::TestWithParam<OCSPTestVector> {};

INSTANTIATE_TEST_SUITE_P(All, OCSPTest, testing::ValuesIn(kTestVectors));

std::string GetTestData(const char *path);

static bssl::UniquePtr<OCSP_RESPONSE> LoadOCSP_RESPONSE(
    bssl::Span<const uint8_t> der) {
  const uint8_t *ptr = der.data();
  return bssl::UniquePtr<OCSP_RESPONSE>(d2i_OCSP_RESPONSE(nullptr, &ptr, der.size()));
}

//// CertFromPEM parses the given, NUL-terminated pem block and returns an |X509*|.
static bssl::UniquePtr<X509> CertFromPEM(const char *pem) {
  bssl::UniquePtr<BIO> bio(BIO_new_mem_buf(pem, strlen(pem)));
  return bssl::UniquePtr<X509>(
      PEM_read_bio_X509(bio.get(), nullptr, nullptr, nullptr));
}

static bssl::UniquePtr<STACK_OF(X509)> CertsToStack(
    const std::vector<X509 *> &certs) {
  bssl::UniquePtr<STACK_OF(X509)> stack(sk_X509_new_null());
  if (!stack) {
    return nullptr;
  }
  for (auto cert : certs) {
    if (!bssl::PushToStack(stack.get(), bssl::UpRef(cert))) {
      return nullptr;
    }
  }
  return stack;
}

static void ExtractAndVerifyBasicOCSP(
    bssl::Span<const uint8_t> der,
    int expected_ocsp_status,
    const std::string ca_cert_file,
    const std::string server_cert_file,
    int expected_ocsp_verify_status,
    bssl::UniquePtr<OCSP_BASICRESP> *basic_response,
    bssl::UniquePtr<STACK_OF(X509)> *server_cert_chain){
  bssl::UniquePtr<OCSP_RESPONSE> ocsp_response;

  ocsp_response = LoadOCSP_RESPONSE(der);
  ASSERT_TRUE(ocsp_response);

  int ret = OCSP_response_status(ocsp_response.get());
  ASSERT_EQ(expected_ocsp_status, ret);

  *basic_response = bssl::UniquePtr<OCSP_BASICRESP>(OCSP_response_get1_basic(ocsp_response.get()));
  ASSERT_TRUE(*basic_response);

  // Set up trust store and certificate chain
  bssl::UniquePtr<X509> ca_cert(CertFromPEM(
      GetTestData(std::string("crypto/ocsp/test/aws/" + ca_cert_file + ".pem").c_str()).c_str()));
  bssl::UniquePtr<X509> server_cert(CertFromPEM(
      GetTestData(std::string("crypto/ocsp/test/aws/" + server_cert_file+ ".pem").c_str()).c_str()));

  bssl::UniquePtr<X509_STORE> trust_store(X509_STORE_new());
  X509_STORE_add_cert(trust_store.get(),ca_cert.get());
  *server_cert_chain = CertsToStack(
      {server_cert.get(),ca_cert.get()});
  ASSERT_TRUE(*server_cert_chain);

  // Verifies the OCSP responder's signature on the OCSP response data.
  const int ocsp_verify_err = OCSP_basic_verify(basic_response->get(), server_cert_chain->get(), trust_store.get(), 0);
  ASSERT_EQ(expected_ocsp_verify_status, ocsp_verify_err);
}

static void CheckOCSP_CERTSTATUS(
    bssl::UniquePtr<OCSP_BASICRESP> *basic_response,
    bssl::UniquePtr<STACK_OF(X509)> *server_cert_chain,
    const EVP_MD *dgst,
    int expected_resp_find_status,
    int *status,
    ASN1_GENERALIZEDTIME **thisupd,
    ASN1_GENERALIZEDTIME **nextupd){
  X509 *subject = sk_X509_value(server_cert_chain->get(), 0);
  X509 *issuer = sk_X509_value(server_cert_chain->get(), 1);
  // Convert issuer certificate to |OCSP_CERTID|
  bssl::UniquePtr<OCSP_CERTID> cert_id = bssl::UniquePtr<OCSP_CERTID>(OCSP_cert_to_id(dgst, subject, issuer));
  ASSERT_TRUE(cert_id);


  int reason = 0;
  ASN1_GENERALIZEDTIME *revtime;
  // Checks revocation status of the response
  const int ocsp_resp_find_status_res = OCSP_resp_find_status(basic_response->get(), cert_id.get(), status, &reason, &revtime, thisupd, nextupd);
  ASSERT_EQ(expected_resp_find_status, ocsp_resp_find_status_res);
}

TEST_P(OCSPTest, VerifyOCSP_Response) {
  const OCSPTestVector &t = GetParam();

  std::string data = GetTestData(std::string("crypto/ocsp/test/aws/" + t.ocsp_response + ".der").c_str());
  std::vector<uint8_t> ocsp_reponse_data(data.begin(), data.end());

  // OCSP response parsing and verification step.
  bssl::UniquePtr<OCSP_BASICRESP> basic_response;
  bssl::UniquePtr<STACK_OF(X509)> server_cert_chain;
  ExtractAndVerifyBasicOCSP(ocsp_reponse_data,
                            t.expected_ocsp_status,
                            t.cafile,
                            t.server_cert,
                            t.expected_ocsp_verify_status,
                            &basic_response,
                            &server_cert_chain);

  // If OCSP basic verify is successful, we check the OCSP response status.
  if(t.expected_ocsp_verify_status == OCSP_VERIFYSTATUS_SUCCESS) {
    int status = 0;
    ASN1_GENERALIZEDTIME *thisupd, *nextupd;
    CheckOCSP_CERTSTATUS(&basic_response, &server_cert_chain, t.dgst,
                         t.expected_ocsp_resp_find_status, &status, &thisupd,
                         &nextupd);
    // If OCSP response status retrieving is successful, we check if the cert
    // status of the OCSP response is correct.
    if (t.expected_ocsp_resp_find_status == OCSP_RESPFINDSTATUS_SUCCESS) {
      ASSERT_EQ(t.expected_ocsp_cert_status, status);
    }
  }
}

// Test valid OCSP response signed by an OCSP responder
TEST(OCSPTest, TestGoodOCSP) {
  std::string data = GetTestData(std::string("crypto/ocsp/test/aws/ocsp_response.der").c_str());
  std::vector<uint8_t> ocsp_reponse_data(data.begin(), data.end());

  bssl::UniquePtr<OCSP_BASICRESP> basic_response;
  bssl::UniquePtr<STACK_OF(X509)> server_cert_chain;
  ExtractAndVerifyBasicOCSP(ocsp_reponse_data,
                            OCSP_RESPONSE_STATUS_SUCCESSFUL,
                            "ca_cert",
                            "server_cert",
                            OCSP_VERIFYSTATUS_SUCCESS,
                            &basic_response,
                            &server_cert_chain);

  int status = 0;
  ASN1_GENERALIZEDTIME *thisupd, *nextupd;
  CheckOCSP_CERTSTATUS(&basic_response,
                       &server_cert_chain,
                       EVP_sha1(),
                       OCSP_RESPFINDSTATUS_SUCCESS,
                       &status,
                       &thisupd,
                       &nextupd);
  ASSERT_EQ(V_OCSP_CERTSTATUS_GOOD, status);

  // If OCSP response is verifiable and all good, an OCSP client should check
  // time fields to see if the response is still valid

  // Check before OCSP was last updated connection timestamp
  time_t connection_time = invalid_before_ocsp_update_time;
  ASSERT_EQ(1, X509_cmp_time(thisupd, &connection_time));
  ASSERT_EQ(1, X509_cmp_time(nextupd, &connection_time));

  // Check valid connection timestamp right after OCSP response was validated.
  connection_time = valid_after_ocsp_update_time;
  ASSERT_EQ(-1, X509_cmp_time(thisupd, &connection_time));
  ASSERT_EQ(1, X509_cmp_time(nextupd, &connection_time));

  // Check valid connection timestamp right before OCSP response expires.
  connection_time = valid_before_ocsp_expire_time;
  ASSERT_EQ(-1, X509_cmp_time(thisupd, &connection_time));
  ASSERT_EQ(1, X509_cmp_time(nextupd, &connection_time));

  // Check expired connection timestamp
  connection_time = invalid_after_ocsp_expire_time;
  ASSERT_EQ(-1, X509_cmp_time(thisupd, &connection_time));
  ASSERT_EQ(-1, X509_cmp_time(nextupd, &connection_time));
}

// Test valid OCSP response, but the data itself is untrusted
TEST(OCSPTest, TestUntrustedDataOCSP) {
  std::string data = GetTestData(std::string("crypto/ocsp/test/aws/ocsp_response.der").c_str());
  std::vector<uint8_t> ocsp_reponse_data(data.begin(), data.end());

  // Mess up a byte right in the middle of the cert
  ocsp_reponse_data[800] = ocsp_reponse_data[800] + 1;

  bssl::UniquePtr<OCSP_BASICRESP> basic_response;
  bssl::UniquePtr<STACK_OF(X509)> server_cert_chain;
  ExtractAndVerifyBasicOCSP(ocsp_reponse_data,
                            OCSP_RESPONSE_STATUS_SUCCESSFUL,
                            "ca_cert",
                            "server_cert",
                            OCSP_VERIFYSTATUS_ERROR,
                            &basic_response,
                            &server_cert_chain);
}


// Test valid OCSP response hashed with sha256
TEST(OCSPTest, TestGoodOCSP_SHA256) {
  std::string data = GetTestData(std::string("crypto/ocsp/test/aws/ocsp_response_sha256.der").c_str());
  std::vector<uint8_t> ocsp_reponse_data(data.begin(), data.end());

  bssl::UniquePtr<OCSP_BASICRESP> basic_response;
  bssl::UniquePtr<STACK_OF(X509)> server_cert_chain;
  ExtractAndVerifyBasicOCSP(ocsp_reponse_data,
                            OCSP_RESPONSE_STATUS_SUCCESSFUL,
                            "ca_cert",
                            "server_cert",
                            OCSP_VERIFYSTATUS_SUCCESS,
                            &basic_response,
                            &server_cert_chain);

  int status = 0;
  ASN1_GENERALIZEDTIME *thisupd, *nextupd;
  CheckOCSP_CERTSTATUS(&basic_response,
                       &server_cert_chain,
                       EVP_sha256(),
                       OCSP_RESPFINDSTATUS_SUCCESS,
                       &status,
                       &thisupd,
                       &nextupd);
  ASSERT_EQ(V_OCSP_CERTSTATUS_GOOD, status);

  // If OCSP response is verifiable and all good, an OCSP client should check
  // time fields to see if the response is still valid

  // Check before OCSP was last updated connection timestamp
  time_t connection_time = invalid_before_ocsp_update_time_sha256;
  ASSERT_EQ(1, X509_cmp_time(thisupd, &connection_time));
  ASSERT_EQ(1, X509_cmp_time(nextupd, &connection_time));

  // Check valid connection timestamp right after OCSP response was validated.
  connection_time = valid_after_ocsp_update_time_sha256;
  ASSERT_EQ(-1, X509_cmp_time(thisupd, &connection_time));
  ASSERT_EQ(1, X509_cmp_time(nextupd, &connection_time));

  // Check valid connection timestamp right before OCSP response expires.
  connection_time = valid_before_ocsp_expire_time_sha256;
  ASSERT_EQ(-1, X509_cmp_time(thisupd, &connection_time));
  ASSERT_EQ(1, X509_cmp_time(nextupd, &connection_time));

  // Check expired connection timestamp
  connection_time = invalid_after_ocsp_expire_time_sha256;
  ASSERT_EQ(-1, X509_cmp_time(thisupd, &connection_time));
  ASSERT_EQ(-1, X509_cmp_time(nextupd, &connection_time));
}
