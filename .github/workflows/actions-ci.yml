name: General CI Tests
on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true
env:
  GOPROXY: https://proxy.golang.org,direct
  SDE_MIRROR_URL: "https://downloadmirror.intel.com/813591/sde-external-9.33.0-2024-01-07-win.tar.xz"
  SDE_VERSION_TAG: sde-external-9.33.0-2024-01-07-win
  PACKAGE_NAME: aws-lc
  # Used to enable ASAN test dimension.
  AWSLC_NO_ASM_FIPS: 1

jobs:
  # MacOS and Windows GHA runners are more expensive, so we do a sanity test run before proceeding.
  sanity-test-run:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: Sanity Test Run
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          cmake -GNinja -Btest_build_dir
          ninja -C test_build_dir run_tests

  macOS-x86:
    if: github.repository_owner == 'aws'
    needs: [sanity-test-run]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - "macos-14-large"
          - "macos-13-large"
          - "macos-12-large"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          ./tests/ci/run_posix_tests.sh

  macOS-x86-FIPS:
    if: github.repository_owner == 'aws'
    needs: [sanity-test-run]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - "macos-14-large"
          - "macos-13-large"
          - "macos-12-large"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - name: Build ${{ env.PACKAGE_NAME }} with FIPS mode
        run: |
          ./tests/ci/run_fips_tests.sh

  macOS-ARM:
    if: github.repository_owner == 'aws'
    needs: [sanity-test-run]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - "macos-14-xlarge"
          - "macos-13-xlarge"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          ./tests/ci/run_posix_tests.sh

  macOS-ARM-FIPS:
    if: github.repository_owner == 'aws'
    needs: [sanity-test-run]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - "macos-14-xlarge"
          - "macos-13-xlarge"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - name: Build ${{ env.PACKAGE_NAME }} with FIPS mode
        run: |
          ./tests/ci/run_fips_tests.sh


  MSVC-2019:
    if: github.repository_owner == 'aws'
    needs: [sanity-test-run]
    runs-on: aws-lc_windows-2019_8-core
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: Build Windows Dependencies
        run: |
          choco install ninja --version 1.9.0.20190208 -y &&
          choco install nasm --version 2.14.02 -y
      - name: Run Windows Tests on MSVC-2019
        run: |
          .\tests\ci\run_windows_tests.bat "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x64

  MSVC-2022:
    if: github.repository_owner == 'aws'
    needs: [sanity-test-run]
    runs-on: aws-lc_windows-latest_8-core
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: Build Windows Dependencies
        run: |
          choco install ninja --version 1.9.0.20190208 -y &&
          choco install nasm --version 2.14.02 -y
      - name: Run Windows Tests on MSVC-2022
        run: |
          .\tests\ci\run_windows_tests.bat "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64

  MSVC-SDE-64-bit:
    if: github.repository_owner == 'aws'
    needs: [sanity-test-run]
    # TODO: Update this to run on windows-2022. windows-2022 (Windows 11) has phased out support for older processors.
    # https://learn.microsoft.com/en-us/windows-hardware/design/minimum/supported/windows-11-supported-intel-processors
    runs-on: aws-lc_windows-2019_64-core
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Build Windows Dependencies
        run: |
          choco install ninja --version 1.9.0.20190208 -y &&
          choco install nasm --version 2.14.02 -y

      - name: Install SDE simulator
        run: |
          curl -SL --output temp.tar.xz ${{ env.SDE_MIRROR_URL }}
          7z x temp.tar.xz
          7z x temp.tar
          ren ${{ env.SDE_VERSION_TAG }} windows-sde
          del temp.tar.xz
          del temp.tar

      - name: Run Windows SDE Tests for 64 bit
        run: |
          $env:SDEROOT = "${PWD}\windows-sde"
          echo ${env:SDEROOT}
          .\tests\ci\run_windows_tests.bat "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x64 true

  gcc-9-13-sanity:
    if: github.repository_owner == 'aws'
    needs: [sanity-test-run]
    strategy:
      fail-fast: false
      matrix:
        gccversion:
          - "9"
          - "10"
          - "11"
          - "12"
          - "13"
        os:
          - "ubuntu-latest"
        fips:
          - "0"
          - "1"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - name: Setup CMake
        uses: threeal/cmake-action@v1.3.0
        with:
          generator: Ninja
          c-compiler: gcc-${{ matrix.gccversion }}
          cxx-compiler: g++-${{ matrix.gccversion }}
          options: FIPS=${{ matrix.fips }} CMAKE_BUILD_TYPE=Release
      - name: Build Project
        run: cmake --build ./build --target all
      - name: Run tests
        run: cmake --build ./build --target run_tests

  clang-13-15-sanity:
    if: github.repository_owner == 'aws'
    needs: [sanity-test-run]
    strategy:
      fail-fast: false
      matrix:
        gccversion:
          - "13"
          - "14"
          - "15"
        os:
          - "ubuntu-latest"
        fips:
          - "0"
          - "1"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - name: Setup CMake
        uses: threeal/cmake-action@v1.3.0
        with:
          generator: Ninja
          c-compiler: clang-${{ matrix.gccversion }}
          cxx-compiler: clang++-${{ matrix.gccversion }}
          options: FIPS=${{ matrix.fips }} CMAKE_BUILD_TYPE=Release
      - name: Build Project
        run: cmake --build ./build --target all
      - name: Run tests
        run: cmake --build ./build --target run_tests

  clang-10-12-sanity:
    if: github.repository_owner == 'aws'
    needs: [sanity-test-run]
    strategy:
      fail-fast: false
      matrix:
        gccversion:
          - "10"
          - "11"
          - "12"
        os:
          - "ubuntu-20.04"
        fips:
          - "0"
          - "1"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.18'
      - name: Setup CMake
        uses: threeal/cmake-action@v1.3.0
        with:
          generator: Ninja
          c-compiler: clang-${{ matrix.gccversion }}
          cxx-compiler: clang++-${{ matrix.gccversion }}
          options: FIPS=${{ matrix.fips }} CMAKE_BUILD_TYPE=Release
      - name: Build Project
        run: cmake --build ./build --target all
      - name: Run tests
        run: cmake --build ./build --target run_tests

    # TODO: Investigate sudden hanging tests and failures in GHA runners (P114059413)
#  MSVC-SDE-32-bit:
#    needs: [sanity-test-run]
#    runs-on: aws-lc_windows-2019_64-core
#    steps:
#      - name: Git clone the repository
#        uses: actions/checkout@v3
#
#      - name: Build Windows Dependencies
#        run: |
#          choco install ninja --version 1.9.0.20190208 -y &&
#          choco install nasm --version 2.14.02 -y
#
#      - name: Install SDE simulator
#        run: |
#          curl -SL --output temp.tar.xz ${{ env.SDE_MIRROR_URL }}
#          7z x temp.tar.xz
#          7z x temp.tar
#          ren ${{ env.SDE_VERSION_TAG }} windows-sde
#          del temp.tar.xz
#          del temp.tar
#
#      - name: Run Windows SDE Tests for 32 bit
#        run: |
#          $env:SDEROOT = "${PWD}\windows-sde"
#          echo ${env:SDEROOT}
#          .\tests\ci\run_windows_tests.bat "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86 true
#
