package main

// Code generated by /Users/smittals/go/bin/peg /Users/smittals/Desktop/aws-lc/util/fipstools/delocate/delocate.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleAsmFile
	ruleStatement
	ruleGlobalDirective
	ruleDirective
	ruleDirectiveName
	ruleLocationDirective
	ruleZeroDirective
	ruleFileDirective
	ruleLocDirective
	ruleArgs
	ruleArg
	ruleQuotedArg
	ruleQuotedText
	ruleLabelContainingDirective
	ruleLabelContainingDirectiveName
	ruleSymbolArgs
	ruleSymbolArg
	ruleSymbolExpr
	ruleSymbolAtom
	ruleSymbolOperator
	ruleOpenParen
	ruleCloseParen
	ruleSymbolType
	ruleDot
	ruleTCMarker
	ruleEscapedChar
	ruleWS
	ruleComment
	ruleLabel
	ruleSymbolName
	ruleLocalSymbol
	ruleLocalLabel
	ruleLocalLabelRef
	ruleInstruction
	ruleInstructionName
	ruleInstructionArg
	ruleGOTLocation
	ruleGOTSymbolOffset
	ruleAVX512Token
	ruleTOCRefHigh
	ruleTOCRefLow
	ruleIndirectionIndicator
	ruleRegisterOrConstant
	ruleARMConstantTweak
	ruleARMRegister
	ruleARMVectorRegister
	ruleSVE2PredicateRegister
	ruleMemoryRef
	ruleSymbolRef
	ruleLow12BitsSymbolRef
	ruleARMBaseIndexScale
	ruleARMGOTLow12
	ruleARMPostincrement
	ruleBaseIndexScale
	ruleOperator
	ruleOffsetOperator
	ruleOffset
	ruleSection
	ruleSegmentRegister
)

var rul3s = [...]string{
	"Unknown",
	"AsmFile",
	"Statement",
	"GlobalDirective",
	"Directive",
	"DirectiveName",
	"LocationDirective",
	"ZeroDirective",
	"FileDirective",
	"LocDirective",
	"Args",
	"Arg",
	"QuotedArg",
	"QuotedText",
	"LabelContainingDirective",
	"LabelContainingDirectiveName",
	"SymbolArgs",
	"SymbolArg",
	"SymbolExpr",
	"SymbolAtom",
	"SymbolOperator",
	"OpenParen",
	"CloseParen",
	"SymbolType",
	"Dot",
	"TCMarker",
	"EscapedChar",
	"WS",
	"Comment",
	"Label",
	"SymbolName",
	"LocalSymbol",
	"LocalLabel",
	"LocalLabelRef",
	"Instruction",
	"InstructionName",
	"InstructionArg",
	"GOTLocation",
	"GOTSymbolOffset",
	"AVX512Token",
	"TOCRefHigh",
	"TOCRefLow",
	"IndirectionIndicator",
	"RegisterOrConstant",
	"ARMConstantTweak",
	"ARMRegister",
	"ARMVectorRegister",
	"SVE2PredicateRegister",
	"MemoryRef",
	"SymbolRef",
	"Low12BitsSymbolRef",
	"ARMBaseIndexScale",
	"ARMGOTLow12",
	"ARMPostincrement",
	"BaseIndexScale",
	"Operator",
	"OffsetOperator",
	"Offset",
	"Section",
	"SegmentRegister",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Asm struct {
	Buffer string
	buffer []rune
	rules  [60]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Asm) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Asm) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Asm
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Asm) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Asm) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Asm) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Asm) error {
	return func(p *Asm) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Asm) error {
	return func(p *Asm) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Asm) Init(options ...func(*Asm) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 AsmFile <- <(Statement* !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleStatement]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l0
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleAsmFile, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Statement <- <(WS? (Label / ((GlobalDirective / LocationDirective / LabelContainingDirective / ZeroDirective / Instruction / Directive / Comment / ) WS? ((Comment? '\n') / ';'))))> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l7
					}
					goto l8
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[ruleLabel]() {
						goto l10
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					{
						position11, tokenIndex11 := position, tokenIndex
						if !_rules[ruleGlobalDirective]() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleLocationDirective]() {
							goto l13
						}
						goto l11
					l13:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleLabelContainingDirective]() {
							goto l14
						}
						goto l11
					l14:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleZeroDirective]() {
							goto l15
						}
						goto l11
					l15:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleInstruction]() {
							goto l16
						}
						goto l11
					l16:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleDirective]() {
							goto l17
						}
						goto l11
					l17:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleComment]() {
							goto l18
						}
						goto l11
					l18:
						position, tokenIndex = position11, tokenIndex11
					}
				l11:
					{
						position19, tokenIndex19 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l19
						}
						goto l20
					l19:
						position, tokenIndex = position19, tokenIndex19
					}
				l20:
					{
						position21, tokenIndex21 := position, tokenIndex
						{
							position23, tokenIndex23 := position, tokenIndex
							if !_rules[ruleComment]() {
								goto l23
							}
							goto l24
						l23:
							position, tokenIndex = position23, tokenIndex23
						}
					l24:
						if buffer[position] != rune('\n') {
							goto l22
						}
						position++
						goto l21
					l22:
						position, tokenIndex = position21, tokenIndex21
						if buffer[position] != rune(';') {
							goto l5
						}
						position++
					}
				l21:
				}
			l9:
				add(ruleStatement, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 2 GlobalDirective <- <((('.' ('g' / 'G') ('l' / 'L') ('o' / 'O') ('b' / 'B') ('a' / 'A') ('l' / 'L')) / ('.' ('g' / 'G') ('l' / 'L') ('o' / 'O') ('b' / 'B') ('l' / 'L'))) WS SymbolName)> */
		func() bool {
			position25, tokenIndex25 := position, tokenIndex
			{
				position26 := position
				{
					position27, tokenIndex27 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l28
					}
					position++
					{
						position29, tokenIndex29 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l30
						}
						position++
						goto l29
					l30:
						position, tokenIndex = position29, tokenIndex29
						if buffer[position] != rune('G') {
							goto l28
						}
						position++
					}
				l29:
					{
						position31, tokenIndex31 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l32
						}
						position++
						goto l31
					l32:
						position, tokenIndex = position31, tokenIndex31
						if buffer[position] != rune('L') {
							goto l28
						}
						position++
					}
				l31:
					{
						position33, tokenIndex33 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l34
						}
						position++
						goto l33
					l34:
						position, tokenIndex = position33, tokenIndex33
						if buffer[position] != rune('O') {
							goto l28
						}
						position++
					}
				l33:
					{
						position35, tokenIndex35 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l36
						}
						position++
						goto l35
					l36:
						position, tokenIndex = position35, tokenIndex35
						if buffer[position] != rune('B') {
							goto l28
						}
						position++
					}
				l35:
					{
						position37, tokenIndex37 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l38
						}
						position++
						goto l37
					l38:
						position, tokenIndex = position37, tokenIndex37
						if buffer[position] != rune('A') {
							goto l28
						}
						position++
					}
				l37:
					{
						position39, tokenIndex39 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l40
						}
						position++
						goto l39
					l40:
						position, tokenIndex = position39, tokenIndex39
						if buffer[position] != rune('L') {
							goto l28
						}
						position++
					}
				l39:
					goto l27
				l28:
					position, tokenIndex = position27, tokenIndex27
					if buffer[position] != rune('.') {
						goto l25
					}
					position++
					{
						position41, tokenIndex41 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l42
						}
						position++
						goto l41
					l42:
						position, tokenIndex = position41, tokenIndex41
						if buffer[position] != rune('G') {
							goto l25
						}
						position++
					}
				l41:
					{
						position43, tokenIndex43 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l44
						}
						position++
						goto l43
					l44:
						position, tokenIndex = position43, tokenIndex43
						if buffer[position] != rune('L') {
							goto l25
						}
						position++
					}
				l43:
					{
						position45, tokenIndex45 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l46
						}
						position++
						goto l45
					l46:
						position, tokenIndex = position45, tokenIndex45
						if buffer[position] != rune('O') {
							goto l25
						}
						position++
					}
				l45:
					{
						position47, tokenIndex47 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l48
						}
						position++
						goto l47
					l48:
						position, tokenIndex = position47, tokenIndex47
						if buffer[position] != rune('B') {
							goto l25
						}
						position++
					}
				l47:
					{
						position49, tokenIndex49 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l50
						}
						position++
						goto l49
					l50:
						position, tokenIndex = position49, tokenIndex49
						if buffer[position] != rune('L') {
							goto l25
						}
						position++
					}
				l49:
				}
			l27:
				if !_rules[ruleWS]() {
					goto l25
				}
				if !_rules[ruleSymbolName]() {
					goto l25
				}
				add(ruleGlobalDirective, position26)
			}
			return true
		l25:
			position, tokenIndex = position25, tokenIndex25
			return false
		},
		/* 3 Directive <- <('.' DirectiveName (WS Args)?)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if buffer[position] != rune('.') {
					goto l51
				}
				position++
				if !_rules[ruleDirectiveName]() {
					goto l51
				}
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l53
					}
					if !_rules[ruleArgs]() {
						goto l53
					}
					goto l54
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
			l54:
				add(ruleDirective, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 4 DirectiveName <- <([a-z] / [A-Z] / ([0-9] / [0-9]) / '_')+> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					position59, tokenIndex59 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l60
					}
					position++
					goto l59
				l60:
					position, tokenIndex = position59, tokenIndex59
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l61
					}
					position++
					goto l59
				l61:
					position, tokenIndex = position59, tokenIndex59
					{
						position63, tokenIndex63 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l64
						}
						position++
						goto l63
					l64:
						position, tokenIndex = position63, tokenIndex63
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l62
						}
						position++
					}
				l63:
					goto l59
				l62:
					position, tokenIndex = position59, tokenIndex59
					if buffer[position] != rune('_') {
						goto l55
					}
					position++
				}
			l59:
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					{
						position65, tokenIndex65 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l66
						}
						position++
						goto l65
					l66:
						position, tokenIndex = position65, tokenIndex65
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l67
						}
						position++
						goto l65
					l67:
						position, tokenIndex = position65, tokenIndex65
						{
							position69, tokenIndex69 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l70
							}
							position++
							goto l69
						l70:
							position, tokenIndex = position69, tokenIndex69
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l68
							}
							position++
						}
					l69:
						goto l65
					l68:
						position, tokenIndex = position65, tokenIndex65
						if buffer[position] != rune('_') {
							goto l58
						}
						position++
					}
				l65:
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(ruleDirectiveName, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 5 LocationDirective <- <(FileDirective / LocDirective)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[ruleFileDirective]() {
						goto l74
					}
					goto l73
				l74:
					position, tokenIndex = position73, tokenIndex73
					if !_rules[ruleLocDirective]() {
						goto l71
					}
				}
			l73:
				add(ruleLocationDirective, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 6 ZeroDirective <- <('.' ('z' / 'Z') ('e' / 'E') ('r' / 'R') ('o' / 'O') WS (!('#' / '\n') .)+)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if buffer[position] != rune('.') {
					goto l75
				}
				position++
				{
					position77, tokenIndex77 := position, tokenIndex
					if buffer[position] != rune('z') {
						goto l78
					}
					position++
					goto l77
				l78:
					position, tokenIndex = position77, tokenIndex77
					if buffer[position] != rune('Z') {
						goto l75
					}
					position++
				}
			l77:
				{
					position79, tokenIndex79 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l80
					}
					position++
					goto l79
				l80:
					position, tokenIndex = position79, tokenIndex79
					if buffer[position] != rune('E') {
						goto l75
					}
					position++
				}
			l79:
				{
					position81, tokenIndex81 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l82
					}
					position++
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if buffer[position] != rune('R') {
						goto l75
					}
					position++
				}
			l81:
				{
					position83, tokenIndex83 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l84
					}
					position++
					goto l83
				l84:
					position, tokenIndex = position83, tokenIndex83
					if buffer[position] != rune('O') {
						goto l75
					}
					position++
				}
			l83:
				if !_rules[ruleWS]() {
					goto l75
				}
				{
					position87, tokenIndex87 := position, tokenIndex
					{
						position88, tokenIndex88 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l89
						}
						position++
						goto l88
					l89:
						position, tokenIndex = position88, tokenIndex88
						if buffer[position] != rune('\n') {
							goto l87
						}
						position++
					}
				l88:
					goto l75
				l87:
					position, tokenIndex = position87, tokenIndex87
				}
				if !matchDot() {
					goto l75
				}
			l85:
				{
					position86, tokenIndex86 := position, tokenIndex
					{
						position90, tokenIndex90 := position, tokenIndex
						{
							position91, tokenIndex91 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l92
							}
							position++
							goto l91
						l92:
							position, tokenIndex = position91, tokenIndex91
							if buffer[position] != rune('\n') {
								goto l90
							}
							position++
						}
					l91:
						goto l86
					l90:
						position, tokenIndex = position90, tokenIndex90
					}
					if !matchDot() {
						goto l86
					}
					goto l85
				l86:
					position, tokenIndex = position86, tokenIndex86
				}
				add(ruleZeroDirective, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 7 FileDirective <- <('.' ('f' / 'F') ('i' / 'I') ('l' / 'L') ('e' / 'E') WS (!('#' / '\n') .)+)> */
		func() bool {
			position93, tokenIndex93 := position, tokenIndex
			{
				position94 := position
				if buffer[position] != rune('.') {
					goto l93
				}
				position++
				{
					position95, tokenIndex95 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l96
					}
					position++
					goto l95
				l96:
					position, tokenIndex = position95, tokenIndex95
					if buffer[position] != rune('F') {
						goto l93
					}
					position++
				}
			l95:
				{
					position97, tokenIndex97 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l98
					}
					position++
					goto l97
				l98:
					position, tokenIndex = position97, tokenIndex97
					if buffer[position] != rune('I') {
						goto l93
					}
					position++
				}
			l97:
				{
					position99, tokenIndex99 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l100
					}
					position++
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if buffer[position] != rune('L') {
						goto l93
					}
					position++
				}
			l99:
				{
					position101, tokenIndex101 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l102
					}
					position++
					goto l101
				l102:
					position, tokenIndex = position101, tokenIndex101
					if buffer[position] != rune('E') {
						goto l93
					}
					position++
				}
			l101:
				if !_rules[ruleWS]() {
					goto l93
				}
				{
					position105, tokenIndex105 := position, tokenIndex
					{
						position106, tokenIndex106 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l107
						}
						position++
						goto l106
					l107:
						position, tokenIndex = position106, tokenIndex106
						if buffer[position] != rune('\n') {
							goto l105
						}
						position++
					}
				l106:
					goto l93
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
				if !matchDot() {
					goto l93
				}
			l103:
				{
					position104, tokenIndex104 := position, tokenIndex
					{
						position108, tokenIndex108 := position, tokenIndex
						{
							position109, tokenIndex109 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l110
							}
							position++
							goto l109
						l110:
							position, tokenIndex = position109, tokenIndex109
							if buffer[position] != rune('\n') {
								goto l108
							}
							position++
						}
					l109:
						goto l104
					l108:
						position, tokenIndex = position108, tokenIndex108
					}
					if !matchDot() {
						goto l104
					}
					goto l103
				l104:
					position, tokenIndex = position104, tokenIndex104
				}
				add(ruleFileDirective, position94)
			}
			return true
		l93:
			position, tokenIndex = position93, tokenIndex93
			return false
		},
		/* 8 LocDirective <- <('.' ('l' / 'L') ('o' / 'O') ('c' / 'C') WS (!('#' / '/' / '\n') .)+)> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				if buffer[position] != rune('.') {
					goto l111
				}
				position++
				{
					position113, tokenIndex113 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l114
					}
					position++
					goto l113
				l114:
					position, tokenIndex = position113, tokenIndex113
					if buffer[position] != rune('L') {
						goto l111
					}
					position++
				}
			l113:
				{
					position115, tokenIndex115 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l116
					}
					position++
					goto l115
				l116:
					position, tokenIndex = position115, tokenIndex115
					if buffer[position] != rune('O') {
						goto l111
					}
					position++
				}
			l115:
				{
					position117, tokenIndex117 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l118
					}
					position++
					goto l117
				l118:
					position, tokenIndex = position117, tokenIndex117
					if buffer[position] != rune('C') {
						goto l111
					}
					position++
				}
			l117:
				if !_rules[ruleWS]() {
					goto l111
				}
				{
					position121, tokenIndex121 := position, tokenIndex
					{
						position122, tokenIndex122 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l123
						}
						position++
						goto l122
					l123:
						position, tokenIndex = position122, tokenIndex122
						if buffer[position] != rune('/') {
							goto l124
						}
						position++
						goto l122
					l124:
						position, tokenIndex = position122, tokenIndex122
						if buffer[position] != rune('\n') {
							goto l121
						}
						position++
					}
				l122:
					goto l111
				l121:
					position, tokenIndex = position121, tokenIndex121
				}
				if !matchDot() {
					goto l111
				}
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					{
						position125, tokenIndex125 := position, tokenIndex
						{
							position126, tokenIndex126 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l127
							}
							position++
							goto l126
						l127:
							position, tokenIndex = position126, tokenIndex126
							if buffer[position] != rune('/') {
								goto l128
							}
							position++
							goto l126
						l128:
							position, tokenIndex = position126, tokenIndex126
							if buffer[position] != rune('\n') {
								goto l125
							}
							position++
						}
					l126:
						goto l120
					l125:
						position, tokenIndex = position125, tokenIndex125
					}
					if !matchDot() {
						goto l120
					}
					goto l119
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
				add(ruleLocDirective, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		/* 9 Args <- <(Arg (WS? ',' WS? Arg)*)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				if !_rules[ruleArg]() {
					goto l129
				}
			l131:
				{
					position132, tokenIndex132 := position, tokenIndex
					{
						position133, tokenIndex133 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l133
						}
						goto l134
					l133:
						position, tokenIndex = position133, tokenIndex133
					}
				l134:
					if buffer[position] != rune(',') {
						goto l132
					}
					position++
					{
						position135, tokenIndex135 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l135
						}
						goto l136
					l135:
						position, tokenIndex = position135, tokenIndex135
					}
				l136:
					if !_rules[ruleArg]() {
						goto l132
					}
					goto l131
				l132:
					position, tokenIndex = position132, tokenIndex132
				}
				add(ruleArgs, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 10 Arg <- <(QuotedArg / ([0-9] / [0-9] / ([a-z] / [A-Z]) / '%' / '+' / '-' / '*' / '_' / '@' / '.')*)> */
		func() bool {
			{
				position138 := position
				{
					position139, tokenIndex139 := position, tokenIndex
					if !_rules[ruleQuotedArg]() {
						goto l140
					}
					goto l139
				l140:
					position, tokenIndex = position139, tokenIndex139
				l141:
					{
						position142, tokenIndex142 := position, tokenIndex
						{
							position143, tokenIndex143 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l144
							}
							position++
							goto l143
						l144:
							position, tokenIndex = position143, tokenIndex143
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l145
							}
							position++
							goto l143
						l145:
							position, tokenIndex = position143, tokenIndex143
							{
								position147, tokenIndex147 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l148
								}
								position++
								goto l147
							l148:
								position, tokenIndex = position147, tokenIndex147
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l146
								}
								position++
							}
						l147:
							goto l143
						l146:
							position, tokenIndex = position143, tokenIndex143
							if buffer[position] != rune('%') {
								goto l149
							}
							position++
							goto l143
						l149:
							position, tokenIndex = position143, tokenIndex143
							if buffer[position] != rune('+') {
								goto l150
							}
							position++
							goto l143
						l150:
							position, tokenIndex = position143, tokenIndex143
							if buffer[position] != rune('-') {
								goto l151
							}
							position++
							goto l143
						l151:
							position, tokenIndex = position143, tokenIndex143
							if buffer[position] != rune('*') {
								goto l152
							}
							position++
							goto l143
						l152:
							position, tokenIndex = position143, tokenIndex143
							if buffer[position] != rune('_') {
								goto l153
							}
							position++
							goto l143
						l153:
							position, tokenIndex = position143, tokenIndex143
							if buffer[position] != rune('@') {
								goto l154
							}
							position++
							goto l143
						l154:
							position, tokenIndex = position143, tokenIndex143
							if buffer[position] != rune('.') {
								goto l142
							}
							position++
						}
					l143:
						goto l141
					l142:
						position, tokenIndex = position142, tokenIndex142
					}
				}
			l139:
				add(ruleArg, position138)
			}
			return true
		},
		/* 11 QuotedArg <- <('"' QuotedText '"')> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if buffer[position] != rune('"') {
					goto l155
				}
				position++
				if !_rules[ruleQuotedText]() {
					goto l155
				}
				if buffer[position] != rune('"') {
					goto l155
				}
				position++
				add(ruleQuotedArg, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 12 QuotedText <- <(EscapedChar / (!'"' .))*> */
		func() bool {
			{
				position158 := position
			l159:
				{
					position160, tokenIndex160 := position, tokenIndex
					{
						position161, tokenIndex161 := position, tokenIndex
						if !_rules[ruleEscapedChar]() {
							goto l162
						}
						goto l161
					l162:
						position, tokenIndex = position161, tokenIndex161
						{
							position163, tokenIndex163 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l163
							}
							position++
							goto l160
						l163:
							position, tokenIndex = position163, tokenIndex163
						}
						if !matchDot() {
							goto l160
						}
					}
				l161:
					goto l159
				l160:
					position, tokenIndex = position160, tokenIndex160
				}
				add(ruleQuotedText, position158)
			}
			return true
		},
		/* 13 LabelContainingDirective <- <(LabelContainingDirectiveName WS SymbolArgs)> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				if !_rules[ruleLabelContainingDirectiveName]() {
					goto l164
				}
				if !_rules[ruleWS]() {
					goto l164
				}
				if !_rules[ruleSymbolArgs]() {
					goto l164
				}
				add(ruleLabelContainingDirective, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 14 LabelContainingDirectiveName <- <(('.' ('x' / 'X') ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('h' / 'H') ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('l' / 'L') ('o' / 'O') ('n' / 'N') ('g' / 'G')) / ('.' ('s' / 'S') ('e' / 'E') ('t' / 'T')) / ('.' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' '8' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' '4' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' ('q' / 'Q') ('u' / 'U') ('a' / 'A') ('d' / 'D')) / ('.' ('t' / 'T') ('c' / 'C')) / ('.' ('l' / 'L') ('o' / 'O') ('c' / 'C') ('a' / 'A') ('l' / 'L') ('e' / 'E') ('n' / 'N') ('t' / 'T') ('r' / 'R') ('y' / 'Y')) / ('.' ('s' / 'S') ('i' / 'I') ('z' / 'Z') ('e' / 'E')) / ('.' ('t' / 'T') ('y' / 'Y') ('p' / 'P') ('e' / 'E')) / ('.' ('u' / 'U') ('l' / 'L') ('e' / 'E') ('b' / 'B') '1' '2' '8') / ('.' ('s' / 'S') ('l' / 'L') ('e' / 'E') ('b' / 'B') '1' '2' '8'))> */
		func() bool {
			position166, tokenIndex166 := position, tokenIndex
			{
				position167 := position
				{
					position168, tokenIndex168 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l169
					}
					position++
					{
						position170, tokenIndex170 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l171
						}
						position++
						goto l170
					l171:
						position, tokenIndex = position170, tokenIndex170
						if buffer[position] != rune('X') {
							goto l169
						}
						position++
					}
				l170:
					{
						position172, tokenIndex172 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l173
						}
						position++
						goto l172
					l173:
						position, tokenIndex = position172, tokenIndex172
						if buffer[position] != rune('W') {
							goto l169
						}
						position++
					}
				l172:
					{
						position174, tokenIndex174 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l175
						}
						position++
						goto l174
					l175:
						position, tokenIndex = position174, tokenIndex174
						if buffer[position] != rune('O') {
							goto l169
						}
						position++
					}
				l174:
					{
						position176, tokenIndex176 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l177
						}
						position++
						goto l176
					l177:
						position, tokenIndex = position176, tokenIndex176
						if buffer[position] != rune('R') {
							goto l169
						}
						position++
					}
				l176:
					{
						position178, tokenIndex178 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l179
						}
						position++
						goto l178
					l179:
						position, tokenIndex = position178, tokenIndex178
						if buffer[position] != rune('D') {
							goto l169
						}
						position++
					}
				l178:
					goto l168
				l169:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l180
					}
					position++
					{
						position181, tokenIndex181 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l182
						}
						position++
						goto l181
					l182:
						position, tokenIndex = position181, tokenIndex181
						if buffer[position] != rune('W') {
							goto l180
						}
						position++
					}
				l181:
					{
						position183, tokenIndex183 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l184
						}
						position++
						goto l183
					l184:
						position, tokenIndex = position183, tokenIndex183
						if buffer[position] != rune('O') {
							goto l180
						}
						position++
					}
				l183:
					{
						position185, tokenIndex185 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l186
						}
						position++
						goto l185
					l186:
						position, tokenIndex = position185, tokenIndex185
						if buffer[position] != rune('R') {
							goto l180
						}
						position++
					}
				l185:
					{
						position187, tokenIndex187 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l188
						}
						position++
						goto l187
					l188:
						position, tokenIndex = position187, tokenIndex187
						if buffer[position] != rune('D') {
							goto l180
						}
						position++
					}
				l187:
					goto l168
				l180:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l189
					}
					position++
					{
						position190, tokenIndex190 := position, tokenIndex
						if buffer[position] != rune('h') {
							goto l191
						}
						position++
						goto l190
					l191:
						position, tokenIndex = position190, tokenIndex190
						if buffer[position] != rune('H') {
							goto l189
						}
						position++
					}
				l190:
					{
						position192, tokenIndex192 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l193
						}
						position++
						goto l192
					l193:
						position, tokenIndex = position192, tokenIndex192
						if buffer[position] != rune('W') {
							goto l189
						}
						position++
					}
				l192:
					{
						position194, tokenIndex194 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l195
						}
						position++
						goto l194
					l195:
						position, tokenIndex = position194, tokenIndex194
						if buffer[position] != rune('O') {
							goto l189
						}
						position++
					}
				l194:
					{
						position196, tokenIndex196 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l197
						}
						position++
						goto l196
					l197:
						position, tokenIndex = position196, tokenIndex196
						if buffer[position] != rune('R') {
							goto l189
						}
						position++
					}
				l196:
					{
						position198, tokenIndex198 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l199
						}
						position++
						goto l198
					l199:
						position, tokenIndex = position198, tokenIndex198
						if buffer[position] != rune('D') {
							goto l189
						}
						position++
					}
				l198:
					goto l168
				l189:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l200
					}
					position++
					{
						position201, tokenIndex201 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l202
						}
						position++
						goto l201
					l202:
						position, tokenIndex = position201, tokenIndex201
						if buffer[position] != rune('L') {
							goto l200
						}
						position++
					}
				l201:
					{
						position203, tokenIndex203 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l204
						}
						position++
						goto l203
					l204:
						position, tokenIndex = position203, tokenIndex203
						if buffer[position] != rune('O') {
							goto l200
						}
						position++
					}
				l203:
					{
						position205, tokenIndex205 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l206
						}
						position++
						goto l205
					l206:
						position, tokenIndex = position205, tokenIndex205
						if buffer[position] != rune('N') {
							goto l200
						}
						position++
					}
				l205:
					{
						position207, tokenIndex207 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l208
						}
						position++
						goto l207
					l208:
						position, tokenIndex = position207, tokenIndex207
						if buffer[position] != rune('G') {
							goto l200
						}
						position++
					}
				l207:
					goto l168
				l200:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l209
					}
					position++
					{
						position210, tokenIndex210 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l211
						}
						position++
						goto l210
					l211:
						position, tokenIndex = position210, tokenIndex210
						if buffer[position] != rune('S') {
							goto l209
						}
						position++
					}
				l210:
					{
						position212, tokenIndex212 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l213
						}
						position++
						goto l212
					l213:
						position, tokenIndex = position212, tokenIndex212
						if buffer[position] != rune('E') {
							goto l209
						}
						position++
					}
				l212:
					{
						position214, tokenIndex214 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l215
						}
						position++
						goto l214
					l215:
						position, tokenIndex = position214, tokenIndex214
						if buffer[position] != rune('T') {
							goto l209
						}
						position++
					}
				l214:
					goto l168
				l209:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l216
					}
					position++
					{
						position217, tokenIndex217 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l218
						}
						position++
						goto l217
					l218:
						position, tokenIndex = position217, tokenIndex217
						if buffer[position] != rune('B') {
							goto l216
						}
						position++
					}
				l217:
					{
						position219, tokenIndex219 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l220
						}
						position++
						goto l219
					l220:
						position, tokenIndex = position219, tokenIndex219
						if buffer[position] != rune('Y') {
							goto l216
						}
						position++
					}
				l219:
					{
						position221, tokenIndex221 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l222
						}
						position++
						goto l221
					l222:
						position, tokenIndex = position221, tokenIndex221
						if buffer[position] != rune('T') {
							goto l216
						}
						position++
					}
				l221:
					{
						position223, tokenIndex223 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l224
						}
						position++
						goto l223
					l224:
						position, tokenIndex = position223, tokenIndex223
						if buffer[position] != rune('E') {
							goto l216
						}
						position++
					}
				l223:
					goto l168
				l216:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l225
					}
					position++
					if buffer[position] != rune('8') {
						goto l225
					}
					position++
					{
						position226, tokenIndex226 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l227
						}
						position++
						goto l226
					l227:
						position, tokenIndex = position226, tokenIndex226
						if buffer[position] != rune('B') {
							goto l225
						}
						position++
					}
				l226:
					{
						position228, tokenIndex228 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l229
						}
						position++
						goto l228
					l229:
						position, tokenIndex = position228, tokenIndex228
						if buffer[position] != rune('Y') {
							goto l225
						}
						position++
					}
				l228:
					{
						position230, tokenIndex230 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l231
						}
						position++
						goto l230
					l231:
						position, tokenIndex = position230, tokenIndex230
						if buffer[position] != rune('T') {
							goto l225
						}
						position++
					}
				l230:
					{
						position232, tokenIndex232 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l233
						}
						position++
						goto l232
					l233:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('E') {
							goto l225
						}
						position++
					}
				l232:
					goto l168
				l225:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l234
					}
					position++
					if buffer[position] != rune('4') {
						goto l234
					}
					position++
					{
						position235, tokenIndex235 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l236
						}
						position++
						goto l235
					l236:
						position, tokenIndex = position235, tokenIndex235
						if buffer[position] != rune('B') {
							goto l234
						}
						position++
					}
				l235:
					{
						position237, tokenIndex237 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l238
						}
						position++
						goto l237
					l238:
						position, tokenIndex = position237, tokenIndex237
						if buffer[position] != rune('Y') {
							goto l234
						}
						position++
					}
				l237:
					{
						position239, tokenIndex239 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l240
						}
						position++
						goto l239
					l240:
						position, tokenIndex = position239, tokenIndex239
						if buffer[position] != rune('T') {
							goto l234
						}
						position++
					}
				l239:
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l242
						}
						position++
						goto l241
					l242:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('E') {
							goto l234
						}
						position++
					}
				l241:
					goto l168
				l234:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l243
					}
					position++
					{
						position244, tokenIndex244 := position, tokenIndex
						if buffer[position] != rune('q') {
							goto l245
						}
						position++
						goto l244
					l245:
						position, tokenIndex = position244, tokenIndex244
						if buffer[position] != rune('Q') {
							goto l243
						}
						position++
					}
				l244:
					{
						position246, tokenIndex246 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l247
						}
						position++
						goto l246
					l247:
						position, tokenIndex = position246, tokenIndex246
						if buffer[position] != rune('U') {
							goto l243
						}
						position++
					}
				l246:
					{
						position248, tokenIndex248 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l249
						}
						position++
						goto l248
					l249:
						position, tokenIndex = position248, tokenIndex248
						if buffer[position] != rune('A') {
							goto l243
						}
						position++
					}
				l248:
					{
						position250, tokenIndex250 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l251
						}
						position++
						goto l250
					l251:
						position, tokenIndex = position250, tokenIndex250
						if buffer[position] != rune('D') {
							goto l243
						}
						position++
					}
				l250:
					goto l168
				l243:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l252
					}
					position++
					{
						position253, tokenIndex253 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l254
						}
						position++
						goto l253
					l254:
						position, tokenIndex = position253, tokenIndex253
						if buffer[position] != rune('T') {
							goto l252
						}
						position++
					}
				l253:
					{
						position255, tokenIndex255 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l256
						}
						position++
						goto l255
					l256:
						position, tokenIndex = position255, tokenIndex255
						if buffer[position] != rune('C') {
							goto l252
						}
						position++
					}
				l255:
					goto l168
				l252:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l257
					}
					position++
					{
						position258, tokenIndex258 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l259
						}
						position++
						goto l258
					l259:
						position, tokenIndex = position258, tokenIndex258
						if buffer[position] != rune('L') {
							goto l257
						}
						position++
					}
				l258:
					{
						position260, tokenIndex260 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l261
						}
						position++
						goto l260
					l261:
						position, tokenIndex = position260, tokenIndex260
						if buffer[position] != rune('O') {
							goto l257
						}
						position++
					}
				l260:
					{
						position262, tokenIndex262 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l263
						}
						position++
						goto l262
					l263:
						position, tokenIndex = position262, tokenIndex262
						if buffer[position] != rune('C') {
							goto l257
						}
						position++
					}
				l262:
					{
						position264, tokenIndex264 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l265
						}
						position++
						goto l264
					l265:
						position, tokenIndex = position264, tokenIndex264
						if buffer[position] != rune('A') {
							goto l257
						}
						position++
					}
				l264:
					{
						position266, tokenIndex266 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l267
						}
						position++
						goto l266
					l267:
						position, tokenIndex = position266, tokenIndex266
						if buffer[position] != rune('L') {
							goto l257
						}
						position++
					}
				l266:
					{
						position268, tokenIndex268 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l269
						}
						position++
						goto l268
					l269:
						position, tokenIndex = position268, tokenIndex268
						if buffer[position] != rune('E') {
							goto l257
						}
						position++
					}
				l268:
					{
						position270, tokenIndex270 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l271
						}
						position++
						goto l270
					l271:
						position, tokenIndex = position270, tokenIndex270
						if buffer[position] != rune('N') {
							goto l257
						}
						position++
					}
				l270:
					{
						position272, tokenIndex272 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l273
						}
						position++
						goto l272
					l273:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('T') {
							goto l257
						}
						position++
					}
				l272:
					{
						position274, tokenIndex274 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l275
						}
						position++
						goto l274
					l275:
						position, tokenIndex = position274, tokenIndex274
						if buffer[position] != rune('R') {
							goto l257
						}
						position++
					}
				l274:
					{
						position276, tokenIndex276 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l277
						}
						position++
						goto l276
					l277:
						position, tokenIndex = position276, tokenIndex276
						if buffer[position] != rune('Y') {
							goto l257
						}
						position++
					}
				l276:
					goto l168
				l257:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l278
					}
					position++
					{
						position279, tokenIndex279 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l280
						}
						position++
						goto l279
					l280:
						position, tokenIndex = position279, tokenIndex279
						if buffer[position] != rune('S') {
							goto l278
						}
						position++
					}
				l279:
					{
						position281, tokenIndex281 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l282
						}
						position++
						goto l281
					l282:
						position, tokenIndex = position281, tokenIndex281
						if buffer[position] != rune('I') {
							goto l278
						}
						position++
					}
				l281:
					{
						position283, tokenIndex283 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l284
						}
						position++
						goto l283
					l284:
						position, tokenIndex = position283, tokenIndex283
						if buffer[position] != rune('Z') {
							goto l278
						}
						position++
					}
				l283:
					{
						position285, tokenIndex285 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l286
						}
						position++
						goto l285
					l286:
						position, tokenIndex = position285, tokenIndex285
						if buffer[position] != rune('E') {
							goto l278
						}
						position++
					}
				l285:
					goto l168
				l278:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l287
					}
					position++
					{
						position288, tokenIndex288 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('T') {
							goto l287
						}
						position++
					}
				l288:
					{
						position290, tokenIndex290 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l291
						}
						position++
						goto l290
					l291:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('Y') {
							goto l287
						}
						position++
					}
				l290:
					{
						position292, tokenIndex292 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l293
						}
						position++
						goto l292
					l293:
						position, tokenIndex = position292, tokenIndex292
						if buffer[position] != rune('P') {
							goto l287
						}
						position++
					}
				l292:
					{
						position294, tokenIndex294 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l295
						}
						position++
						goto l294
					l295:
						position, tokenIndex = position294, tokenIndex294
						if buffer[position] != rune('E') {
							goto l287
						}
						position++
					}
				l294:
					goto l168
				l287:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l296
					}
					position++
					{
						position297, tokenIndex297 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l298
						}
						position++
						goto l297
					l298:
						position, tokenIndex = position297, tokenIndex297
						if buffer[position] != rune('U') {
							goto l296
						}
						position++
					}
				l297:
					{
						position299, tokenIndex299 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l300
						}
						position++
						goto l299
					l300:
						position, tokenIndex = position299, tokenIndex299
						if buffer[position] != rune('L') {
							goto l296
						}
						position++
					}
				l299:
					{
						position301, tokenIndex301 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l302
						}
						position++
						goto l301
					l302:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('E') {
							goto l296
						}
						position++
					}
				l301:
					{
						position303, tokenIndex303 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l304
						}
						position++
						goto l303
					l304:
						position, tokenIndex = position303, tokenIndex303
						if buffer[position] != rune('B') {
							goto l296
						}
						position++
					}
				l303:
					if buffer[position] != rune('1') {
						goto l296
					}
					position++
					if buffer[position] != rune('2') {
						goto l296
					}
					position++
					if buffer[position] != rune('8') {
						goto l296
					}
					position++
					goto l168
				l296:
					position, tokenIndex = position168, tokenIndex168
					if buffer[position] != rune('.') {
						goto l166
					}
					position++
					{
						position305, tokenIndex305 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l306
						}
						position++
						goto l305
					l306:
						position, tokenIndex = position305, tokenIndex305
						if buffer[position] != rune('S') {
							goto l166
						}
						position++
					}
				l305:
					{
						position307, tokenIndex307 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l308
						}
						position++
						goto l307
					l308:
						position, tokenIndex = position307, tokenIndex307
						if buffer[position] != rune('L') {
							goto l166
						}
						position++
					}
				l307:
					{
						position309, tokenIndex309 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l310
						}
						position++
						goto l309
					l310:
						position, tokenIndex = position309, tokenIndex309
						if buffer[position] != rune('E') {
							goto l166
						}
						position++
					}
				l309:
					{
						position311, tokenIndex311 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l312
						}
						position++
						goto l311
					l312:
						position, tokenIndex = position311, tokenIndex311
						if buffer[position] != rune('B') {
							goto l166
						}
						position++
					}
				l311:
					if buffer[position] != rune('1') {
						goto l166
					}
					position++
					if buffer[position] != rune('2') {
						goto l166
					}
					position++
					if buffer[position] != rune('8') {
						goto l166
					}
					position++
				}
			l168:
				add(ruleLabelContainingDirectiveName, position167)
			}
			return true
		l166:
			position, tokenIndex = position166, tokenIndex166
			return false
		},
		/* 15 SymbolArgs <- <(SymbolArg (WS? ',' WS? SymbolArg)*)> */
		func() bool {
			position313, tokenIndex313 := position, tokenIndex
			{
				position314 := position
				if !_rules[ruleSymbolArg]() {
					goto l313
				}
			l315:
				{
					position316, tokenIndex316 := position, tokenIndex
					{
						position317, tokenIndex317 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l317
						}
						goto l318
					l317:
						position, tokenIndex = position317, tokenIndex317
					}
				l318:
					if buffer[position] != rune(',') {
						goto l316
					}
					position++
					{
						position319, tokenIndex319 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l319
						}
						goto l320
					l319:
						position, tokenIndex = position319, tokenIndex319
					}
				l320:
					if !_rules[ruleSymbolArg]() {
						goto l316
					}
					goto l315
				l316:
					position, tokenIndex = position316, tokenIndex316
				}
				add(ruleSymbolArgs, position314)
			}
			return true
		l313:
			position, tokenIndex = position313, tokenIndex313
			return false
		},
		/* 16 SymbolArg <- <SymbolExpr> */
		func() bool {
			position321, tokenIndex321 := position, tokenIndex
			{
				position322 := position
				if !_rules[ruleSymbolExpr]() {
					goto l321
				}
				add(ruleSymbolArg, position322)
			}
			return true
		l321:
			position, tokenIndex = position321, tokenIndex321
			return false
		},
		/* 17 SymbolExpr <- <(SymbolAtom (WS? SymbolOperator WS? SymbolExpr)?)> */
		func() bool {
			position323, tokenIndex323 := position, tokenIndex
			{
				position324 := position
				if !_rules[ruleSymbolAtom]() {
					goto l323
				}
				{
					position325, tokenIndex325 := position, tokenIndex
					{
						position327, tokenIndex327 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l327
						}
						goto l328
					l327:
						position, tokenIndex = position327, tokenIndex327
					}
				l328:
					if !_rules[ruleSymbolOperator]() {
						goto l325
					}
					{
						position329, tokenIndex329 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l329
						}
						goto l330
					l329:
						position, tokenIndex = position329, tokenIndex329
					}
				l330:
					if !_rules[ruleSymbolExpr]() {
						goto l325
					}
					goto l326
				l325:
					position, tokenIndex = position325, tokenIndex325
				}
			l326:
				add(ruleSymbolExpr, position324)
			}
			return true
		l323:
			position, tokenIndex = position323, tokenIndex323
			return false
		},
		/* 18 SymbolAtom <- <(Offset / SymbolType / LocalLabelRef / (LocalSymbol TCMarker?) / (SymbolName Offset) / (SymbolName TCMarker?) / Dot / (OpenParen WS? SymbolExpr WS? CloseParen))> */
		func() bool {
			position331, tokenIndex331 := position, tokenIndex
			{
				position332 := position
				{
					position333, tokenIndex333 := position, tokenIndex
					if !_rules[ruleOffset]() {
						goto l334
					}
					goto l333
				l334:
					position, tokenIndex = position333, tokenIndex333
					if !_rules[ruleSymbolType]() {
						goto l335
					}
					goto l333
				l335:
					position, tokenIndex = position333, tokenIndex333
					if !_rules[ruleLocalLabelRef]() {
						goto l336
					}
					goto l333
				l336:
					position, tokenIndex = position333, tokenIndex333
					if !_rules[ruleLocalSymbol]() {
						goto l337
					}
					{
						position338, tokenIndex338 := position, tokenIndex
						if !_rules[ruleTCMarker]() {
							goto l338
						}
						goto l339
					l338:
						position, tokenIndex = position338, tokenIndex338
					}
				l339:
					goto l333
				l337:
					position, tokenIndex = position333, tokenIndex333
					if !_rules[ruleSymbolName]() {
						goto l340
					}
					if !_rules[ruleOffset]() {
						goto l340
					}
					goto l333
				l340:
					position, tokenIndex = position333, tokenIndex333
					if !_rules[ruleSymbolName]() {
						goto l341
					}
					{
						position342, tokenIndex342 := position, tokenIndex
						if !_rules[ruleTCMarker]() {
							goto l342
						}
						goto l343
					l342:
						position, tokenIndex = position342, tokenIndex342
					}
				l343:
					goto l333
				l341:
					position, tokenIndex = position333, tokenIndex333
					if !_rules[ruleDot]() {
						goto l344
					}
					goto l333
				l344:
					position, tokenIndex = position333, tokenIndex333
					if !_rules[ruleOpenParen]() {
						goto l331
					}
					{
						position345, tokenIndex345 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l345
						}
						goto l346
					l345:
						position, tokenIndex = position345, tokenIndex345
					}
				l346:
					if !_rules[ruleSymbolExpr]() {
						goto l331
					}
					{
						position347, tokenIndex347 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l347
						}
						goto l348
					l347:
						position, tokenIndex = position347, tokenIndex347
					}
				l348:
					if !_rules[ruleCloseParen]() {
						goto l331
					}
				}
			l333:
				add(ruleSymbolAtom, position332)
			}
			return true
		l331:
			position, tokenIndex = position331, tokenIndex331
			return false
		},
		/* 19 SymbolOperator <- <('+' / '-' / '|' / ('<' '<') / ('>' '>'))> */
		func() bool {
			position349, tokenIndex349 := position, tokenIndex
			{
				position350 := position
				{
					position351, tokenIndex351 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l352
					}
					position++
					goto l351
				l352:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('-') {
						goto l353
					}
					position++
					goto l351
				l353:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('|') {
						goto l354
					}
					position++
					goto l351
				l354:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('<') {
						goto l355
					}
					position++
					if buffer[position] != rune('<') {
						goto l355
					}
					position++
					goto l351
				l355:
					position, tokenIndex = position351, tokenIndex351
					if buffer[position] != rune('>') {
						goto l349
					}
					position++
					if buffer[position] != rune('>') {
						goto l349
					}
					position++
				}
			l351:
				add(ruleSymbolOperator, position350)
			}
			return true
		l349:
			position, tokenIndex = position349, tokenIndex349
			return false
		},
		/* 20 OpenParen <- <'('> */
		func() bool {
			position356, tokenIndex356 := position, tokenIndex
			{
				position357 := position
				if buffer[position] != rune('(') {
					goto l356
				}
				position++
				add(ruleOpenParen, position357)
			}
			return true
		l356:
			position, tokenIndex = position356, tokenIndex356
			return false
		},
		/* 21 CloseParen <- <')'> */
		func() bool {
			position358, tokenIndex358 := position, tokenIndex
			{
				position359 := position
				if buffer[position] != rune(')') {
					goto l358
				}
				position++
				add(ruleCloseParen, position359)
			}
			return true
		l358:
			position, tokenIndex = position358, tokenIndex358
			return false
		},
		/* 22 SymbolType <- <(('@' / '%') (('f' 'u' 'n' 'c' 't' 'i' 'o' 'n') / ('o' 'b' 'j' 'e' 'c' 't')))> */
		func() bool {
			position360, tokenIndex360 := position, tokenIndex
			{
				position361 := position
				{
					position362, tokenIndex362 := position, tokenIndex
					if buffer[position] != rune('@') {
						goto l363
					}
					position++
					goto l362
				l363:
					position, tokenIndex = position362, tokenIndex362
					if buffer[position] != rune('%') {
						goto l360
					}
					position++
				}
			l362:
				{
					position364, tokenIndex364 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l365
					}
					position++
					if buffer[position] != rune('u') {
						goto l365
					}
					position++
					if buffer[position] != rune('n') {
						goto l365
					}
					position++
					if buffer[position] != rune('c') {
						goto l365
					}
					position++
					if buffer[position] != rune('t') {
						goto l365
					}
					position++
					if buffer[position] != rune('i') {
						goto l365
					}
					position++
					if buffer[position] != rune('o') {
						goto l365
					}
					position++
					if buffer[position] != rune('n') {
						goto l365
					}
					position++
					goto l364
				l365:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('o') {
						goto l360
					}
					position++
					if buffer[position] != rune('b') {
						goto l360
					}
					position++
					if buffer[position] != rune('j') {
						goto l360
					}
					position++
					if buffer[position] != rune('e') {
						goto l360
					}
					position++
					if buffer[position] != rune('c') {
						goto l360
					}
					position++
					if buffer[position] != rune('t') {
						goto l360
					}
					position++
				}
			l364:
				add(ruleSymbolType, position361)
			}
			return true
		l360:
			position, tokenIndex = position360, tokenIndex360
			return false
		},
		/* 23 Dot <- <'.'> */
		func() bool {
			position366, tokenIndex366 := position, tokenIndex
			{
				position367 := position
				if buffer[position] != rune('.') {
					goto l366
				}
				position++
				add(ruleDot, position367)
			}
			return true
		l366:
			position, tokenIndex = position366, tokenIndex366
			return false
		},
		/* 24 TCMarker <- <('[' 'T' 'C' ']')> */
		func() bool {
			position368, tokenIndex368 := position, tokenIndex
			{
				position369 := position
				if buffer[position] != rune('[') {
					goto l368
				}
				position++
				if buffer[position] != rune('T') {
					goto l368
				}
				position++
				if buffer[position] != rune('C') {
					goto l368
				}
				position++
				if buffer[position] != rune(']') {
					goto l368
				}
				position++
				add(ruleTCMarker, position369)
			}
			return true
		l368:
			position, tokenIndex = position368, tokenIndex368
			return false
		},
		/* 25 EscapedChar <- <('\\' .)> */
		func() bool {
			position370, tokenIndex370 := position, tokenIndex
			{
				position371 := position
				if buffer[position] != rune('\\') {
					goto l370
				}
				position++
				if !matchDot() {
					goto l370
				}
				add(ruleEscapedChar, position371)
			}
			return true
		l370:
			position, tokenIndex = position370, tokenIndex370
			return false
		},
		/* 26 WS <- <(' ' / '\t')+> */
		func() bool {
			position372, tokenIndex372 := position, tokenIndex
			{
				position373 := position
				{
					position376, tokenIndex376 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l377
					}
					position++
					goto l376
				l377:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('\t') {
						goto l372
					}
					position++
				}
			l376:
			l374:
				{
					position375, tokenIndex375 := position, tokenIndex
					{
						position378, tokenIndex378 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l379
						}
						position++
						goto l378
					l379:
						position, tokenIndex = position378, tokenIndex378
						if buffer[position] != rune('\t') {
							goto l375
						}
						position++
					}
				l378:
					goto l374
				l375:
					position, tokenIndex = position375, tokenIndex375
				}
				add(ruleWS, position373)
			}
			return true
		l372:
			position, tokenIndex = position372, tokenIndex372
			return false
		},
		/* 27 Comment <- <((('/' '/') / '#') (!'\n' .)*)> */
		func() bool {
			position380, tokenIndex380 := position, tokenIndex
			{
				position381 := position
				{
					position382, tokenIndex382 := position, tokenIndex
					if buffer[position] != rune('/') {
						goto l383
					}
					position++
					if buffer[position] != rune('/') {
						goto l383
					}
					position++
					goto l382
				l383:
					position, tokenIndex = position382, tokenIndex382
					if buffer[position] != rune('#') {
						goto l380
					}
					position++
				}
			l382:
			l384:
				{
					position385, tokenIndex385 := position, tokenIndex
					{
						position386, tokenIndex386 := position, tokenIndex
						if buffer[position] != rune('\n') {
							goto l386
						}
						position++
						goto l385
					l386:
						position, tokenIndex = position386, tokenIndex386
					}
					if !matchDot() {
						goto l385
					}
					goto l384
				l385:
					position, tokenIndex = position385, tokenIndex385
				}
				add(ruleComment, position381)
			}
			return true
		l380:
			position, tokenIndex = position380, tokenIndex380
			return false
		},
		/* 28 Label <- <((LocalSymbol / LocalLabel / SymbolName) ':')> */
		func() bool {
			position387, tokenIndex387 := position, tokenIndex
			{
				position388 := position
				{
					position389, tokenIndex389 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l390
					}
					goto l389
				l390:
					position, tokenIndex = position389, tokenIndex389
					if !_rules[ruleLocalLabel]() {
						goto l391
					}
					goto l389
				l391:
					position, tokenIndex = position389, tokenIndex389
					if !_rules[ruleSymbolName]() {
						goto l387
					}
				}
			l389:
				if buffer[position] != rune(':') {
					goto l387
				}
				position++
				add(ruleLabel, position388)
			}
			return true
		l387:
			position, tokenIndex = position387, tokenIndex387
			return false
		},
		/* 29 SymbolName <- <(([a-z] / [A-Z] / '.' / '_') ([a-z] / [A-Z] / '.' / ([0-9] / [0-9]) / '$' / '_')*)> */
		func() bool {
			position392, tokenIndex392 := position, tokenIndex
			{
				position393 := position
				{
					position394, tokenIndex394 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l395
					}
					position++
					goto l394
				l395:
					position, tokenIndex = position394, tokenIndex394
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l396
					}
					position++
					goto l394
				l396:
					position, tokenIndex = position394, tokenIndex394
					if buffer[position] != rune('.') {
						goto l397
					}
					position++
					goto l394
				l397:
					position, tokenIndex = position394, tokenIndex394
					if buffer[position] != rune('_') {
						goto l392
					}
					position++
				}
			l394:
			l398:
				{
					position399, tokenIndex399 := position, tokenIndex
					{
						position400, tokenIndex400 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l401
						}
						position++
						goto l400
					l401:
						position, tokenIndex = position400, tokenIndex400
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l402
						}
						position++
						goto l400
					l402:
						position, tokenIndex = position400, tokenIndex400
						if buffer[position] != rune('.') {
							goto l403
						}
						position++
						goto l400
					l403:
						position, tokenIndex = position400, tokenIndex400
						{
							position405, tokenIndex405 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l406
							}
							position++
							goto l405
						l406:
							position, tokenIndex = position405, tokenIndex405
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l404
							}
							position++
						}
					l405:
						goto l400
					l404:
						position, tokenIndex = position400, tokenIndex400
						if buffer[position] != rune('$') {
							goto l407
						}
						position++
						goto l400
					l407:
						position, tokenIndex = position400, tokenIndex400
						if buffer[position] != rune('_') {
							goto l399
						}
						position++
					}
				l400:
					goto l398
				l399:
					position, tokenIndex = position399, tokenIndex399
				}
				add(ruleSymbolName, position393)
			}
			return true
		l392:
			position, tokenIndex = position392, tokenIndex392
			return false
		},
		/* 30 LocalSymbol <- <('.' 'L' ([a-z] / [A-Z] / ([a-z] / [A-Z]) / '.' / ([0-9] / [0-9]) / '$' / '_')+)> */
		func() bool {
			position408, tokenIndex408 := position, tokenIndex
			{
				position409 := position
				if buffer[position] != rune('.') {
					goto l408
				}
				position++
				if buffer[position] != rune('L') {
					goto l408
				}
				position++
				{
					position412, tokenIndex412 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l413
					}
					position++
					goto l412
				l413:
					position, tokenIndex = position412, tokenIndex412
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l414
					}
					position++
					goto l412
				l414:
					position, tokenIndex = position412, tokenIndex412
					{
						position416, tokenIndex416 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l417
						}
						position++
						goto l416
					l417:
						position, tokenIndex = position416, tokenIndex416
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l415
						}
						position++
					}
				l416:
					goto l412
				l415:
					position, tokenIndex = position412, tokenIndex412
					if buffer[position] != rune('.') {
						goto l418
					}
					position++
					goto l412
				l418:
					position, tokenIndex = position412, tokenIndex412
					{
						position420, tokenIndex420 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l421
						}
						position++
						goto l420
					l421:
						position, tokenIndex = position420, tokenIndex420
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l419
						}
						position++
					}
				l420:
					goto l412
				l419:
					position, tokenIndex = position412, tokenIndex412
					if buffer[position] != rune('$') {
						goto l422
					}
					position++
					goto l412
				l422:
					position, tokenIndex = position412, tokenIndex412
					if buffer[position] != rune('_') {
						goto l408
					}
					position++
				}
			l412:
			l410:
				{
					position411, tokenIndex411 := position, tokenIndex
					{
						position423, tokenIndex423 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l424
						}
						position++
						goto l423
					l424:
						position, tokenIndex = position423, tokenIndex423
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l425
						}
						position++
						goto l423
					l425:
						position, tokenIndex = position423, tokenIndex423
						{
							position427, tokenIndex427 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l428
							}
							position++
							goto l427
						l428:
							position, tokenIndex = position427, tokenIndex427
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l426
							}
							position++
						}
					l427:
						goto l423
					l426:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('.') {
							goto l429
						}
						position++
						goto l423
					l429:
						position, tokenIndex = position423, tokenIndex423
						{
							position431, tokenIndex431 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l432
							}
							position++
							goto l431
						l432:
							position, tokenIndex = position431, tokenIndex431
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l430
							}
							position++
						}
					l431:
						goto l423
					l430:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('$') {
							goto l433
						}
						position++
						goto l423
					l433:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('_') {
							goto l411
						}
						position++
					}
				l423:
					goto l410
				l411:
					position, tokenIndex = position411, tokenIndex411
				}
				add(ruleLocalSymbol, position409)
			}
			return true
		l408:
			position, tokenIndex = position408, tokenIndex408
			return false
		},
		/* 31 LocalLabel <- <([0-9] ([0-9] / '$')*)> */
		func() bool {
			position434, tokenIndex434 := position, tokenIndex
			{
				position435 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l434
				}
				position++
			l436:
				{
					position437, tokenIndex437 := position, tokenIndex
					{
						position438, tokenIndex438 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l439
						}
						position++
						goto l438
					l439:
						position, tokenIndex = position438, tokenIndex438
						if buffer[position] != rune('$') {
							goto l437
						}
						position++
					}
				l438:
					goto l436
				l437:
					position, tokenIndex = position437, tokenIndex437
				}
				add(ruleLocalLabel, position435)
			}
			return true
		l434:
			position, tokenIndex = position434, tokenIndex434
			return false
		},
		/* 32 LocalLabelRef <- <([0-9] ([0-9] / '$')* ('b' / 'f'))> */
		func() bool {
			position440, tokenIndex440 := position, tokenIndex
			{
				position441 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l440
				}
				position++
			l442:
				{
					position443, tokenIndex443 := position, tokenIndex
					{
						position444, tokenIndex444 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l445
						}
						position++
						goto l444
					l445:
						position, tokenIndex = position444, tokenIndex444
						if buffer[position] != rune('$') {
							goto l443
						}
						position++
					}
				l444:
					goto l442
				l443:
					position, tokenIndex = position443, tokenIndex443
				}
				{
					position446, tokenIndex446 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l447
					}
					position++
					goto l446
				l447:
					position, tokenIndex = position446, tokenIndex446
					if buffer[position] != rune('f') {
						goto l440
					}
					position++
				}
			l446:
				add(ruleLocalLabelRef, position441)
			}
			return true
		l440:
			position, tokenIndex = position440, tokenIndex440
			return false
		},
		/* 33 Instruction <- <(InstructionName (WS InstructionArg (WS? ','? WS? InstructionArg)*)?)> */
		func() bool {
			position448, tokenIndex448 := position, tokenIndex
			{
				position449 := position
				if !_rules[ruleInstructionName]() {
					goto l448
				}
				{
					position450, tokenIndex450 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l450
					}
					if !_rules[ruleInstructionArg]() {
						goto l450
					}
				l452:
					{
						position453, tokenIndex453 := position, tokenIndex
						{
							position454, tokenIndex454 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l454
							}
							goto l455
						l454:
							position, tokenIndex = position454, tokenIndex454
						}
					l455:
						{
							position456, tokenIndex456 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l456
							}
							position++
							goto l457
						l456:
							position, tokenIndex = position456, tokenIndex456
						}
					l457:
						{
							position458, tokenIndex458 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l458
							}
							goto l459
						l458:
							position, tokenIndex = position458, tokenIndex458
						}
					l459:
						if !_rules[ruleInstructionArg]() {
							goto l453
						}
						goto l452
					l453:
						position, tokenIndex = position453, tokenIndex453
					}
					goto l451
				l450:
					position, tokenIndex = position450, tokenIndex450
				}
			l451:
				add(ruleInstruction, position449)
			}
			return true
		l448:
			position, tokenIndex = position448, tokenIndex448
			return false
		},
		/* 34 InstructionName <- <(([a-z] / [A-Z]) ([a-z] / [A-Z] / '.' / ([0-9] / [0-9]))* ('.' / '+' / '-')?)> */
		func() bool {
			position460, tokenIndex460 := position, tokenIndex
			{
				position461 := position
				{
					position462, tokenIndex462 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l463
					}
					position++
					goto l462
				l463:
					position, tokenIndex = position462, tokenIndex462
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l460
					}
					position++
				}
			l462:
			l464:
				{
					position465, tokenIndex465 := position, tokenIndex
					{
						position466, tokenIndex466 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l467
						}
						position++
						goto l466
					l467:
						position, tokenIndex = position466, tokenIndex466
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l468
						}
						position++
						goto l466
					l468:
						position, tokenIndex = position466, tokenIndex466
						if buffer[position] != rune('.') {
							goto l469
						}
						position++
						goto l466
					l469:
						position, tokenIndex = position466, tokenIndex466
						{
							position470, tokenIndex470 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l471
							}
							position++
							goto l470
						l471:
							position, tokenIndex = position470, tokenIndex470
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l465
							}
							position++
						}
					l470:
					}
				l466:
					goto l464
				l465:
					position, tokenIndex = position465, tokenIndex465
				}
				{
					position472, tokenIndex472 := position, tokenIndex
					{
						position474, tokenIndex474 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l475
						}
						position++
						goto l474
					l475:
						position, tokenIndex = position474, tokenIndex474
						if buffer[position] != rune('+') {
							goto l476
						}
						position++
						goto l474
					l476:
						position, tokenIndex = position474, tokenIndex474
						if buffer[position] != rune('-') {
							goto l472
						}
						position++
					}
				l474:
					goto l473
				l472:
					position, tokenIndex = position472, tokenIndex472
				}
			l473:
				add(ruleInstructionName, position461)
			}
			return true
		l460:
			position, tokenIndex = position460, tokenIndex460
			return false
		},
		/* 35 InstructionArg <- <(IndirectionIndicator? (ARMConstantTweak / RegisterOrConstant / LocalLabelRef / TOCRefHigh / TOCRefLow / GOTLocation / GOTSymbolOffset / MemoryRef) AVX512Token*)> */
		func() bool {
			position477, tokenIndex477 := position, tokenIndex
			{
				position478 := position
				{
					position479, tokenIndex479 := position, tokenIndex
					if !_rules[ruleIndirectionIndicator]() {
						goto l479
					}
					goto l480
				l479:
					position, tokenIndex = position479, tokenIndex479
				}
			l480:
				{
					position481, tokenIndex481 := position, tokenIndex
					if !_rules[ruleARMConstantTweak]() {
						goto l482
					}
					goto l481
				l482:
					position, tokenIndex = position481, tokenIndex481
					if !_rules[ruleRegisterOrConstant]() {
						goto l483
					}
					goto l481
				l483:
					position, tokenIndex = position481, tokenIndex481
					if !_rules[ruleLocalLabelRef]() {
						goto l484
					}
					goto l481
				l484:
					position, tokenIndex = position481, tokenIndex481
					if !_rules[ruleTOCRefHigh]() {
						goto l485
					}
					goto l481
				l485:
					position, tokenIndex = position481, tokenIndex481
					if !_rules[ruleTOCRefLow]() {
						goto l486
					}
					goto l481
				l486:
					position, tokenIndex = position481, tokenIndex481
					if !_rules[ruleGOTLocation]() {
						goto l487
					}
					goto l481
				l487:
					position, tokenIndex = position481, tokenIndex481
					if !_rules[ruleGOTSymbolOffset]() {
						goto l488
					}
					goto l481
				l488:
					position, tokenIndex = position481, tokenIndex481
					if !_rules[ruleMemoryRef]() {
						goto l477
					}
				}
			l481:
			l489:
				{
					position490, tokenIndex490 := position, tokenIndex
					if !_rules[ruleAVX512Token]() {
						goto l490
					}
					goto l489
				l490:
					position, tokenIndex = position490, tokenIndex490
				}
				add(ruleInstructionArg, position478)
			}
			return true
		l477:
			position, tokenIndex = position477, tokenIndex477
			return false
		},
		/* 36 GOTLocation <- <('$' '_' 'G' 'L' 'O' 'B' 'A' 'L' '_' 'O' 'F' 'F' 'S' 'E' 'T' '_' 'T' 'A' 'B' 'L' 'E' '_' '-' LocalSymbol)> */
		func() bool {
			position491, tokenIndex491 := position, tokenIndex
			{
				position492 := position
				if buffer[position] != rune('$') {
					goto l491
				}
				position++
				if buffer[position] != rune('_') {
					goto l491
				}
				position++
				if buffer[position] != rune('G') {
					goto l491
				}
				position++
				if buffer[position] != rune('L') {
					goto l491
				}
				position++
				if buffer[position] != rune('O') {
					goto l491
				}
				position++
				if buffer[position] != rune('B') {
					goto l491
				}
				position++
				if buffer[position] != rune('A') {
					goto l491
				}
				position++
				if buffer[position] != rune('L') {
					goto l491
				}
				position++
				if buffer[position] != rune('_') {
					goto l491
				}
				position++
				if buffer[position] != rune('O') {
					goto l491
				}
				position++
				if buffer[position] != rune('F') {
					goto l491
				}
				position++
				if buffer[position] != rune('F') {
					goto l491
				}
				position++
				if buffer[position] != rune('S') {
					goto l491
				}
				position++
				if buffer[position] != rune('E') {
					goto l491
				}
				position++
				if buffer[position] != rune('T') {
					goto l491
				}
				position++
				if buffer[position] != rune('_') {
					goto l491
				}
				position++
				if buffer[position] != rune('T') {
					goto l491
				}
				position++
				if buffer[position] != rune('A') {
					goto l491
				}
				position++
				if buffer[position] != rune('B') {
					goto l491
				}
				position++
				if buffer[position] != rune('L') {
					goto l491
				}
				position++
				if buffer[position] != rune('E') {
					goto l491
				}
				position++
				if buffer[position] != rune('_') {
					goto l491
				}
				position++
				if buffer[position] != rune('-') {
					goto l491
				}
				position++
				if !_rules[ruleLocalSymbol]() {
					goto l491
				}
				add(ruleGOTLocation, position492)
			}
			return true
		l491:
			position, tokenIndex = position491, tokenIndex491
			return false
		},
		/* 37 GOTSymbolOffset <- <(('$' SymbolName ('@' 'G' 'O' 'T') ('O' 'F' 'F')?) / (':' ('g' / 'G') ('o' / 'O') ('t' / 'T') ':' SymbolName))> */
		func() bool {
			position493, tokenIndex493 := position, tokenIndex
			{
				position494 := position
				{
					position495, tokenIndex495 := position, tokenIndex
					if buffer[position] != rune('$') {
						goto l496
					}
					position++
					if !_rules[ruleSymbolName]() {
						goto l496
					}
					if buffer[position] != rune('@') {
						goto l496
					}
					position++
					if buffer[position] != rune('G') {
						goto l496
					}
					position++
					if buffer[position] != rune('O') {
						goto l496
					}
					position++
					if buffer[position] != rune('T') {
						goto l496
					}
					position++
					{
						position497, tokenIndex497 := position, tokenIndex
						if buffer[position] != rune('O') {
							goto l497
						}
						position++
						if buffer[position] != rune('F') {
							goto l497
						}
						position++
						if buffer[position] != rune('F') {
							goto l497
						}
						position++
						goto l498
					l497:
						position, tokenIndex = position497, tokenIndex497
					}
				l498:
					goto l495
				l496:
					position, tokenIndex = position495, tokenIndex495
					if buffer[position] != rune(':') {
						goto l493
					}
					position++
					{
						position499, tokenIndex499 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l500
						}
						position++
						goto l499
					l500:
						position, tokenIndex = position499, tokenIndex499
						if buffer[position] != rune('G') {
							goto l493
						}
						position++
					}
				l499:
					{
						position501, tokenIndex501 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l502
						}
						position++
						goto l501
					l502:
						position, tokenIndex = position501, tokenIndex501
						if buffer[position] != rune('O') {
							goto l493
						}
						position++
					}
				l501:
					{
						position503, tokenIndex503 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l504
						}
						position++
						goto l503
					l504:
						position, tokenIndex = position503, tokenIndex503
						if buffer[position] != rune('T') {
							goto l493
						}
						position++
					}
				l503:
					if buffer[position] != rune(':') {
						goto l493
					}
					position++
					if !_rules[ruleSymbolName]() {
						goto l493
					}
				}
			l495:
				add(ruleGOTSymbolOffset, position494)
			}
			return true
		l493:
			position, tokenIndex = position493, tokenIndex493
			return false
		},
		/* 38 AVX512Token <- <(WS? '{' '%'? ([0-9] / [a-z])* '}')> */
		func() bool {
			position505, tokenIndex505 := position, tokenIndex
			{
				position506 := position
				{
					position507, tokenIndex507 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l507
					}
					goto l508
				l507:
					position, tokenIndex = position507, tokenIndex507
				}
			l508:
				if buffer[position] != rune('{') {
					goto l505
				}
				position++
				{
					position509, tokenIndex509 := position, tokenIndex
					if buffer[position] != rune('%') {
						goto l509
					}
					position++
					goto l510
				l509:
					position, tokenIndex = position509, tokenIndex509
				}
			l510:
			l511:
				{
					position512, tokenIndex512 := position, tokenIndex
					{
						position513, tokenIndex513 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l514
						}
						position++
						goto l513
					l514:
						position, tokenIndex = position513, tokenIndex513
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l512
						}
						position++
					}
				l513:
					goto l511
				l512:
					position, tokenIndex = position512, tokenIndex512
				}
				if buffer[position] != rune('}') {
					goto l505
				}
				position++
				add(ruleAVX512Token, position506)
			}
			return true
		l505:
			position, tokenIndex = position505, tokenIndex505
			return false
		},
		/* 39 TOCRefHigh <- <('.' 'T' 'O' 'C' '.' '-' (('0' 'b') / ('.' 'L' ([a-z] / [A-Z] / '_' / [0-9])+)) ('@' ('h' / 'H') ('a' / 'A')))> */
		func() bool {
			position515, tokenIndex515 := position, tokenIndex
			{
				position516 := position
				if buffer[position] != rune('.') {
					goto l515
				}
				position++
				if buffer[position] != rune('T') {
					goto l515
				}
				position++
				if buffer[position] != rune('O') {
					goto l515
				}
				position++
				if buffer[position] != rune('C') {
					goto l515
				}
				position++
				if buffer[position] != rune('.') {
					goto l515
				}
				position++
				if buffer[position] != rune('-') {
					goto l515
				}
				position++
				{
					position517, tokenIndex517 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l518
					}
					position++
					if buffer[position] != rune('b') {
						goto l518
					}
					position++
					goto l517
				l518:
					position, tokenIndex = position517, tokenIndex517
					if buffer[position] != rune('.') {
						goto l515
					}
					position++
					if buffer[position] != rune('L') {
						goto l515
					}
					position++
					{
						position521, tokenIndex521 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l522
						}
						position++
						goto l521
					l522:
						position, tokenIndex = position521, tokenIndex521
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l523
						}
						position++
						goto l521
					l523:
						position, tokenIndex = position521, tokenIndex521
						if buffer[position] != rune('_') {
							goto l524
						}
						position++
						goto l521
					l524:
						position, tokenIndex = position521, tokenIndex521
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l515
						}
						position++
					}
				l521:
				l519:
					{
						position520, tokenIndex520 := position, tokenIndex
						{
							position525, tokenIndex525 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l526
							}
							position++
							goto l525
						l526:
							position, tokenIndex = position525, tokenIndex525
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l527
							}
							position++
							goto l525
						l527:
							position, tokenIndex = position525, tokenIndex525
							if buffer[position] != rune('_') {
								goto l528
							}
							position++
							goto l525
						l528:
							position, tokenIndex = position525, tokenIndex525
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l520
							}
							position++
						}
					l525:
						goto l519
					l520:
						position, tokenIndex = position520, tokenIndex520
					}
				}
			l517:
				if buffer[position] != rune('@') {
					goto l515
				}
				position++
				{
					position529, tokenIndex529 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l530
					}
					position++
					goto l529
				l530:
					position, tokenIndex = position529, tokenIndex529
					if buffer[position] != rune('H') {
						goto l515
					}
					position++
				}
			l529:
				{
					position531, tokenIndex531 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l532
					}
					position++
					goto l531
				l532:
					position, tokenIndex = position531, tokenIndex531
					if buffer[position] != rune('A') {
						goto l515
					}
					position++
				}
			l531:
				add(ruleTOCRefHigh, position516)
			}
			return true
		l515:
			position, tokenIndex = position515, tokenIndex515
			return false
		},
		/* 40 TOCRefLow <- <('.' 'T' 'O' 'C' '.' '-' (('0' 'b') / ('.' 'L' ([a-z] / [A-Z] / '_' / [0-9])+)) ('@' ('l' / 'L')))> */
		func() bool {
			position533, tokenIndex533 := position, tokenIndex
			{
				position534 := position
				if buffer[position] != rune('.') {
					goto l533
				}
				position++
				if buffer[position] != rune('T') {
					goto l533
				}
				position++
				if buffer[position] != rune('O') {
					goto l533
				}
				position++
				if buffer[position] != rune('C') {
					goto l533
				}
				position++
				if buffer[position] != rune('.') {
					goto l533
				}
				position++
				if buffer[position] != rune('-') {
					goto l533
				}
				position++
				{
					position535, tokenIndex535 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l536
					}
					position++
					if buffer[position] != rune('b') {
						goto l536
					}
					position++
					goto l535
				l536:
					position, tokenIndex = position535, tokenIndex535
					if buffer[position] != rune('.') {
						goto l533
					}
					position++
					if buffer[position] != rune('L') {
						goto l533
					}
					position++
					{
						position539, tokenIndex539 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l540
						}
						position++
						goto l539
					l540:
						position, tokenIndex = position539, tokenIndex539
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l541
						}
						position++
						goto l539
					l541:
						position, tokenIndex = position539, tokenIndex539
						if buffer[position] != rune('_') {
							goto l542
						}
						position++
						goto l539
					l542:
						position, tokenIndex = position539, tokenIndex539
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l533
						}
						position++
					}
				l539:
				l537:
					{
						position538, tokenIndex538 := position, tokenIndex
						{
							position543, tokenIndex543 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l544
							}
							position++
							goto l543
						l544:
							position, tokenIndex = position543, tokenIndex543
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l545
							}
							position++
							goto l543
						l545:
							position, tokenIndex = position543, tokenIndex543
							if buffer[position] != rune('_') {
								goto l546
							}
							position++
							goto l543
						l546:
							position, tokenIndex = position543, tokenIndex543
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l538
							}
							position++
						}
					l543:
						goto l537
					l538:
						position, tokenIndex = position538, tokenIndex538
					}
				}
			l535:
				if buffer[position] != rune('@') {
					goto l533
				}
				position++
				{
					position547, tokenIndex547 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l548
					}
					position++
					goto l547
				l548:
					position, tokenIndex = position547, tokenIndex547
					if buffer[position] != rune('L') {
						goto l533
					}
					position++
				}
			l547:
				add(ruleTOCRefLow, position534)
			}
			return true
		l533:
			position, tokenIndex = position533, tokenIndex533
			return false
		},
		/* 41 IndirectionIndicator <- <'*'> */
		func() bool {
			position549, tokenIndex549 := position, tokenIndex
			{
				position550 := position
				if buffer[position] != rune('*') {
					goto l549
				}
				position++
				add(ruleIndirectionIndicator, position550)
			}
			return true
		l549:
			position, tokenIndex = position549, tokenIndex549
			return false
		},
		/* 42 RegisterOrConstant <- <((('%' ([a-z] / [A-Z]) ([a-z] / [A-Z] / ([0-9] / [0-9]))*) / ('$' [0-9]+ WS? '*' WS? '(' [0-9]+ WS? '-' WS? [0-9]+ ')') / ('$'? ((Offset Offset) / Offset)) / ('#' Offset ('*' [0-9]+ ('-' [0-9] [0-9]*)?)?) / ('#' '~'? '(' [0-9] WS? ('<' '<') WS? [0-9] [0-9]? ')') / (('#' / '$') '~'? ('0' 'x')? ([0-9] / [0-9] / ([a-f] / [A-F]))+) / ('$' '(' '-' [0-9]+ ')') / ARMRegister) !('f' / 'b' / ':' / '(' / '+' / '-'))> */
		func() bool {
			position551, tokenIndex551 := position, tokenIndex
			{
				position552 := position
				{
					position553, tokenIndex553 := position, tokenIndex
					if buffer[position] != rune('%') {
						goto l554
					}
					position++
					{
						position555, tokenIndex555 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l556
						}
						position++
						goto l555
					l556:
						position, tokenIndex = position555, tokenIndex555
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l554
						}
						position++
					}
				l555:
				l557:
					{
						position558, tokenIndex558 := position, tokenIndex
						{
							position559, tokenIndex559 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l560
							}
							position++
							goto l559
						l560:
							position, tokenIndex = position559, tokenIndex559
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l561
							}
							position++
							goto l559
						l561:
							position, tokenIndex = position559, tokenIndex559
							{
								position562, tokenIndex562 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l563
								}
								position++
								goto l562
							l563:
								position, tokenIndex = position562, tokenIndex562
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l558
								}
								position++
							}
						l562:
						}
					l559:
						goto l557
					l558:
						position, tokenIndex = position558, tokenIndex558
					}
					goto l553
				l554:
					position, tokenIndex = position553, tokenIndex553
					if buffer[position] != rune('$') {
						goto l564
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l564
					}
					position++
				l565:
					{
						position566, tokenIndex566 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l566
						}
						position++
						goto l565
					l566:
						position, tokenIndex = position566, tokenIndex566
					}
					{
						position567, tokenIndex567 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l567
						}
						goto l568
					l567:
						position, tokenIndex = position567, tokenIndex567
					}
				l568:
					if buffer[position] != rune('*') {
						goto l564
					}
					position++
					{
						position569, tokenIndex569 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l569
						}
						goto l570
					l569:
						position, tokenIndex = position569, tokenIndex569
					}
				l570:
					if buffer[position] != rune('(') {
						goto l564
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l564
					}
					position++
				l571:
					{
						position572, tokenIndex572 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l572
						}
						position++
						goto l571
					l572:
						position, tokenIndex = position572, tokenIndex572
					}
					{
						position573, tokenIndex573 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l573
						}
						goto l574
					l573:
						position, tokenIndex = position573, tokenIndex573
					}
				l574:
					if buffer[position] != rune('-') {
						goto l564
					}
					position++
					{
						position575, tokenIndex575 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l575
						}
						goto l576
					l575:
						position, tokenIndex = position575, tokenIndex575
					}
				l576:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l564
					}
					position++
				l577:
					{
						position578, tokenIndex578 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l578
						}
						position++
						goto l577
					l578:
						position, tokenIndex = position578, tokenIndex578
					}
					if buffer[position] != rune(')') {
						goto l564
					}
					position++
					goto l553
				l564:
					position, tokenIndex = position553, tokenIndex553
					{
						position580, tokenIndex580 := position, tokenIndex
						if buffer[position] != rune('$') {
							goto l580
						}
						position++
						goto l581
					l580:
						position, tokenIndex = position580, tokenIndex580
					}
				l581:
					{
						position582, tokenIndex582 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l583
						}
						if !_rules[ruleOffset]() {
							goto l583
						}
						goto l582
					l583:
						position, tokenIndex = position582, tokenIndex582
						if !_rules[ruleOffset]() {
							goto l579
						}
					}
				l582:
					goto l553
				l579:
					position, tokenIndex = position553, tokenIndex553
					if buffer[position] != rune('#') {
						goto l584
					}
					position++
					if !_rules[ruleOffset]() {
						goto l584
					}
					{
						position585, tokenIndex585 := position, tokenIndex
						if buffer[position] != rune('*') {
							goto l585
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l585
						}
						position++
					l587:
						{
							position588, tokenIndex588 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l588
							}
							position++
							goto l587
						l588:
							position, tokenIndex = position588, tokenIndex588
						}
						{
							position589, tokenIndex589 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l589
							}
							position++
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l589
							}
							position++
						l591:
							{
								position592, tokenIndex592 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l592
								}
								position++
								goto l591
							l592:
								position, tokenIndex = position592, tokenIndex592
							}
							goto l590
						l589:
							position, tokenIndex = position589, tokenIndex589
						}
					l590:
						goto l586
					l585:
						position, tokenIndex = position585, tokenIndex585
					}
				l586:
					goto l553
				l584:
					position, tokenIndex = position553, tokenIndex553
					if buffer[position] != rune('#') {
						goto l593
					}
					position++
					{
						position594, tokenIndex594 := position, tokenIndex
						if buffer[position] != rune('~') {
							goto l594
						}
						position++
						goto l595
					l594:
						position, tokenIndex = position594, tokenIndex594
					}
				l595:
					if buffer[position] != rune('(') {
						goto l593
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l593
					}
					position++
					{
						position596, tokenIndex596 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l596
						}
						goto l597
					l596:
						position, tokenIndex = position596, tokenIndex596
					}
				l597:
					if buffer[position] != rune('<') {
						goto l593
					}
					position++
					if buffer[position] != rune('<') {
						goto l593
					}
					position++
					{
						position598, tokenIndex598 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l598
						}
						goto l599
					l598:
						position, tokenIndex = position598, tokenIndex598
					}
				l599:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l593
					}
					position++
					{
						position600, tokenIndex600 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l600
						}
						position++
						goto l601
					l600:
						position, tokenIndex = position600, tokenIndex600
					}
				l601:
					if buffer[position] != rune(')') {
						goto l593
					}
					position++
					goto l553
				l593:
					position, tokenIndex = position553, tokenIndex553
					{
						position603, tokenIndex603 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l604
						}
						position++
						goto l603
					l604:
						position, tokenIndex = position603, tokenIndex603
						if buffer[position] != rune('$') {
							goto l602
						}
						position++
					}
				l603:
					{
						position605, tokenIndex605 := position, tokenIndex
						if buffer[position] != rune('~') {
							goto l605
						}
						position++
						goto l606
					l605:
						position, tokenIndex = position605, tokenIndex605
					}
				l606:
					{
						position607, tokenIndex607 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l607
						}
						position++
						if buffer[position] != rune('x') {
							goto l607
						}
						position++
						goto l608
					l607:
						position, tokenIndex = position607, tokenIndex607
					}
				l608:
					{
						position611, tokenIndex611 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l612
						}
						position++
						goto l611
					l612:
						position, tokenIndex = position611, tokenIndex611
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l613
						}
						position++
						goto l611
					l613:
						position, tokenIndex = position611, tokenIndex611
						{
							position614, tokenIndex614 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('f') {
								goto l615
							}
							position++
							goto l614
						l615:
							position, tokenIndex = position614, tokenIndex614
							if c := buffer[position]; c < rune('A') || c > rune('F') {
								goto l602
							}
							position++
						}
					l614:
					}
				l611:
				l609:
					{
						position610, tokenIndex610 := position, tokenIndex
						{
							position616, tokenIndex616 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l617
							}
							position++
							goto l616
						l617:
							position, tokenIndex = position616, tokenIndex616
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l618
							}
							position++
							goto l616
						l618:
							position, tokenIndex = position616, tokenIndex616
							{
								position619, tokenIndex619 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('f') {
									goto l620
								}
								position++
								goto l619
							l620:
								position, tokenIndex = position619, tokenIndex619
								if c := buffer[position]; c < rune('A') || c > rune('F') {
									goto l610
								}
								position++
							}
						l619:
						}
					l616:
						goto l609
					l610:
						position, tokenIndex = position610, tokenIndex610
					}
					goto l553
				l602:
					position, tokenIndex = position553, tokenIndex553
					if buffer[position] != rune('$') {
						goto l621
					}
					position++
					if buffer[position] != rune('(') {
						goto l621
					}
					position++
					if buffer[position] != rune('-') {
						goto l621
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l621
					}
					position++
				l622:
					{
						position623, tokenIndex623 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l623
						}
						position++
						goto l622
					l623:
						position, tokenIndex = position623, tokenIndex623
					}
					if buffer[position] != rune(')') {
						goto l621
					}
					position++
					goto l553
				l621:
					position, tokenIndex = position553, tokenIndex553
					if !_rules[ruleARMRegister]() {
						goto l551
					}
				}
			l553:
				{
					position624, tokenIndex624 := position, tokenIndex
					{
						position625, tokenIndex625 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l626
						}
						position++
						goto l625
					l626:
						position, tokenIndex = position625, tokenIndex625
						if buffer[position] != rune('b') {
							goto l627
						}
						position++
						goto l625
					l627:
						position, tokenIndex = position625, tokenIndex625
						if buffer[position] != rune(':') {
							goto l628
						}
						position++
						goto l625
					l628:
						position, tokenIndex = position625, tokenIndex625
						if buffer[position] != rune('(') {
							goto l629
						}
						position++
						goto l625
					l629:
						position, tokenIndex = position625, tokenIndex625
						if buffer[position] != rune('+') {
							goto l630
						}
						position++
						goto l625
					l630:
						position, tokenIndex = position625, tokenIndex625
						if buffer[position] != rune('-') {
							goto l624
						}
						position++
					}
				l625:
					goto l551
				l624:
					position, tokenIndex = position624, tokenIndex624
				}
				add(ruleRegisterOrConstant, position552)
			}
			return true
		l551:
			position, tokenIndex = position551, tokenIndex551
			return false
		},
		/* 43 ARMConstantTweak <- <((((('u' / 's') (('x' / 'X') ('t' / 'T')) ('x' / 'w' / 'h' / 'b')) / (('l' / 'L') ('s' / 'S') ('l' / 'L')) / (('l' / 'L') ('s' / 'S') ('r' / 'R')) / (('r' / 'R') ('o' / 'O') ('r' / 'R')) / (('a' / 'A') ('s' / 'S') ('r' / 'R'))) (WS '#'? Offset)?) / (('m' / 'M') ('u' / 'U') ('l' / 'L') ' ' ('v' / 'V') ('l' / 'L')))> */
		func() bool {
			position631, tokenIndex631 := position, tokenIndex
			{
				position632 := position
				{
					position633, tokenIndex633 := position, tokenIndex
					{
						position635, tokenIndex635 := position, tokenIndex
						{
							position637, tokenIndex637 := position, tokenIndex
							if buffer[position] != rune('u') {
								goto l638
							}
							position++
							goto l637
						l638:
							position, tokenIndex = position637, tokenIndex637
							if buffer[position] != rune('s') {
								goto l636
							}
							position++
						}
					l637:
						{
							position639, tokenIndex639 := position, tokenIndex
							if buffer[position] != rune('x') {
								goto l640
							}
							position++
							goto l639
						l640:
							position, tokenIndex = position639, tokenIndex639
							if buffer[position] != rune('X') {
								goto l636
							}
							position++
						}
					l639:
						{
							position641, tokenIndex641 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l642
							}
							position++
							goto l641
						l642:
							position, tokenIndex = position641, tokenIndex641
							if buffer[position] != rune('T') {
								goto l636
							}
							position++
						}
					l641:
						{
							position643, tokenIndex643 := position, tokenIndex
							if buffer[position] != rune('x') {
								goto l644
							}
							position++
							goto l643
						l644:
							position, tokenIndex = position643, tokenIndex643
							if buffer[position] != rune('w') {
								goto l645
							}
							position++
							goto l643
						l645:
							position, tokenIndex = position643, tokenIndex643
							if buffer[position] != rune('h') {
								goto l646
							}
							position++
							goto l643
						l646:
							position, tokenIndex = position643, tokenIndex643
							if buffer[position] != rune('b') {
								goto l636
							}
							position++
						}
					l643:
						goto l635
					l636:
						position, tokenIndex = position635, tokenIndex635
						{
							position648, tokenIndex648 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l649
							}
							position++
							goto l648
						l649:
							position, tokenIndex = position648, tokenIndex648
							if buffer[position] != rune('L') {
								goto l647
							}
							position++
						}
					l648:
						{
							position650, tokenIndex650 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l651
							}
							position++
							goto l650
						l651:
							position, tokenIndex = position650, tokenIndex650
							if buffer[position] != rune('S') {
								goto l647
							}
							position++
						}
					l650:
						{
							position652, tokenIndex652 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l653
							}
							position++
							goto l652
						l653:
							position, tokenIndex = position652, tokenIndex652
							if buffer[position] != rune('L') {
								goto l647
							}
							position++
						}
					l652:
						goto l635
					l647:
						position, tokenIndex = position635, tokenIndex635
						{
							position655, tokenIndex655 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l656
							}
							position++
							goto l655
						l656:
							position, tokenIndex = position655, tokenIndex655
							if buffer[position] != rune('L') {
								goto l654
							}
							position++
						}
					l655:
						{
							position657, tokenIndex657 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l658
							}
							position++
							goto l657
						l658:
							position, tokenIndex = position657, tokenIndex657
							if buffer[position] != rune('S') {
								goto l654
							}
							position++
						}
					l657:
						{
							position659, tokenIndex659 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l660
							}
							position++
							goto l659
						l660:
							position, tokenIndex = position659, tokenIndex659
							if buffer[position] != rune('R') {
								goto l654
							}
							position++
						}
					l659:
						goto l635
					l654:
						position, tokenIndex = position635, tokenIndex635
						{
							position662, tokenIndex662 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l663
							}
							position++
							goto l662
						l663:
							position, tokenIndex = position662, tokenIndex662
							if buffer[position] != rune('R') {
								goto l661
							}
							position++
						}
					l662:
						{
							position664, tokenIndex664 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l665
							}
							position++
							goto l664
						l665:
							position, tokenIndex = position664, tokenIndex664
							if buffer[position] != rune('O') {
								goto l661
							}
							position++
						}
					l664:
						{
							position666, tokenIndex666 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l667
							}
							position++
							goto l666
						l667:
							position, tokenIndex = position666, tokenIndex666
							if buffer[position] != rune('R') {
								goto l661
							}
							position++
						}
					l666:
						goto l635
					l661:
						position, tokenIndex = position635, tokenIndex635
						{
							position668, tokenIndex668 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l669
							}
							position++
							goto l668
						l669:
							position, tokenIndex = position668, tokenIndex668
							if buffer[position] != rune('A') {
								goto l634
							}
							position++
						}
					l668:
						{
							position670, tokenIndex670 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l671
							}
							position++
							goto l670
						l671:
							position, tokenIndex = position670, tokenIndex670
							if buffer[position] != rune('S') {
								goto l634
							}
							position++
						}
					l670:
						{
							position672, tokenIndex672 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l673
							}
							position++
							goto l672
						l673:
							position, tokenIndex = position672, tokenIndex672
							if buffer[position] != rune('R') {
								goto l634
							}
							position++
						}
					l672:
					}
				l635:
					{
						position674, tokenIndex674 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l674
						}
						{
							position676, tokenIndex676 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l676
							}
							position++
							goto l677
						l676:
							position, tokenIndex = position676, tokenIndex676
						}
					l677:
						if !_rules[ruleOffset]() {
							goto l674
						}
						goto l675
					l674:
						position, tokenIndex = position674, tokenIndex674
					}
				l675:
					goto l633
				l634:
					position, tokenIndex = position633, tokenIndex633
					{
						position678, tokenIndex678 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l679
						}
						position++
						goto l678
					l679:
						position, tokenIndex = position678, tokenIndex678
						if buffer[position] != rune('M') {
							goto l631
						}
						position++
					}
				l678:
					{
						position680, tokenIndex680 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l681
						}
						position++
						goto l680
					l681:
						position, tokenIndex = position680, tokenIndex680
						if buffer[position] != rune('U') {
							goto l631
						}
						position++
					}
				l680:
					{
						position682, tokenIndex682 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l683
						}
						position++
						goto l682
					l683:
						position, tokenIndex = position682, tokenIndex682
						if buffer[position] != rune('L') {
							goto l631
						}
						position++
					}
				l682:
					if buffer[position] != rune(' ') {
						goto l631
					}
					position++
					{
						position684, tokenIndex684 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l685
						}
						position++
						goto l684
					l685:
						position, tokenIndex = position684, tokenIndex684
						if buffer[position] != rune('V') {
							goto l631
						}
						position++
					}
				l684:
					{
						position686, tokenIndex686 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l687
						}
						position++
						goto l686
					l687:
						position, tokenIndex = position686, tokenIndex686
						if buffer[position] != rune('L') {
							goto l631
						}
						position++
					}
				l686:
				}
			l633:
				add(ruleARMConstantTweak, position632)
			}
			return true
		l631:
			position, tokenIndex = position631, tokenIndex631
			return false
		},
		/* 44 ARMRegister <- <((('s' / 'S') ('p' / 'P')) / (('x' / 'w' / 'd' / 'q' / 's' / 'h' / 'b') [0-9] [0-9]?) / (('x' / 'X') ('z' / 'Z') ('r' / 'R')) / (('w' / 'W') ('z' / 'Z') ('r' / 'R')) / (('n' / 'N') ('z' / 'Z') ('c' / 'C') ('v' / 'V')) / ARMVectorRegister / SVE2PredicateRegister / ('{' WS? ARMVectorRegister WS? ((',' / '-') WS? ARMVectorRegister)* WS? '}' ('[' [0-9] [0-9]? ']')?))> */
		func() bool {
			position688, tokenIndex688 := position, tokenIndex
			{
				position689 := position
				{
					position690, tokenIndex690 := position, tokenIndex
					{
						position692, tokenIndex692 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l693
						}
						position++
						goto l692
					l693:
						position, tokenIndex = position692, tokenIndex692
						if buffer[position] != rune('S') {
							goto l691
						}
						position++
					}
				l692:
					{
						position694, tokenIndex694 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l695
						}
						position++
						goto l694
					l695:
						position, tokenIndex = position694, tokenIndex694
						if buffer[position] != rune('P') {
							goto l691
						}
						position++
					}
				l694:
					goto l690
				l691:
					position, tokenIndex = position690, tokenIndex690
					{
						position697, tokenIndex697 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l698
						}
						position++
						goto l697
					l698:
						position, tokenIndex = position697, tokenIndex697
						if buffer[position] != rune('w') {
							goto l699
						}
						position++
						goto l697
					l699:
						position, tokenIndex = position697, tokenIndex697
						if buffer[position] != rune('d') {
							goto l700
						}
						position++
						goto l697
					l700:
						position, tokenIndex = position697, tokenIndex697
						if buffer[position] != rune('q') {
							goto l701
						}
						position++
						goto l697
					l701:
						position, tokenIndex = position697, tokenIndex697
						if buffer[position] != rune('s') {
							goto l702
						}
						position++
						goto l697
					l702:
						position, tokenIndex = position697, tokenIndex697
						if buffer[position] != rune('h') {
							goto l703
						}
						position++
						goto l697
					l703:
						position, tokenIndex = position697, tokenIndex697
						if buffer[position] != rune('b') {
							goto l696
						}
						position++
					}
				l697:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l696
					}
					position++
					{
						position704, tokenIndex704 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l704
						}
						position++
						goto l705
					l704:
						position, tokenIndex = position704, tokenIndex704
					}
				l705:
					goto l690
				l696:
					position, tokenIndex = position690, tokenIndex690
					{
						position707, tokenIndex707 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l708
						}
						position++
						goto l707
					l708:
						position, tokenIndex = position707, tokenIndex707
						if buffer[position] != rune('X') {
							goto l706
						}
						position++
					}
				l707:
					{
						position709, tokenIndex709 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l710
						}
						position++
						goto l709
					l710:
						position, tokenIndex = position709, tokenIndex709
						if buffer[position] != rune('Z') {
							goto l706
						}
						position++
					}
				l709:
					{
						position711, tokenIndex711 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l712
						}
						position++
						goto l711
					l712:
						position, tokenIndex = position711, tokenIndex711
						if buffer[position] != rune('R') {
							goto l706
						}
						position++
					}
				l711:
					goto l690
				l706:
					position, tokenIndex = position690, tokenIndex690
					{
						position714, tokenIndex714 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l715
						}
						position++
						goto l714
					l715:
						position, tokenIndex = position714, tokenIndex714
						if buffer[position] != rune('W') {
							goto l713
						}
						position++
					}
				l714:
					{
						position716, tokenIndex716 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l717
						}
						position++
						goto l716
					l717:
						position, tokenIndex = position716, tokenIndex716
						if buffer[position] != rune('Z') {
							goto l713
						}
						position++
					}
				l716:
					{
						position718, tokenIndex718 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l719
						}
						position++
						goto l718
					l719:
						position, tokenIndex = position718, tokenIndex718
						if buffer[position] != rune('R') {
							goto l713
						}
						position++
					}
				l718:
					goto l690
				l713:
					position, tokenIndex = position690, tokenIndex690
					{
						position721, tokenIndex721 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l722
						}
						position++
						goto l721
					l722:
						position, tokenIndex = position721, tokenIndex721
						if buffer[position] != rune('N') {
							goto l720
						}
						position++
					}
				l721:
					{
						position723, tokenIndex723 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l724
						}
						position++
						goto l723
					l724:
						position, tokenIndex = position723, tokenIndex723
						if buffer[position] != rune('Z') {
							goto l720
						}
						position++
					}
				l723:
					{
						position725, tokenIndex725 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l726
						}
						position++
						goto l725
					l726:
						position, tokenIndex = position725, tokenIndex725
						if buffer[position] != rune('C') {
							goto l720
						}
						position++
					}
				l725:
					{
						position727, tokenIndex727 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l728
						}
						position++
						goto l727
					l728:
						position, tokenIndex = position727, tokenIndex727
						if buffer[position] != rune('V') {
							goto l720
						}
						position++
					}
				l727:
					goto l690
				l720:
					position, tokenIndex = position690, tokenIndex690
					if !_rules[ruleARMVectorRegister]() {
						goto l729
					}
					goto l690
				l729:
					position, tokenIndex = position690, tokenIndex690
					if !_rules[ruleSVE2PredicateRegister]() {
						goto l730
					}
					goto l690
				l730:
					position, tokenIndex = position690, tokenIndex690
					if buffer[position] != rune('{') {
						goto l688
					}
					position++
					{
						position731, tokenIndex731 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l731
						}
						goto l732
					l731:
						position, tokenIndex = position731, tokenIndex731
					}
				l732:
					if !_rules[ruleARMVectorRegister]() {
						goto l688
					}
					{
						position733, tokenIndex733 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l733
						}
						goto l734
					l733:
						position, tokenIndex = position733, tokenIndex733
					}
				l734:
				l735:
					{
						position736, tokenIndex736 := position, tokenIndex
						{
							position737, tokenIndex737 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l738
							}
							position++
							goto l737
						l738:
							position, tokenIndex = position737, tokenIndex737
							if buffer[position] != rune('-') {
								goto l736
							}
							position++
						}
					l737:
						{
							position739, tokenIndex739 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l739
							}
							goto l740
						l739:
							position, tokenIndex = position739, tokenIndex739
						}
					l740:
						if !_rules[ruleARMVectorRegister]() {
							goto l736
						}
						goto l735
					l736:
						position, tokenIndex = position736, tokenIndex736
					}
					{
						position741, tokenIndex741 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l741
						}
						goto l742
					l741:
						position, tokenIndex = position741, tokenIndex741
					}
				l742:
					if buffer[position] != rune('}') {
						goto l688
					}
					position++
					{
						position743, tokenIndex743 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l743
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l743
						}
						position++
						{
							position745, tokenIndex745 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l745
							}
							position++
							goto l746
						l745:
							position, tokenIndex = position745, tokenIndex745
						}
					l746:
						if buffer[position] != rune(']') {
							goto l743
						}
						position++
						goto l744
					l743:
						position, tokenIndex = position743, tokenIndex743
					}
				l744:
				}
			l690:
				add(ruleARMRegister, position689)
			}
			return true
		l688:
			position, tokenIndex = position688, tokenIndex688
			return false
		},
		/* 45 ARMVectorRegister <- <(('v' / 'z') [0-9] [0-9]? ('.' [0-9]* ('b' / 's' / 'd' / 'h' / 'q') ('[' [0-9] [0-9]? ']')?)?)> */
		func() bool {
			position747, tokenIndex747 := position, tokenIndex
			{
				position748 := position
				{
					position749, tokenIndex749 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l750
					}
					position++
					goto l749
				l750:
					position, tokenIndex = position749, tokenIndex749
					if buffer[position] != rune('z') {
						goto l747
					}
					position++
				}
			l749:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l747
				}
				position++
				{
					position751, tokenIndex751 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l751
					}
					position++
					goto l752
				l751:
					position, tokenIndex = position751, tokenIndex751
				}
			l752:
				{
					position753, tokenIndex753 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l753
					}
					position++
				l755:
					{
						position756, tokenIndex756 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l756
						}
						position++
						goto l755
					l756:
						position, tokenIndex = position756, tokenIndex756
					}
					{
						position757, tokenIndex757 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l758
						}
						position++
						goto l757
					l758:
						position, tokenIndex = position757, tokenIndex757
						if buffer[position] != rune('s') {
							goto l759
						}
						position++
						goto l757
					l759:
						position, tokenIndex = position757, tokenIndex757
						if buffer[position] != rune('d') {
							goto l760
						}
						position++
						goto l757
					l760:
						position, tokenIndex = position757, tokenIndex757
						if buffer[position] != rune('h') {
							goto l761
						}
						position++
						goto l757
					l761:
						position, tokenIndex = position757, tokenIndex757
						if buffer[position] != rune('q') {
							goto l753
						}
						position++
					}
				l757:
					{
						position762, tokenIndex762 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l762
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l762
						}
						position++
						{
							position764, tokenIndex764 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l764
							}
							position++
							goto l765
						l764:
							position, tokenIndex = position764, tokenIndex764
						}
					l765:
						if buffer[position] != rune(']') {
							goto l762
						}
						position++
						goto l763
					l762:
						position, tokenIndex = position762, tokenIndex762
					}
				l763:
					goto l754
				l753:
					position, tokenIndex = position753, tokenIndex753
				}
			l754:
				add(ruleARMVectorRegister, position748)
			}
			return true
		l747:
			position, tokenIndex = position747, tokenIndex747
			return false
		},
		/* 46 SVE2PredicateRegister <- <(('p' / 'P') [0-9] [0-9]? '/' ('m' / 'M' / 'z' / 'Z'))> */
		func() bool {
			position766, tokenIndex766 := position, tokenIndex
			{
				position767 := position
				{
					position768, tokenIndex768 := position, tokenIndex
					if buffer[position] != rune('p') {
						goto l769
					}
					position++
					goto l768
				l769:
					position, tokenIndex = position768, tokenIndex768
					if buffer[position] != rune('P') {
						goto l766
					}
					position++
				}
			l768:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l766
				}
				position++
				{
					position770, tokenIndex770 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l770
					}
					position++
					goto l771
				l770:
					position, tokenIndex = position770, tokenIndex770
				}
			l771:
				if buffer[position] != rune('/') {
					goto l766
				}
				position++
				{
					position772, tokenIndex772 := position, tokenIndex
					if buffer[position] != rune('m') {
						goto l773
					}
					position++
					goto l772
				l773:
					position, tokenIndex = position772, tokenIndex772
					if buffer[position] != rune('M') {
						goto l774
					}
					position++
					goto l772
				l774:
					position, tokenIndex = position772, tokenIndex772
					if buffer[position] != rune('z') {
						goto l775
					}
					position++
					goto l772
				l775:
					position, tokenIndex = position772, tokenIndex772
					if buffer[position] != rune('Z') {
						goto l766
					}
					position++
				}
			l772:
				add(ruleSVE2PredicateRegister, position767)
			}
			return true
		l766:
			position, tokenIndex = position766, tokenIndex766
			return false
		},
		/* 47 MemoryRef <- <((SymbolRef BaseIndexScale) / SymbolRef / Low12BitsSymbolRef / (Offset* BaseIndexScale) / (SegmentRegister Offset BaseIndexScale) / (SegmentRegister BaseIndexScale) / (SegmentRegister Offset) / ARMBaseIndexScale / BaseIndexScale)> */
		func() bool {
			position776, tokenIndex776 := position, tokenIndex
			{
				position777 := position
				{
					position778, tokenIndex778 := position, tokenIndex
					if !_rules[ruleSymbolRef]() {
						goto l779
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l779
					}
					goto l778
				l779:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleSymbolRef]() {
						goto l780
					}
					goto l778
				l780:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleLow12BitsSymbolRef]() {
						goto l781
					}
					goto l778
				l781:
					position, tokenIndex = position778, tokenIndex778
				l783:
					{
						position784, tokenIndex784 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l784
						}
						goto l783
					l784:
						position, tokenIndex = position784, tokenIndex784
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l782
					}
					goto l778
				l782:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleSegmentRegister]() {
						goto l785
					}
					if !_rules[ruleOffset]() {
						goto l785
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l785
					}
					goto l778
				l785:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleSegmentRegister]() {
						goto l786
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l786
					}
					goto l778
				l786:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleSegmentRegister]() {
						goto l787
					}
					if !_rules[ruleOffset]() {
						goto l787
					}
					goto l778
				l787:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleARMBaseIndexScale]() {
						goto l788
					}
					goto l778
				l788:
					position, tokenIndex = position778, tokenIndex778
					if !_rules[ruleBaseIndexScale]() {
						goto l776
					}
				}
			l778:
				add(ruleMemoryRef, position777)
			}
			return true
		l776:
			position, tokenIndex = position776, tokenIndex776
			return false
		},
		/* 48 SymbolRef <- <((Offset* '+')? (LocalSymbol / SymbolName) Offset* ('@' Section Offset*)?)> */
		func() bool {
			position789, tokenIndex789 := position, tokenIndex
			{
				position790 := position
				{
					position791, tokenIndex791 := position, tokenIndex
				l793:
					{
						position794, tokenIndex794 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l794
						}
						goto l793
					l794:
						position, tokenIndex = position794, tokenIndex794
					}
					if buffer[position] != rune('+') {
						goto l791
					}
					position++
					goto l792
				l791:
					position, tokenIndex = position791, tokenIndex791
				}
			l792:
				{
					position795, tokenIndex795 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l796
					}
					goto l795
				l796:
					position, tokenIndex = position795, tokenIndex795
					if !_rules[ruleSymbolName]() {
						goto l789
					}
				}
			l795:
			l797:
				{
					position798, tokenIndex798 := position, tokenIndex
					if !_rules[ruleOffset]() {
						goto l798
					}
					goto l797
				l798:
					position, tokenIndex = position798, tokenIndex798
				}
				{
					position799, tokenIndex799 := position, tokenIndex
					if buffer[position] != rune('@') {
						goto l799
					}
					position++
					if !_rules[ruleSection]() {
						goto l799
					}
				l801:
					{
						position802, tokenIndex802 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l802
						}
						goto l801
					l802:
						position, tokenIndex = position802, tokenIndex802
					}
					goto l800
				l799:
					position, tokenIndex = position799, tokenIndex799
				}
			l800:
				add(ruleSymbolRef, position790)
			}
			return true
		l789:
			position, tokenIndex = position789, tokenIndex789
			return false
		},
		/* 49 Low12BitsSymbolRef <- <(':' ('l' / 'L') ('o' / 'O') '1' '2' ':' (LocalSymbol / SymbolName) Offset?)> */
		func() bool {
			position803, tokenIndex803 := position, tokenIndex
			{
				position804 := position
				if buffer[position] != rune(':') {
					goto l803
				}
				position++
				{
					position805, tokenIndex805 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l806
					}
					position++
					goto l805
				l806:
					position, tokenIndex = position805, tokenIndex805
					if buffer[position] != rune('L') {
						goto l803
					}
					position++
				}
			l805:
				{
					position807, tokenIndex807 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l808
					}
					position++
					goto l807
				l808:
					position, tokenIndex = position807, tokenIndex807
					if buffer[position] != rune('O') {
						goto l803
					}
					position++
				}
			l807:
				if buffer[position] != rune('1') {
					goto l803
				}
				position++
				if buffer[position] != rune('2') {
					goto l803
				}
				position++
				if buffer[position] != rune(':') {
					goto l803
				}
				position++
				{
					position809, tokenIndex809 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l810
					}
					goto l809
				l810:
					position, tokenIndex = position809, tokenIndex809
					if !_rules[ruleSymbolName]() {
						goto l803
					}
				}
			l809:
				{
					position811, tokenIndex811 := position, tokenIndex
					if !_rules[ruleOffset]() {
						goto l811
					}
					goto l812
				l811:
					position, tokenIndex = position811, tokenIndex811
				}
			l812:
				add(ruleLow12BitsSymbolRef, position804)
			}
			return true
		l803:
			position, tokenIndex = position803, tokenIndex803
			return false
		},
		/* 50 ARMBaseIndexScale <- <('[' ARMRegister (',' WS? (('#'? Offset (('*' [0-9]+) / ('*' '(' [0-9]+ Operator [0-9]+ ')') / ('+' [0-9]+)*)?) / ('#'? ARMGOTLow12) / ('#'? Low12BitsSymbolRef) / ARMRegister) (',' WS? ARMConstantTweak)?)? ']' ARMPostincrement?)> */
		func() bool {
			position813, tokenIndex813 := position, tokenIndex
			{
				position814 := position
				if buffer[position] != rune('[') {
					goto l813
				}
				position++
				if !_rules[ruleARMRegister]() {
					goto l813
				}
				{
					position815, tokenIndex815 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l815
					}
					position++
					{
						position817, tokenIndex817 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l817
						}
						goto l818
					l817:
						position, tokenIndex = position817, tokenIndex817
					}
				l818:
					{
						position819, tokenIndex819 := position, tokenIndex
						{
							position821, tokenIndex821 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l821
							}
							position++
							goto l822
						l821:
							position, tokenIndex = position821, tokenIndex821
						}
					l822:
						if !_rules[ruleOffset]() {
							goto l820
						}
						{
							position823, tokenIndex823 := position, tokenIndex
							{
								position825, tokenIndex825 := position, tokenIndex
								if buffer[position] != rune('*') {
									goto l826
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l826
								}
								position++
							l827:
								{
									position828, tokenIndex828 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l828
									}
									position++
									goto l827
								l828:
									position, tokenIndex = position828, tokenIndex828
								}
								goto l825
							l826:
								position, tokenIndex = position825, tokenIndex825
								if buffer[position] != rune('*') {
									goto l829
								}
								position++
								if buffer[position] != rune('(') {
									goto l829
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l829
								}
								position++
							l830:
								{
									position831, tokenIndex831 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l831
									}
									position++
									goto l830
								l831:
									position, tokenIndex = position831, tokenIndex831
								}
								if !_rules[ruleOperator]() {
									goto l829
								}
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l829
								}
								position++
							l832:
								{
									position833, tokenIndex833 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l833
									}
									position++
									goto l832
								l833:
									position, tokenIndex = position833, tokenIndex833
								}
								if buffer[position] != rune(')') {
									goto l829
								}
								position++
								goto l825
							l829:
								position, tokenIndex = position825, tokenIndex825
							l834:
								{
									position835, tokenIndex835 := position, tokenIndex
									if buffer[position] != rune('+') {
										goto l835
									}
									position++
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l835
									}
									position++
								l836:
									{
										position837, tokenIndex837 := position, tokenIndex
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l837
										}
										position++
										goto l836
									l837:
										position, tokenIndex = position837, tokenIndex837
									}
									goto l834
								l835:
									position, tokenIndex = position835, tokenIndex835
								}
							}
						l825:
							goto l824

							position, tokenIndex = position823, tokenIndex823
						}
					l824:
						goto l819
					l820:
						position, tokenIndex = position819, tokenIndex819
						{
							position839, tokenIndex839 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l839
							}
							position++
							goto l840
						l839:
							position, tokenIndex = position839, tokenIndex839
						}
					l840:
						if !_rules[ruleARMGOTLow12]() {
							goto l838
						}
						goto l819
					l838:
						position, tokenIndex = position819, tokenIndex819
						{
							position842, tokenIndex842 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l842
							}
							position++
							goto l843
						l842:
							position, tokenIndex = position842, tokenIndex842
						}
					l843:
						if !_rules[ruleLow12BitsSymbolRef]() {
							goto l841
						}
						goto l819
					l841:
						position, tokenIndex = position819, tokenIndex819
						if !_rules[ruleARMRegister]() {
							goto l815
						}
					}
				l819:
					{
						position844, tokenIndex844 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l844
						}
						position++
						{
							position846, tokenIndex846 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l846
							}
							goto l847
						l846:
							position, tokenIndex = position846, tokenIndex846
						}
					l847:
						if !_rules[ruleARMConstantTweak]() {
							goto l844
						}
						goto l845
					l844:
						position, tokenIndex = position844, tokenIndex844
					}
				l845:
					goto l816
				l815:
					position, tokenIndex = position815, tokenIndex815
				}
			l816:
				if buffer[position] != rune(']') {
					goto l813
				}
				position++
				{
					position848, tokenIndex848 := position, tokenIndex
					if !_rules[ruleARMPostincrement]() {
						goto l848
					}
					goto l849
				l848:
					position, tokenIndex = position848, tokenIndex848
				}
			l849:
				add(ruleARMBaseIndexScale, position814)
			}
			return true
		l813:
			position, tokenIndex = position813, tokenIndex813
			return false
		},
		/* 51 ARMGOTLow12 <- <(':' ('g' / 'G') ('o' / 'O') ('t' / 'T') '_' ('l' / 'L') ('o' / 'O') '1' '2' ':' SymbolName)> */
		func() bool {
			position850, tokenIndex850 := position, tokenIndex
			{
				position851 := position
				if buffer[position] != rune(':') {
					goto l850
				}
				position++
				{
					position852, tokenIndex852 := position, tokenIndex
					if buffer[position] != rune('g') {
						goto l853
					}
					position++
					goto l852
				l853:
					position, tokenIndex = position852, tokenIndex852
					if buffer[position] != rune('G') {
						goto l850
					}
					position++
				}
			l852:
				{
					position854, tokenIndex854 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l855
					}
					position++
					goto l854
				l855:
					position, tokenIndex = position854, tokenIndex854
					if buffer[position] != rune('O') {
						goto l850
					}
					position++
				}
			l854:
				{
					position856, tokenIndex856 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l857
					}
					position++
					goto l856
				l857:
					position, tokenIndex = position856, tokenIndex856
					if buffer[position] != rune('T') {
						goto l850
					}
					position++
				}
			l856:
				if buffer[position] != rune('_') {
					goto l850
				}
				position++
				{
					position858, tokenIndex858 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l859
					}
					position++
					goto l858
				l859:
					position, tokenIndex = position858, tokenIndex858
					if buffer[position] != rune('L') {
						goto l850
					}
					position++
				}
			l858:
				{
					position860, tokenIndex860 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l861
					}
					position++
					goto l860
				l861:
					position, tokenIndex = position860, tokenIndex860
					if buffer[position] != rune('O') {
						goto l850
					}
					position++
				}
			l860:
				if buffer[position] != rune('1') {
					goto l850
				}
				position++
				if buffer[position] != rune('2') {
					goto l850
				}
				position++
				if buffer[position] != rune(':') {
					goto l850
				}
				position++
				if !_rules[ruleSymbolName]() {
					goto l850
				}
				add(ruleARMGOTLow12, position851)
			}
			return true
		l850:
			position, tokenIndex = position850, tokenIndex850
			return false
		},
		/* 52 ARMPostincrement <- <'!'> */
		func() bool {
			position862, tokenIndex862 := position, tokenIndex
			{
				position863 := position
				if buffer[position] != rune('!') {
					goto l862
				}
				position++
				add(ruleARMPostincrement, position863)
			}
			return true
		l862:
			position, tokenIndex = position862, tokenIndex862
			return false
		},
		/* 53 BaseIndexScale <- <('(' RegisterOrConstant? WS? (',' WS? RegisterOrConstant WS? (',' [0-9]+)?)? ')')> */
		func() bool {
			position864, tokenIndex864 := position, tokenIndex
			{
				position865 := position
				if buffer[position] != rune('(') {
					goto l864
				}
				position++
				{
					position866, tokenIndex866 := position, tokenIndex
					if !_rules[ruleRegisterOrConstant]() {
						goto l866
					}
					goto l867
				l866:
					position, tokenIndex = position866, tokenIndex866
				}
			l867:
				{
					position868, tokenIndex868 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l868
					}
					goto l869
				l868:
					position, tokenIndex = position868, tokenIndex868
				}
			l869:
				{
					position870, tokenIndex870 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l870
					}
					position++
					{
						position872, tokenIndex872 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l872
						}
						goto l873
					l872:
						position, tokenIndex = position872, tokenIndex872
					}
				l873:
					if !_rules[ruleRegisterOrConstant]() {
						goto l870
					}
					{
						position874, tokenIndex874 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l874
						}
						goto l875
					l874:
						position, tokenIndex = position874, tokenIndex874
					}
				l875:
					{
						position876, tokenIndex876 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l876
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l876
						}
						position++
					l878:
						{
							position879, tokenIndex879 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l879
							}
							position++
							goto l878
						l879:
							position, tokenIndex = position879, tokenIndex879
						}
						goto l877
					l876:
						position, tokenIndex = position876, tokenIndex876
					}
				l877:
					goto l871
				l870:
					position, tokenIndex = position870, tokenIndex870
				}
			l871:
				if buffer[position] != rune(')') {
					goto l864
				}
				position++
				add(ruleBaseIndexScale, position865)
			}
			return true
		l864:
			position, tokenIndex = position864, tokenIndex864
			return false
		},
		/* 54 Operator <- <('+' / '-')> */
		func() bool {
			position880, tokenIndex880 := position, tokenIndex
			{
				position881 := position
				{
					position882, tokenIndex882 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l883
					}
					position++
					goto l882
				l883:
					position, tokenIndex = position882, tokenIndex882
					if buffer[position] != rune('-') {
						goto l880
					}
					position++
				}
			l882:
				add(ruleOperator, position881)
			}
			return true
		l880:
			position, tokenIndex = position880, tokenIndex880
			return false
		},
		/* 55 OffsetOperator <- <('+' / '-' / '*')> */
		func() bool {
			position884, tokenIndex884 := position, tokenIndex
			{
				position885 := position
				{
					position886, tokenIndex886 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l887
					}
					position++
					goto l886
				l887:
					position, tokenIndex = position886, tokenIndex886
					if buffer[position] != rune('-') {
						goto l888
					}
					position++
					goto l886
				l888:
					position, tokenIndex = position886, tokenIndex886
					if buffer[position] != rune('*') {
						goto l884
					}
					position++
				}
			l886:
				add(ruleOffsetOperator, position885)
			}
			return true
		l884:
			position, tokenIndex = position884, tokenIndex884
			return false
		},
		/* 56 Offset <- <('+'? '-'? (('0' ('b' / 'B') ('0' / '1')+) / ('0' ('x' / 'X') ([0-9] / [0-9] / ([a-f] / [A-F]))+) / ((([0-9]+ WS OffsetOperator [0-9]+) / ([0-9]+ (OffsetOperator '(' [0-9]+ OffsetOperator [0-9]+ ')')?) / ([0-9]+ (OffsetOperator [0-9]+ OffsetOperator [0-9]+)?) / ([0-9]+ (OffsetOperator [0-9]+)?) / ('(' [0-9]+ WS? OffsetOperator WS? [0-9]+ ')' OffsetOperator [0-9]+ OffsetOperator [0-9]+) / ('(' [0-9]+ WS? OffsetOperator WS? [0-9]+ ')' OffsetOperator [0-9]+ !'x') / ('(' [0-9]+ WS? OffsetOperator WS? [0-9]+ ')') / ('(' [0-9]+ WS? OffsetOperator WS? [0-9]+ WS? OffsetOperator WS? [0-9]+ ')')) !([a-z] / [A-Z]))))> */
		func() bool {
			position889, tokenIndex889 := position, tokenIndex
			{
				position890 := position
				{
					position891, tokenIndex891 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l891
					}
					position++
					goto l892
				l891:
					position, tokenIndex = position891, tokenIndex891
				}
			l892:
				{
					position893, tokenIndex893 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l893
					}
					position++
					goto l894
				l893:
					position, tokenIndex = position893, tokenIndex893
				}
			l894:
				{
					position895, tokenIndex895 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l896
					}
					position++
					{
						position897, tokenIndex897 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l898
						}
						position++
						goto l897
					l898:
						position, tokenIndex = position897, tokenIndex897
						if buffer[position] != rune('B') {
							goto l896
						}
						position++
					}
				l897:
					{
						position901, tokenIndex901 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l902
						}
						position++
						goto l901
					l902:
						position, tokenIndex = position901, tokenIndex901
						if buffer[position] != rune('1') {
							goto l896
						}
						position++
					}
				l901:
				l899:
					{
						position900, tokenIndex900 := position, tokenIndex
						{
							position903, tokenIndex903 := position, tokenIndex
							if buffer[position] != rune('0') {
								goto l904
							}
							position++
							goto l903
						l904:
							position, tokenIndex = position903, tokenIndex903
							if buffer[position] != rune('1') {
								goto l900
							}
							position++
						}
					l903:
						goto l899
					l900:
						position, tokenIndex = position900, tokenIndex900
					}
					goto l895
				l896:
					position, tokenIndex = position895, tokenIndex895
					if buffer[position] != rune('0') {
						goto l905
					}
					position++
					{
						position906, tokenIndex906 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l907
						}
						position++
						goto l906
					l907:
						position, tokenIndex = position906, tokenIndex906
						if buffer[position] != rune('X') {
							goto l905
						}
						position++
					}
				l906:
					{
						position910, tokenIndex910 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l911
						}
						position++
						goto l910
					l911:
						position, tokenIndex = position910, tokenIndex910
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l912
						}
						position++
						goto l910
					l912:
						position, tokenIndex = position910, tokenIndex910
						{
							position913, tokenIndex913 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('f') {
								goto l914
							}
							position++
							goto l913
						l914:
							position, tokenIndex = position913, tokenIndex913
							if c := buffer[position]; c < rune('A') || c > rune('F') {
								goto l905
							}
							position++
						}
					l913:
					}
				l910:
				l908:
					{
						position909, tokenIndex909 := position, tokenIndex
						{
							position915, tokenIndex915 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l916
							}
							position++
							goto l915
						l916:
							position, tokenIndex = position915, tokenIndex915
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l917
							}
							position++
							goto l915
						l917:
							position, tokenIndex = position915, tokenIndex915
							{
								position918, tokenIndex918 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('f') {
									goto l919
								}
								position++
								goto l918
							l919:
								position, tokenIndex = position918, tokenIndex918
								if c := buffer[position]; c < rune('A') || c > rune('F') {
									goto l909
								}
								position++
							}
						l918:
						}
					l915:
						goto l908
					l909:
						position, tokenIndex = position909, tokenIndex909
					}
					goto l895
				l905:
					position, tokenIndex = position895, tokenIndex895
					{
						position920, tokenIndex920 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l921
						}
						position++
					l922:
						{
							position923, tokenIndex923 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l923
							}
							position++
							goto l922
						l923:
							position, tokenIndex = position923, tokenIndex923
						}
						if !_rules[ruleWS]() {
							goto l921
						}
						if !_rules[ruleOffsetOperator]() {
							goto l921
						}
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l921
						}
						position++
					l924:
						{
							position925, tokenIndex925 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l925
							}
							position++
							goto l924
						l925:
							position, tokenIndex = position925, tokenIndex925
						}
						goto l920
					l921:
						position, tokenIndex = position920, tokenIndex920
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l926
						}
						position++
					l927:
						{
							position928, tokenIndex928 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l928
							}
							position++
							goto l927
						l928:
							position, tokenIndex = position928, tokenIndex928
						}
						{
							position929, tokenIndex929 := position, tokenIndex
							if !_rules[ruleOffsetOperator]() {
								goto l929
							}
							if buffer[position] != rune('(') {
								goto l929
							}
							position++
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l929
							}
							position++
						l931:
							{
								position932, tokenIndex932 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l932
								}
								position++
								goto l931
							l932:
								position, tokenIndex = position932, tokenIndex932
							}
							if !_rules[ruleOffsetOperator]() {
								goto l929
							}
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l929
							}
							position++
						l933:
							{
								position934, tokenIndex934 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l934
								}
								position++
								goto l933
							l934:
								position, tokenIndex = position934, tokenIndex934
							}
							if buffer[position] != rune(')') {
								goto l929
							}
							position++
							goto l930
						l929:
							position, tokenIndex = position929, tokenIndex929
						}
					l930:
						goto l920
					l926:
						position, tokenIndex = position920, tokenIndex920
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l935
						}
						position++
					l936:
						{
							position937, tokenIndex937 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l937
							}
							position++
							goto l936
						l937:
							position, tokenIndex = position937, tokenIndex937
						}
						{
							position938, tokenIndex938 := position, tokenIndex
							if !_rules[ruleOffsetOperator]() {
								goto l938
							}
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l938
							}
							position++
						l940:
							{
								position941, tokenIndex941 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l941
								}
								position++
								goto l940
							l941:
								position, tokenIndex = position941, tokenIndex941
							}
							if !_rules[ruleOffsetOperator]() {
								goto l938
							}
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l938
							}
							position++
						l942:
							{
								position943, tokenIndex943 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l943
								}
								position++
								goto l942
							l943:
								position, tokenIndex = position943, tokenIndex943
							}
							goto l939
						l938:
							position, tokenIndex = position938, tokenIndex938
						}
					l939:
						goto l920
					l935:
						position, tokenIndex = position920, tokenIndex920
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l944
						}
						position++
					l945:
						{
							position946, tokenIndex946 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l946
							}
							position++
							goto l945
						l946:
							position, tokenIndex = position946, tokenIndex946
						}
						{
							position947, tokenIndex947 := position, tokenIndex
							if !_rules[ruleOffsetOperator]() {
								goto l947
							}
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l947
							}
							position++
						l949:
							{
								position950, tokenIndex950 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l950
								}
								position++
								goto l949
							l950:
								position, tokenIndex = position950, tokenIndex950
							}
							goto l948
						l947:
							position, tokenIndex = position947, tokenIndex947
						}
					l948:
						goto l920
					l944:
						position, tokenIndex = position920, tokenIndex920
						if buffer[position] != rune('(') {
							goto l951
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l951
						}
						position++
					l952:
						{
							position953, tokenIndex953 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l953
							}
							position++
							goto l952
						l953:
							position, tokenIndex = position953, tokenIndex953
						}
						{
							position954, tokenIndex954 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l954
							}
							goto l955
						l954:
							position, tokenIndex = position954, tokenIndex954
						}
					l955:
						if !_rules[ruleOffsetOperator]() {
							goto l951
						}
						{
							position956, tokenIndex956 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l956
							}
							goto l957
						l956:
							position, tokenIndex = position956, tokenIndex956
						}
					l957:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l951
						}
						position++
					l958:
						{
							position959, tokenIndex959 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l959
							}
							position++
							goto l958
						l959:
							position, tokenIndex = position959, tokenIndex959
						}
						if buffer[position] != rune(')') {
							goto l951
						}
						position++
						if !_rules[ruleOffsetOperator]() {
							goto l951
						}
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l951
						}
						position++
					l960:
						{
							position961, tokenIndex961 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l961
							}
							position++
							goto l960
						l961:
							position, tokenIndex = position961, tokenIndex961
						}
						if !_rules[ruleOffsetOperator]() {
							goto l951
						}
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l951
						}
						position++
					l962:
						{
							position963, tokenIndex963 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l963
							}
							position++
							goto l962
						l963:
							position, tokenIndex = position963, tokenIndex963
						}
						goto l920
					l951:
						position, tokenIndex = position920, tokenIndex920
						if buffer[position] != rune('(') {
							goto l964
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l964
						}
						position++
					l965:
						{
							position966, tokenIndex966 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l966
							}
							position++
							goto l965
						l966:
							position, tokenIndex = position966, tokenIndex966
						}
						{
							position967, tokenIndex967 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l967
							}
							goto l968
						l967:
							position, tokenIndex = position967, tokenIndex967
						}
					l968:
						if !_rules[ruleOffsetOperator]() {
							goto l964
						}
						{
							position969, tokenIndex969 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l969
							}
							goto l970
						l969:
							position, tokenIndex = position969, tokenIndex969
						}
					l970:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l964
						}
						position++
					l971:
						{
							position972, tokenIndex972 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l972
							}
							position++
							goto l971
						l972:
							position, tokenIndex = position972, tokenIndex972
						}
						if buffer[position] != rune(')') {
							goto l964
						}
						position++
						if !_rules[ruleOffsetOperator]() {
							goto l964
						}
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l964
						}
						position++
					l973:
						{
							position974, tokenIndex974 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l974
							}
							position++
							goto l973
						l974:
							position, tokenIndex = position974, tokenIndex974
						}
						{
							position975, tokenIndex975 := position, tokenIndex
							if buffer[position] != rune('x') {
								goto l975
							}
							position++
							goto l964
						l975:
							position, tokenIndex = position975, tokenIndex975
						}
						goto l920
					l964:
						position, tokenIndex = position920, tokenIndex920
						if buffer[position] != rune('(') {
							goto l976
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l976
						}
						position++
					l977:
						{
							position978, tokenIndex978 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l978
							}
							position++
							goto l977
						l978:
							position, tokenIndex = position978, tokenIndex978
						}
						{
							position979, tokenIndex979 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l979
							}
							goto l980
						l979:
							position, tokenIndex = position979, tokenIndex979
						}
					l980:
						if !_rules[ruleOffsetOperator]() {
							goto l976
						}
						{
							position981, tokenIndex981 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l981
							}
							goto l982
						l981:
							position, tokenIndex = position981, tokenIndex981
						}
					l982:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l976
						}
						position++
					l983:
						{
							position984, tokenIndex984 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l984
							}
							position++
							goto l983
						l984:
							position, tokenIndex = position984, tokenIndex984
						}
						if buffer[position] != rune(')') {
							goto l976
						}
						position++
						goto l920
					l976:
						position, tokenIndex = position920, tokenIndex920
						if buffer[position] != rune('(') {
							goto l889
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l889
						}
						position++
					l985:
						{
							position986, tokenIndex986 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l986
							}
							position++
							goto l985
						l986:
							position, tokenIndex = position986, tokenIndex986
						}
						{
							position987, tokenIndex987 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l987
							}
							goto l988
						l987:
							position, tokenIndex = position987, tokenIndex987
						}
					l988:
						if !_rules[ruleOffsetOperator]() {
							goto l889
						}
						{
							position989, tokenIndex989 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l989
							}
							goto l990
						l989:
							position, tokenIndex = position989, tokenIndex989
						}
					l990:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l889
						}
						position++
					l991:
						{
							position992, tokenIndex992 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l992
							}
							position++
							goto l991
						l992:
							position, tokenIndex = position992, tokenIndex992
						}
						{
							position993, tokenIndex993 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l993
							}
							goto l994
						l993:
							position, tokenIndex = position993, tokenIndex993
						}
					l994:
						if !_rules[ruleOffsetOperator]() {
							goto l889
						}
						{
							position995, tokenIndex995 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l995
							}
							goto l996
						l995:
							position, tokenIndex = position995, tokenIndex995
						}
					l996:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l889
						}
						position++
					l997:
						{
							position998, tokenIndex998 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l998
							}
							position++
							goto l997
						l998:
							position, tokenIndex = position998, tokenIndex998
						}
						if buffer[position] != rune(')') {
							goto l889
						}
						position++
					}
				l920:
					{
						position999, tokenIndex999 := position, tokenIndex
						{
							position1000, tokenIndex1000 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l1001
							}
							position++
							goto l1000
						l1001:
							position, tokenIndex = position1000, tokenIndex1000
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l999
							}
							position++
						}
					l1000:
						goto l889
					l999:
						position, tokenIndex = position999, tokenIndex999
					}
				}
			l895:
				add(ruleOffset, position890)
			}
			return true
		l889:
			position, tokenIndex = position889, tokenIndex889
			return false
		},
		/* 57 Section <- <([a-z] / [A-Z] / '@')+> */
		func() bool {
			position1002, tokenIndex1002 := position, tokenIndex
			{
				position1003 := position
				{
					position1006, tokenIndex1006 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l1007
					}
					position++
					goto l1006
				l1007:
					position, tokenIndex = position1006, tokenIndex1006
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l1008
					}
					position++
					goto l1006
				l1008:
					position, tokenIndex = position1006, tokenIndex1006
					if buffer[position] != rune('@') {
						goto l1002
					}
					position++
				}
			l1006:
			l1004:
				{
					position1005, tokenIndex1005 := position, tokenIndex
					{
						position1009, tokenIndex1009 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l1010
						}
						position++
						goto l1009
					l1010:
						position, tokenIndex = position1009, tokenIndex1009
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l1011
						}
						position++
						goto l1009
					l1011:
						position, tokenIndex = position1009, tokenIndex1009
						if buffer[position] != rune('@') {
							goto l1005
						}
						position++
					}
				l1009:
					goto l1004
				l1005:
					position, tokenIndex = position1005, tokenIndex1005
				}
				add(ruleSection, position1003)
			}
			return true
		l1002:
			position, tokenIndex = position1002, tokenIndex1002
			return false
		},
		/* 58 SegmentRegister <- <('%' ([c-g] / 's') ('s' ':'))> */
		func() bool {
			position1012, tokenIndex1012 := position, tokenIndex
			{
				position1013 := position
				if buffer[position] != rune('%') {
					goto l1012
				}
				position++
				{
					position1014, tokenIndex1014 := position, tokenIndex
					if c := buffer[position]; c < rune('c') || c > rune('g') {
						goto l1015
					}
					position++
					goto l1014
				l1015:
					position, tokenIndex = position1014, tokenIndex1014
					if buffer[position] != rune('s') {
						goto l1012
					}
					position++
				}
			l1014:
				if buffer[position] != rune('s') {
					goto l1012
				}
				position++
				if buffer[position] != rune(':') {
					goto l1012
				}
				position++
				add(ruleSegmentRegister, position1013)
			}
			return true
		l1012:
			position, tokenIndex = position1012, tokenIndex1012
			return false
		},
	}
	p.rules = _rules
	return nil
}
