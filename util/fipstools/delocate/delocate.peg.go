package main

// Code generated by ../peg/peg util/fipstools/delocate/delocate.peg DO NOT EDIT.

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleAsmFile
	ruleStatement
	ruleGlobalDirective
	ruleDirective
	ruleDirectiveName
	ruleLocationDirective
	ruleFileDirective
	ruleLocDirective
	ruleArgs
	ruleArg
	ruleQuotedArg
	ruleQuotedText
	ruleLabelContainingDirective
	ruleLabelContainingDirectiveName
	ruleSymbolArgs
	ruleSymbolArg
	ruleSymbolExpr
	ruleSymbolAtom
	ruleSymbolOperator
	ruleOpenParen
	ruleCloseParen
	ruleSymbolType
	ruleDot
	ruleTCMarker
	ruleEscapedChar
	ruleWS
	ruleComment
	ruleLabel
	ruleSymbolName
	ruleLocalSymbol
	ruleLocalLabel
	ruleLocalLabelRef
	ruleInstruction
	ruleInstructionName
	ruleInstructionArg
	ruleGOTLocation
	ruleGOTSymbolOffset
	ruleAVX512Token
	ruleTOCRefHigh
	ruleTOCRefLow
	ruleIndirectionIndicator
	ruleRegisterOrConstant
	ruleARMConstantTweak
	ruleARMRegister
	ruleARMVectorRegister
	ruleMemoryRef
	ruleSymbolRef
	ruleLow12BitsSymbolRef
	ruleARMBaseIndexScale
	ruleARMGOTLow12
	ruleARMPostincrement
	ruleBaseIndexScale
	ruleOperator
	ruleOffsetOperator
	ruleOffset
	ruleSection
	ruleSegmentRegister
)

var rul3s = [...]string{
	"Unknown",
	"AsmFile",
	"Statement",
	"GlobalDirective",
	"Directive",
	"DirectiveName",
	"LocationDirective",
	"FileDirective",
	"LocDirective",
	"Args",
	"Arg",
	"QuotedArg",
	"QuotedText",
	"LabelContainingDirective",
	"LabelContainingDirectiveName",
	"SymbolArgs",
	"SymbolArg",
	"SymbolExpr",
	"SymbolAtom",
	"SymbolOperator",
	"OpenParen",
	"CloseParen",
	"SymbolType",
	"Dot",
	"TCMarker",
	"EscapedChar",
	"WS",
	"Comment",
	"Label",
	"SymbolName",
	"LocalSymbol",
	"LocalLabel",
	"LocalLabelRef",
	"Instruction",
	"InstructionName",
	"InstructionArg",
	"GOTLocation",
	"GOTSymbolOffset",
	"AVX512Token",
	"TOCRefHigh",
	"TOCRefLow",
	"IndirectionIndicator",
	"RegisterOrConstant",
	"ARMConstantTweak",
	"ARMRegister",
	"ARMVectorRegister",
	"MemoryRef",
	"SymbolRef",
	"Low12BitsSymbolRef",
	"ARMBaseIndexScale",
	"ARMGOTLow12",
	"ARMPostincrement",
	"BaseIndexScale",
	"Operator",
	"OffsetOperator",
	"Offset",
	"Section",
	"SegmentRegister",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Asm struct {
	Buffer         string
	buffer         []rune
	rules          [58]func() bool
	parse          func(rule ...int) error
	reset          func()
	Pretty         bool
	disableMemoize bool
	tokens32
}

func (p *Asm) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Asm) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Asm
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Asm) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Asm) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Asm) SprintSyntaxTree() string {
	var b bytes.Buffer
	p.WriteSyntaxTree(&b)
	return b.String()
}

func Pretty(pretty bool) func(*Asm) error {
	return func(p *Asm) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Asm) error {
	return func(p *Asm) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}

func DisableMemoize() func(*Asm) error {
	return func(p *Asm) error {
		p.disableMemoize = true
		return nil
	}
}

type memo struct {
	Matched bool
	Partial []token32
}

type memoKey struct {
	Rule     uint32
	Position uint32
}

func (p *Asm) Init(options ...func(*Asm) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
		memoization          map[memoKey]memo
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0
		memoization = make(map[memoKey]memo)
		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	memoize := func(rule uint32, begin uint32, tokenIndexStart uint32, matched bool) {
		if p.disableMemoize {
			return
		}
		key := memoKey{rule, begin}
		if !matched {
			memoization[key] = memo{Matched: false}
		} else {
			t := tree.tree[tokenIndexStart:tokenIndex]
			tokenCopy := make([]token32, len(t))
			copy(tokenCopy, t)
			memoization[key] = memo{Matched: true, Partial: tokenCopy}
		}
	}

	memoizedResult := func(m memo) bool {
		if !m.Matched {
			return false
		}
		tree.tree = append(tree.tree[:tokenIndex], m.Partial...)
		tokenIndex += uint32(len(m.Partial))
		position = m.Partial[len(m.Partial)-1].end
		if tree.tree[tokenIndex-1].begin != position && position > max.end {
			max = tree.tree[tokenIndex-1]
		}
		return true
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 AsmFile <- <(Statement* !.)> */
		func() bool {
			if memoized, ok := memoization[memoKey{0, position}]; ok {
				return memoizedResult(memoized)
			}
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleStatement]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l0
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleAsmFile, position1)
			}
			memoize(0, position0, tokenIndex0, true)
			return true
		l0:
			memoize(0, position0, tokenIndex0, false)
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Statement <- <(WS? (Label / ((GlobalDirective / LocationDirective / LabelContainingDirective / Instruction / Directive / Comment / ) WS? ((Comment? '\n') / ';'))))> */
		func() bool {
			if memoized, ok := memoization[memoKey{1, position}]; ok {
				return memoizedResult(memoized)
			}
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l7
					}
					goto l8
				l7:
					position, tokenIndex = position7, tokenIndex7
				}
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[ruleLabel]() {
						goto l10
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					{
						position11, tokenIndex11 := position, tokenIndex
						if !_rules[ruleGlobalDirective]() {
							goto l12
						}
						goto l11
					l12:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleLocationDirective]() {
							goto l13
						}
						goto l11
					l13:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleLabelContainingDirective]() {
							goto l14
						}
						goto l11
					l14:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleInstruction]() {
							goto l15
						}
						goto l11
					l15:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleDirective]() {
							goto l16
						}
						goto l11
					l16:
						position, tokenIndex = position11, tokenIndex11
						if !_rules[ruleComment]() {
							goto l17
						}
						goto l11
					l17:
						position, tokenIndex = position11, tokenIndex11
					}
				l11:
					{
						position18, tokenIndex18 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l18
						}
						goto l19
					l18:
						position, tokenIndex = position18, tokenIndex18
					}
				l19:
					{
						position20, tokenIndex20 := position, tokenIndex
						{
							position22, tokenIndex22 := position, tokenIndex
							if !_rules[ruleComment]() {
								goto l22
							}
							goto l23
						l22:
							position, tokenIndex = position22, tokenIndex22
						}
					l23:
						if buffer[position] != rune('\n') {
							goto l21
						}
						position++
						goto l20
					l21:
						position, tokenIndex = position20, tokenIndex20
						if buffer[position] != rune(';') {
							goto l5
						}
						position++
					}
				l20:
				}
			l9:
				add(ruleStatement, position6)
			}
			memoize(1, position5, tokenIndex5, true)
			return true
		l5:
			memoize(1, position5, tokenIndex5, false)
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 2 GlobalDirective <- <((('.' ('g' / 'G') ('l' / 'L') ('o' / 'O') ('b' / 'B') ('a' / 'A') ('l' / 'L')) / ('.' ('g' / 'G') ('l' / 'L') ('o' / 'O') ('b' / 'B') ('l' / 'L'))) WS SymbolName)> */
		func() bool {
			if memoized, ok := memoization[memoKey{2, position}]; ok {
				return memoizedResult(memoized)
			}
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l27
					}
					position++
					{
						position28, tokenIndex28 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l29
						}
						position++
						goto l28
					l29:
						position, tokenIndex = position28, tokenIndex28
						if buffer[position] != rune('G') {
							goto l27
						}
						position++
					}
				l28:
					{
						position30, tokenIndex30 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l31
						}
						position++
						goto l30
					l31:
						position, tokenIndex = position30, tokenIndex30
						if buffer[position] != rune('L') {
							goto l27
						}
						position++
					}
				l30:
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l33
						}
						position++
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if buffer[position] != rune('O') {
							goto l27
						}
						position++
					}
				l32:
					{
						position34, tokenIndex34 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l35
						}
						position++
						goto l34
					l35:
						position, tokenIndex = position34, tokenIndex34
						if buffer[position] != rune('B') {
							goto l27
						}
						position++
					}
				l34:
					{
						position36, tokenIndex36 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l37
						}
						position++
						goto l36
					l37:
						position, tokenIndex = position36, tokenIndex36
						if buffer[position] != rune('A') {
							goto l27
						}
						position++
					}
				l36:
					{
						position38, tokenIndex38 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l39
						}
						position++
						goto l38
					l39:
						position, tokenIndex = position38, tokenIndex38
						if buffer[position] != rune('L') {
							goto l27
						}
						position++
					}
				l38:
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if buffer[position] != rune('.') {
						goto l24
					}
					position++
					{
						position40, tokenIndex40 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l41
						}
						position++
						goto l40
					l41:
						position, tokenIndex = position40, tokenIndex40
						if buffer[position] != rune('G') {
							goto l24
						}
						position++
					}
				l40:
					{
						position42, tokenIndex42 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l43
						}
						position++
						goto l42
					l43:
						position, tokenIndex = position42, tokenIndex42
						if buffer[position] != rune('L') {
							goto l24
						}
						position++
					}
				l42:
					{
						position44, tokenIndex44 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l45
						}
						position++
						goto l44
					l45:
						position, tokenIndex = position44, tokenIndex44
						if buffer[position] != rune('O') {
							goto l24
						}
						position++
					}
				l44:
					{
						position46, tokenIndex46 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l47
						}
						position++
						goto l46
					l47:
						position, tokenIndex = position46, tokenIndex46
						if buffer[position] != rune('B') {
							goto l24
						}
						position++
					}
				l46:
					{
						position48, tokenIndex48 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l49
						}
						position++
						goto l48
					l49:
						position, tokenIndex = position48, tokenIndex48
						if buffer[position] != rune('L') {
							goto l24
						}
						position++
					}
				l48:
				}
			l26:
				if !_rules[ruleWS]() {
					goto l24
				}
				if !_rules[ruleSymbolName]() {
					goto l24
				}
				add(ruleGlobalDirective, position25)
			}
			memoize(2, position24, tokenIndex24, true)
			return true
		l24:
			memoize(2, position24, tokenIndex24, false)
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 3 Directive <- <('.' DirectiveName (WS Args)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{3, position}]; ok {
				return memoizedResult(memoized)
			}
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if buffer[position] != rune('.') {
					goto l50
				}
				position++
				if !_rules[ruleDirectiveName]() {
					goto l50
				}
				{
					position52, tokenIndex52 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l52
					}
					if !_rules[ruleArgs]() {
						goto l52
					}
					goto l53
				l52:
					position, tokenIndex = position52, tokenIndex52
				}
			l53:
				add(ruleDirective, position51)
			}
			memoize(3, position50, tokenIndex50, true)
			return true
		l50:
			memoize(3, position50, tokenIndex50, false)
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 4 DirectiveName <- <([a-z] / [A-Z] / ([0-9] / [0-9]) / '_')+> */
		func() bool {
			if memoized, ok := memoization[memoKey{4, position}]; ok {
				return memoizedResult(memoized)
			}
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				{
					position58, tokenIndex58 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l59
					}
					position++
					goto l58
				l59:
					position, tokenIndex = position58, tokenIndex58
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l60
					}
					position++
					goto l58
				l60:
					position, tokenIndex = position58, tokenIndex58
					{
						position62, tokenIndex62 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l63
						}
						position++
						goto l62
					l63:
						position, tokenIndex = position62, tokenIndex62
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l61
						}
						position++
					}
				l62:
					goto l58
				l61:
					position, tokenIndex = position58, tokenIndex58
					if buffer[position] != rune('_') {
						goto l54
					}
					position++
				}
			l58:
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					{
						position64, tokenIndex64 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l65
						}
						position++
						goto l64
					l65:
						position, tokenIndex = position64, tokenIndex64
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l66
						}
						position++
						goto l64
					l66:
						position, tokenIndex = position64, tokenIndex64
						{
							position68, tokenIndex68 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l69
							}
							position++
							goto l68
						l69:
							position, tokenIndex = position68, tokenIndex68
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l67
							}
							position++
						}
					l68:
						goto l64
					l67:
						position, tokenIndex = position64, tokenIndex64
						if buffer[position] != rune('_') {
							goto l57
						}
						position++
					}
				l64:
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
				add(ruleDirectiveName, position55)
			}
			memoize(4, position54, tokenIndex54, true)
			return true
		l54:
			memoize(4, position54, tokenIndex54, false)
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 5 LocationDirective <- <(FileDirective / LocDirective)> */
		func() bool {
			if memoized, ok := memoization[memoKey{5, position}]; ok {
				return memoizedResult(memoized)
			}
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					if !_rules[ruleFileDirective]() {
						goto l73
					}
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					if !_rules[ruleLocDirective]() {
						goto l70
					}
				}
			l72:
				add(ruleLocationDirective, position71)
			}
			memoize(5, position70, tokenIndex70, true)
			return true
		l70:
			memoize(5, position70, tokenIndex70, false)
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 6 FileDirective <- <('.' ('f' / 'F') ('i' / 'I') ('l' / 'L') ('e' / 'E') WS (!('#' / '\n') .)+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{6, position}]; ok {
				return memoizedResult(memoized)
			}
			position74, tokenIndex74 := position, tokenIndex
			{
				position75 := position
				if buffer[position] != rune('.') {
					goto l74
				}
				position++
				{
					position76, tokenIndex76 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l77
					}
					position++
					goto l76
				l77:
					position, tokenIndex = position76, tokenIndex76
					if buffer[position] != rune('F') {
						goto l74
					}
					position++
				}
			l76:
				{
					position78, tokenIndex78 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l79
					}
					position++
					goto l78
				l79:
					position, tokenIndex = position78, tokenIndex78
					if buffer[position] != rune('I') {
						goto l74
					}
					position++
				}
			l78:
				{
					position80, tokenIndex80 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l81
					}
					position++
					goto l80
				l81:
					position, tokenIndex = position80, tokenIndex80
					if buffer[position] != rune('L') {
						goto l74
					}
					position++
				}
			l80:
				{
					position82, tokenIndex82 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l83
					}
					position++
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					if buffer[position] != rune('E') {
						goto l74
					}
					position++
				}
			l82:
				if !_rules[ruleWS]() {
					goto l74
				}
				{
					position86, tokenIndex86 := position, tokenIndex
					{
						position87, tokenIndex87 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l88
						}
						position++
						goto l87
					l88:
						position, tokenIndex = position87, tokenIndex87
						if buffer[position] != rune('\n') {
							goto l86
						}
						position++
					}
				l87:
					goto l74
				l86:
					position, tokenIndex = position86, tokenIndex86
				}
				if !matchDot() {
					goto l74
				}
			l84:
				{
					position85, tokenIndex85 := position, tokenIndex
					{
						position89, tokenIndex89 := position, tokenIndex
						{
							position90, tokenIndex90 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l91
							}
							position++
							goto l90
						l91:
							position, tokenIndex = position90, tokenIndex90
							if buffer[position] != rune('\n') {
								goto l89
							}
							position++
						}
					l90:
						goto l85
					l89:
						position, tokenIndex = position89, tokenIndex89
					}
					if !matchDot() {
						goto l85
					}
					goto l84
				l85:
					position, tokenIndex = position85, tokenIndex85
				}
				add(ruleFileDirective, position75)
			}
			memoize(6, position74, tokenIndex74, true)
			return true
		l74:
			memoize(6, position74, tokenIndex74, false)
			position, tokenIndex = position74, tokenIndex74
			return false
		},
		/* 7 LocDirective <- <('.' ('l' / 'L') ('o' / 'O') ('c' / 'C') WS (!('#' / '/' / '\n') .)+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{7, position}]; ok {
				return memoizedResult(memoized)
			}
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				if buffer[position] != rune('.') {
					goto l92
				}
				position++
				{
					position94, tokenIndex94 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l95
					}
					position++
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					if buffer[position] != rune('L') {
						goto l92
					}
					position++
				}
			l94:
				{
					position96, tokenIndex96 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l97
					}
					position++
					goto l96
				l97:
					position, tokenIndex = position96, tokenIndex96
					if buffer[position] != rune('O') {
						goto l92
					}
					position++
				}
			l96:
				{
					position98, tokenIndex98 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l99
					}
					position++
					goto l98
				l99:
					position, tokenIndex = position98, tokenIndex98
					if buffer[position] != rune('C') {
						goto l92
					}
					position++
				}
			l98:
				if !_rules[ruleWS]() {
					goto l92
				}
				{
					position102, tokenIndex102 := position, tokenIndex
					{
						position103, tokenIndex103 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l104
						}
						position++
						goto l103
					l104:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('/') {
							goto l105
						}
						position++
						goto l103
					l105:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('\n') {
							goto l102
						}
						position++
					}
				l103:
					goto l92
				l102:
					position, tokenIndex = position102, tokenIndex102
				}
				if !matchDot() {
					goto l92
				}
			l100:
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						position106, tokenIndex106 := position, tokenIndex
						{
							position107, tokenIndex107 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l108
							}
							position++
							goto l107
						l108:
							position, tokenIndex = position107, tokenIndex107
							if buffer[position] != rune('/') {
								goto l109
							}
							position++
							goto l107
						l109:
							position, tokenIndex = position107, tokenIndex107
							if buffer[position] != rune('\n') {
								goto l106
							}
							position++
						}
					l107:
						goto l101
					l106:
						position, tokenIndex = position106, tokenIndex106
					}
					if !matchDot() {
						goto l101
					}
					goto l100
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
				add(ruleLocDirective, position93)
			}
			memoize(7, position92, tokenIndex92, true)
			return true
		l92:
			memoize(7, position92, tokenIndex92, false)
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 8 Args <- <(Arg (WS? ',' WS? Arg)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{8, position}]; ok {
				return memoizedResult(memoized)
			}
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				if !_rules[ruleArg]() {
					goto l110
				}
			l112:
				{
					position113, tokenIndex113 := position, tokenIndex
					{
						position114, tokenIndex114 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l114
						}
						goto l115
					l114:
						position, tokenIndex = position114, tokenIndex114
					}
				l115:
					if buffer[position] != rune(',') {
						goto l113
					}
					position++
					{
						position116, tokenIndex116 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l116
						}
						goto l117
					l116:
						position, tokenIndex = position116, tokenIndex116
					}
				l117:
					if !_rules[ruleArg]() {
						goto l113
					}
					goto l112
				l113:
					position, tokenIndex = position113, tokenIndex113
				}
				add(ruleArgs, position111)
			}
			memoize(8, position110, tokenIndex110, true)
			return true
		l110:
			memoize(8, position110, tokenIndex110, false)
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 9 Arg <- <(QuotedArg / ([0-9] / [0-9] / ([a-z] / [A-Z]) / '%' / '+' / '-' / '*' / '_' / '@' / '.')*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{9, position}]; ok {
				return memoizedResult(memoized)
			}
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[ruleQuotedArg]() {
						goto l121
					}
					goto l120
				l121:
					position, tokenIndex = position120, tokenIndex120
				l122:
					{
						position123, tokenIndex123 := position, tokenIndex
						{
							position124, tokenIndex124 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l125
							}
							position++
							goto l124
						l125:
							position, tokenIndex = position124, tokenIndex124
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l126
							}
							position++
							goto l124
						l126:
							position, tokenIndex = position124, tokenIndex124
							{
								position128, tokenIndex128 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l129
								}
								position++
								goto l128
							l129:
								position, tokenIndex = position128, tokenIndex128
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l127
								}
								position++
							}
						l128:
							goto l124
						l127:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('%') {
								goto l130
							}
							position++
							goto l124
						l130:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('+') {
								goto l131
							}
							position++
							goto l124
						l131:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('-') {
								goto l132
							}
							position++
							goto l124
						l132:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('*') {
								goto l133
							}
							position++
							goto l124
						l133:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('_') {
								goto l134
							}
							position++
							goto l124
						l134:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('@') {
								goto l135
							}
							position++
							goto l124
						l135:
							position, tokenIndex = position124, tokenIndex124
							if buffer[position] != rune('.') {
								goto l123
							}
							position++
						}
					l124:
						goto l122
					l123:
						position, tokenIndex = position123, tokenIndex123
					}
				}
			l120:
				add(ruleArg, position119)
			}
			memoize(9, position118, tokenIndex118, true)
			return true
		},
		/* 10 QuotedArg <- <('"' QuotedText '"')> */
		func() bool {
			if memoized, ok := memoization[memoKey{10, position}]; ok {
				return memoizedResult(memoized)
			}
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				if buffer[position] != rune('"') {
					goto l136
				}
				position++
				if !_rules[ruleQuotedText]() {
					goto l136
				}
				if buffer[position] != rune('"') {
					goto l136
				}
				position++
				add(ruleQuotedArg, position137)
			}
			memoize(10, position136, tokenIndex136, true)
			return true
		l136:
			memoize(10, position136, tokenIndex136, false)
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		/* 11 QuotedText <- <(EscapedChar / (!'"' .))*> */
		func() bool {
			if memoized, ok := memoization[memoKey{11, position}]; ok {
				return memoizedResult(memoized)
			}
			position138, tokenIndex138 := position, tokenIndex
			{
				position139 := position
			l140:
				{
					position141, tokenIndex141 := position, tokenIndex
					{
						position142, tokenIndex142 := position, tokenIndex
						if !_rules[ruleEscapedChar]() {
							goto l143
						}
						goto l142
					l143:
						position, tokenIndex = position142, tokenIndex142
						{
							position144, tokenIndex144 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l144
							}
							position++
							goto l141
						l144:
							position, tokenIndex = position144, tokenIndex144
						}
						if !matchDot() {
							goto l141
						}
					}
				l142:
					goto l140
				l141:
					position, tokenIndex = position141, tokenIndex141
				}
				add(ruleQuotedText, position139)
			}
			memoize(11, position138, tokenIndex138, true)
			return true
		},
		/* 12 LabelContainingDirective <- <(LabelContainingDirectiveName WS SymbolArgs)> */
		func() bool {
			if memoized, ok := memoization[memoKey{12, position}]; ok {
				return memoizedResult(memoized)
			}
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				if !_rules[ruleLabelContainingDirectiveName]() {
					goto l145
				}
				if !_rules[ruleWS]() {
					goto l145
				}
				if !_rules[ruleSymbolArgs]() {
					goto l145
				}
				add(ruleLabelContainingDirective, position146)
			}
			memoize(12, position145, tokenIndex145, true)
			return true
		l145:
			memoize(12, position145, tokenIndex145, false)
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 13 LabelContainingDirectiveName <- <(('.' ('x' / 'X') ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('w' / 'W') ('o' / 'O') ('r' / 'R') ('d' / 'D')) / ('.' ('l' / 'L') ('o' / 'O') ('n' / 'N') ('g' / 'G')) / ('.' ('s' / 'S') ('e' / 'E') ('t' / 'T')) / ('.' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' '8' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' '4' ('b' / 'B') ('y' / 'Y') ('t' / 'T') ('e' / 'E')) / ('.' ('q' / 'Q') ('u' / 'U') ('a' / 'A') ('d' / 'D')) / ('.' ('t' / 'T') ('c' / 'C')) / ('.' ('l' / 'L') ('o' / 'O') ('c' / 'C') ('a' / 'A') ('l' / 'L') ('e' / 'E') ('n' / 'N') ('t' / 'T') ('r' / 'R') ('y' / 'Y')) / ('.' ('s' / 'S') ('i' / 'I') ('z' / 'Z') ('e' / 'E')) / ('.' ('t' / 'T') ('y' / 'Y') ('p' / 'P') ('e' / 'E')) / ('.' ('u' / 'U') ('l' / 'L') ('e' / 'E') ('b' / 'B') '1' '2' '8') / ('.' ('s' / 'S') ('l' / 'L') ('e' / 'E') ('b' / 'B') '1' '2' '8'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{13, position}]; ok {
				return memoizedResult(memoized)
			}
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				{
					position149, tokenIndex149 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l150
					}
					position++
					{
						position151, tokenIndex151 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l152
						}
						position++
						goto l151
					l152:
						position, tokenIndex = position151, tokenIndex151
						if buffer[position] != rune('X') {
							goto l150
						}
						position++
					}
				l151:
					{
						position153, tokenIndex153 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l154
						}
						position++
						goto l153
					l154:
						position, tokenIndex = position153, tokenIndex153
						if buffer[position] != rune('W') {
							goto l150
						}
						position++
					}
				l153:
					{
						position155, tokenIndex155 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l156
						}
						position++
						goto l155
					l156:
						position, tokenIndex = position155, tokenIndex155
						if buffer[position] != rune('O') {
							goto l150
						}
						position++
					}
				l155:
					{
						position157, tokenIndex157 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l158
						}
						position++
						goto l157
					l158:
						position, tokenIndex = position157, tokenIndex157
						if buffer[position] != rune('R') {
							goto l150
						}
						position++
					}
				l157:
					{
						position159, tokenIndex159 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l160
						}
						position++
						goto l159
					l160:
						position, tokenIndex = position159, tokenIndex159
						if buffer[position] != rune('D') {
							goto l150
						}
						position++
					}
				l159:
					goto l149
				l150:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l161
					}
					position++
					{
						position162, tokenIndex162 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l163
						}
						position++
						goto l162
					l163:
						position, tokenIndex = position162, tokenIndex162
						if buffer[position] != rune('W') {
							goto l161
						}
						position++
					}
				l162:
					{
						position164, tokenIndex164 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l165
						}
						position++
						goto l164
					l165:
						position, tokenIndex = position164, tokenIndex164
						if buffer[position] != rune('O') {
							goto l161
						}
						position++
					}
				l164:
					{
						position166, tokenIndex166 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l167
						}
						position++
						goto l166
					l167:
						position, tokenIndex = position166, tokenIndex166
						if buffer[position] != rune('R') {
							goto l161
						}
						position++
					}
				l166:
					{
						position168, tokenIndex168 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l169
						}
						position++
						goto l168
					l169:
						position, tokenIndex = position168, tokenIndex168
						if buffer[position] != rune('D') {
							goto l161
						}
						position++
					}
				l168:
					goto l149
				l161:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l170
					}
					position++
					{
						position171, tokenIndex171 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l172
						}
						position++
						goto l171
					l172:
						position, tokenIndex = position171, tokenIndex171
						if buffer[position] != rune('L') {
							goto l170
						}
						position++
					}
				l171:
					{
						position173, tokenIndex173 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l174
						}
						position++
						goto l173
					l174:
						position, tokenIndex = position173, tokenIndex173
						if buffer[position] != rune('O') {
							goto l170
						}
						position++
					}
				l173:
					{
						position175, tokenIndex175 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l176
						}
						position++
						goto l175
					l176:
						position, tokenIndex = position175, tokenIndex175
						if buffer[position] != rune('N') {
							goto l170
						}
						position++
					}
				l175:
					{
						position177, tokenIndex177 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l178
						}
						position++
						goto l177
					l178:
						position, tokenIndex = position177, tokenIndex177
						if buffer[position] != rune('G') {
							goto l170
						}
						position++
					}
				l177:
					goto l149
				l170:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l179
					}
					position++
					{
						position180, tokenIndex180 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l181
						}
						position++
						goto l180
					l181:
						position, tokenIndex = position180, tokenIndex180
						if buffer[position] != rune('S') {
							goto l179
						}
						position++
					}
				l180:
					{
						position182, tokenIndex182 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l183
						}
						position++
						goto l182
					l183:
						position, tokenIndex = position182, tokenIndex182
						if buffer[position] != rune('E') {
							goto l179
						}
						position++
					}
				l182:
					{
						position184, tokenIndex184 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l185
						}
						position++
						goto l184
					l185:
						position, tokenIndex = position184, tokenIndex184
						if buffer[position] != rune('T') {
							goto l179
						}
						position++
					}
				l184:
					goto l149
				l179:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l186
					}
					position++
					{
						position187, tokenIndex187 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l188
						}
						position++
						goto l187
					l188:
						position, tokenIndex = position187, tokenIndex187
						if buffer[position] != rune('B') {
							goto l186
						}
						position++
					}
				l187:
					{
						position189, tokenIndex189 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l190
						}
						position++
						goto l189
					l190:
						position, tokenIndex = position189, tokenIndex189
						if buffer[position] != rune('Y') {
							goto l186
						}
						position++
					}
				l189:
					{
						position191, tokenIndex191 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l192
						}
						position++
						goto l191
					l192:
						position, tokenIndex = position191, tokenIndex191
						if buffer[position] != rune('T') {
							goto l186
						}
						position++
					}
				l191:
					{
						position193, tokenIndex193 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l194
						}
						position++
						goto l193
					l194:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('E') {
							goto l186
						}
						position++
					}
				l193:
					goto l149
				l186:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l195
					}
					position++
					if buffer[position] != rune('8') {
						goto l195
					}
					position++
					{
						position196, tokenIndex196 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l197
						}
						position++
						goto l196
					l197:
						position, tokenIndex = position196, tokenIndex196
						if buffer[position] != rune('B') {
							goto l195
						}
						position++
					}
				l196:
					{
						position198, tokenIndex198 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l199
						}
						position++
						goto l198
					l199:
						position, tokenIndex = position198, tokenIndex198
						if buffer[position] != rune('Y') {
							goto l195
						}
						position++
					}
				l198:
					{
						position200, tokenIndex200 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l201
						}
						position++
						goto l200
					l201:
						position, tokenIndex = position200, tokenIndex200
						if buffer[position] != rune('T') {
							goto l195
						}
						position++
					}
				l200:
					{
						position202, tokenIndex202 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l203
						}
						position++
						goto l202
					l203:
						position, tokenIndex = position202, tokenIndex202
						if buffer[position] != rune('E') {
							goto l195
						}
						position++
					}
				l202:
					goto l149
				l195:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l204
					}
					position++
					if buffer[position] != rune('4') {
						goto l204
					}
					position++
					{
						position205, tokenIndex205 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l206
						}
						position++
						goto l205
					l206:
						position, tokenIndex = position205, tokenIndex205
						if buffer[position] != rune('B') {
							goto l204
						}
						position++
					}
				l205:
					{
						position207, tokenIndex207 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l208
						}
						position++
						goto l207
					l208:
						position, tokenIndex = position207, tokenIndex207
						if buffer[position] != rune('Y') {
							goto l204
						}
						position++
					}
				l207:
					{
						position209, tokenIndex209 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l210
						}
						position++
						goto l209
					l210:
						position, tokenIndex = position209, tokenIndex209
						if buffer[position] != rune('T') {
							goto l204
						}
						position++
					}
				l209:
					{
						position211, tokenIndex211 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l212
						}
						position++
						goto l211
					l212:
						position, tokenIndex = position211, tokenIndex211
						if buffer[position] != rune('E') {
							goto l204
						}
						position++
					}
				l211:
					goto l149
				l204:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l213
					}
					position++
					{
						position214, tokenIndex214 := position, tokenIndex
						if buffer[position] != rune('q') {
							goto l215
						}
						position++
						goto l214
					l215:
						position, tokenIndex = position214, tokenIndex214
						if buffer[position] != rune('Q') {
							goto l213
						}
						position++
					}
				l214:
					{
						position216, tokenIndex216 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l217
						}
						position++
						goto l216
					l217:
						position, tokenIndex = position216, tokenIndex216
						if buffer[position] != rune('U') {
							goto l213
						}
						position++
					}
				l216:
					{
						position218, tokenIndex218 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l219
						}
						position++
						goto l218
					l219:
						position, tokenIndex = position218, tokenIndex218
						if buffer[position] != rune('A') {
							goto l213
						}
						position++
					}
				l218:
					{
						position220, tokenIndex220 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l221
						}
						position++
						goto l220
					l221:
						position, tokenIndex = position220, tokenIndex220
						if buffer[position] != rune('D') {
							goto l213
						}
						position++
					}
				l220:
					goto l149
				l213:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l222
					}
					position++
					{
						position223, tokenIndex223 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l224
						}
						position++
						goto l223
					l224:
						position, tokenIndex = position223, tokenIndex223
						if buffer[position] != rune('T') {
							goto l222
						}
						position++
					}
				l223:
					{
						position225, tokenIndex225 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l226
						}
						position++
						goto l225
					l226:
						position, tokenIndex = position225, tokenIndex225
						if buffer[position] != rune('C') {
							goto l222
						}
						position++
					}
				l225:
					goto l149
				l222:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l227
					}
					position++
					{
						position228, tokenIndex228 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l229
						}
						position++
						goto l228
					l229:
						position, tokenIndex = position228, tokenIndex228
						if buffer[position] != rune('L') {
							goto l227
						}
						position++
					}
				l228:
					{
						position230, tokenIndex230 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l231
						}
						position++
						goto l230
					l231:
						position, tokenIndex = position230, tokenIndex230
						if buffer[position] != rune('O') {
							goto l227
						}
						position++
					}
				l230:
					{
						position232, tokenIndex232 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l233
						}
						position++
						goto l232
					l233:
						position, tokenIndex = position232, tokenIndex232
						if buffer[position] != rune('C') {
							goto l227
						}
						position++
					}
				l232:
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('A') {
							goto l227
						}
						position++
					}
				l234:
					{
						position236, tokenIndex236 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l237
						}
						position++
						goto l236
					l237:
						position, tokenIndex = position236, tokenIndex236
						if buffer[position] != rune('L') {
							goto l227
						}
						position++
					}
				l236:
					{
						position238, tokenIndex238 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l239
						}
						position++
						goto l238
					l239:
						position, tokenIndex = position238, tokenIndex238
						if buffer[position] != rune('E') {
							goto l227
						}
						position++
					}
				l238:
					{
						position240, tokenIndex240 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l241
						}
						position++
						goto l240
					l241:
						position, tokenIndex = position240, tokenIndex240
						if buffer[position] != rune('N') {
							goto l227
						}
						position++
					}
				l240:
					{
						position242, tokenIndex242 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l243
						}
						position++
						goto l242
					l243:
						position, tokenIndex = position242, tokenIndex242
						if buffer[position] != rune('T') {
							goto l227
						}
						position++
					}
				l242:
					{
						position244, tokenIndex244 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l245
						}
						position++
						goto l244
					l245:
						position, tokenIndex = position244, tokenIndex244
						if buffer[position] != rune('R') {
							goto l227
						}
						position++
					}
				l244:
					{
						position246, tokenIndex246 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l247
						}
						position++
						goto l246
					l247:
						position, tokenIndex = position246, tokenIndex246
						if buffer[position] != rune('Y') {
							goto l227
						}
						position++
					}
				l246:
					goto l149
				l227:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l248
					}
					position++
					{
						position249, tokenIndex249 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l250
						}
						position++
						goto l249
					l250:
						position, tokenIndex = position249, tokenIndex249
						if buffer[position] != rune('S') {
							goto l248
						}
						position++
					}
				l249:
					{
						position251, tokenIndex251 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l252
						}
						position++
						goto l251
					l252:
						position, tokenIndex = position251, tokenIndex251
						if buffer[position] != rune('I') {
							goto l248
						}
						position++
					}
				l251:
					{
						position253, tokenIndex253 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l254
						}
						position++
						goto l253
					l254:
						position, tokenIndex = position253, tokenIndex253
						if buffer[position] != rune('Z') {
							goto l248
						}
						position++
					}
				l253:
					{
						position255, tokenIndex255 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l256
						}
						position++
						goto l255
					l256:
						position, tokenIndex = position255, tokenIndex255
						if buffer[position] != rune('E') {
							goto l248
						}
						position++
					}
				l255:
					goto l149
				l248:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l257
					}
					position++
					{
						position258, tokenIndex258 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l259
						}
						position++
						goto l258
					l259:
						position, tokenIndex = position258, tokenIndex258
						if buffer[position] != rune('T') {
							goto l257
						}
						position++
					}
				l258:
					{
						position260, tokenIndex260 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l261
						}
						position++
						goto l260
					l261:
						position, tokenIndex = position260, tokenIndex260
						if buffer[position] != rune('Y') {
							goto l257
						}
						position++
					}
				l260:
					{
						position262, tokenIndex262 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l263
						}
						position++
						goto l262
					l263:
						position, tokenIndex = position262, tokenIndex262
						if buffer[position] != rune('P') {
							goto l257
						}
						position++
					}
				l262:
					{
						position264, tokenIndex264 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l265
						}
						position++
						goto l264
					l265:
						position, tokenIndex = position264, tokenIndex264
						if buffer[position] != rune('E') {
							goto l257
						}
						position++
					}
				l264:
					goto l149
				l257:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l266
					}
					position++
					{
						position267, tokenIndex267 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l268
						}
						position++
						goto l267
					l268:
						position, tokenIndex = position267, tokenIndex267
						if buffer[position] != rune('U') {
							goto l266
						}
						position++
					}
				l267:
					{
						position269, tokenIndex269 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l270
						}
						position++
						goto l269
					l270:
						position, tokenIndex = position269, tokenIndex269
						if buffer[position] != rune('L') {
							goto l266
						}
						position++
					}
				l269:
					{
						position271, tokenIndex271 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l272
						}
						position++
						goto l271
					l272:
						position, tokenIndex = position271, tokenIndex271
						if buffer[position] != rune('E') {
							goto l266
						}
						position++
					}
				l271:
					{
						position273, tokenIndex273 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l274
						}
						position++
						goto l273
					l274:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('B') {
							goto l266
						}
						position++
					}
				l273:
					if buffer[position] != rune('1') {
						goto l266
					}
					position++
					if buffer[position] != rune('2') {
						goto l266
					}
					position++
					if buffer[position] != rune('8') {
						goto l266
					}
					position++
					goto l149
				l266:
					position, tokenIndex = position149, tokenIndex149
					if buffer[position] != rune('.') {
						goto l147
					}
					position++
					{
						position275, tokenIndex275 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l276
						}
						position++
						goto l275
					l276:
						position, tokenIndex = position275, tokenIndex275
						if buffer[position] != rune('S') {
							goto l147
						}
						position++
					}
				l275:
					{
						position277, tokenIndex277 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l278
						}
						position++
						goto l277
					l278:
						position, tokenIndex = position277, tokenIndex277
						if buffer[position] != rune('L') {
							goto l147
						}
						position++
					}
				l277:
					{
						position279, tokenIndex279 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l280
						}
						position++
						goto l279
					l280:
						position, tokenIndex = position279, tokenIndex279
						if buffer[position] != rune('E') {
							goto l147
						}
						position++
					}
				l279:
					{
						position281, tokenIndex281 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l282
						}
						position++
						goto l281
					l282:
						position, tokenIndex = position281, tokenIndex281
						if buffer[position] != rune('B') {
							goto l147
						}
						position++
					}
				l281:
					if buffer[position] != rune('1') {
						goto l147
					}
					position++
					if buffer[position] != rune('2') {
						goto l147
					}
					position++
					if buffer[position] != rune('8') {
						goto l147
					}
					position++
				}
			l149:
				add(ruleLabelContainingDirectiveName, position148)
			}
			memoize(13, position147, tokenIndex147, true)
			return true
		l147:
			memoize(13, position147, tokenIndex147, false)
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 14 SymbolArgs <- <(SymbolArg (WS? ',' WS? SymbolArg)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{14, position}]; ok {
				return memoizedResult(memoized)
			}
			position283, tokenIndex283 := position, tokenIndex
			{
				position284 := position
				if !_rules[ruleSymbolArg]() {
					goto l283
				}
			l285:
				{
					position286, tokenIndex286 := position, tokenIndex
					{
						position287, tokenIndex287 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l287
						}
						goto l288
					l287:
						position, tokenIndex = position287, tokenIndex287
					}
				l288:
					if buffer[position] != rune(',') {
						goto l286
					}
					position++
					{
						position289, tokenIndex289 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l289
						}
						goto l290
					l289:
						position, tokenIndex = position289, tokenIndex289
					}
				l290:
					if !_rules[ruleSymbolArg]() {
						goto l286
					}
					goto l285
				l286:
					position, tokenIndex = position286, tokenIndex286
				}
				add(ruleSymbolArgs, position284)
			}
			memoize(14, position283, tokenIndex283, true)
			return true
		l283:
			memoize(14, position283, tokenIndex283, false)
			position, tokenIndex = position283, tokenIndex283
			return false
		},
		/* 15 SymbolArg <- <SymbolExpr> */
		func() bool {
			if memoized, ok := memoization[memoKey{15, position}]; ok {
				return memoizedResult(memoized)
			}
			position291, tokenIndex291 := position, tokenIndex
			{
				position292 := position
				if !_rules[ruleSymbolExpr]() {
					goto l291
				}
				add(ruleSymbolArg, position292)
			}
			memoize(15, position291, tokenIndex291, true)
			return true
		l291:
			memoize(15, position291, tokenIndex291, false)
			position, tokenIndex = position291, tokenIndex291
			return false
		},
		/* 16 SymbolExpr <- <(SymbolAtom (WS? SymbolOperator WS? SymbolExpr)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{16, position}]; ok {
				return memoizedResult(memoized)
			}
			position293, tokenIndex293 := position, tokenIndex
			{
				position294 := position
				if !_rules[ruleSymbolAtom]() {
					goto l293
				}
				{
					position295, tokenIndex295 := position, tokenIndex
					{
						position297, tokenIndex297 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l297
						}
						goto l298
					l297:
						position, tokenIndex = position297, tokenIndex297
					}
				l298:
					if !_rules[ruleSymbolOperator]() {
						goto l295
					}
					{
						position299, tokenIndex299 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l299
						}
						goto l300
					l299:
						position, tokenIndex = position299, tokenIndex299
					}
				l300:
					if !_rules[ruleSymbolExpr]() {
						goto l295
					}
					goto l296
				l295:
					position, tokenIndex = position295, tokenIndex295
				}
			l296:
				add(ruleSymbolExpr, position294)
			}
			memoize(16, position293, tokenIndex293, true)
			return true
		l293:
			memoize(16, position293, tokenIndex293, false)
			position, tokenIndex = position293, tokenIndex293
			return false
		},
		/* 17 SymbolAtom <- <(Offset / SymbolType / LocalLabelRef / (LocalSymbol TCMarker?) / (SymbolName Offset) / (SymbolName TCMarker?) / Dot / (OpenParen WS? SymbolExpr WS? CloseParen))> */
		func() bool {
			if memoized, ok := memoization[memoKey{17, position}]; ok {
				return memoizedResult(memoized)
			}
			position301, tokenIndex301 := position, tokenIndex
			{
				position302 := position
				{
					position303, tokenIndex303 := position, tokenIndex
					if !_rules[ruleOffset]() {
						goto l304
					}
					goto l303
				l304:
					position, tokenIndex = position303, tokenIndex303
					if !_rules[ruleSymbolType]() {
						goto l305
					}
					goto l303
				l305:
					position, tokenIndex = position303, tokenIndex303
					if !_rules[ruleLocalLabelRef]() {
						goto l306
					}
					goto l303
				l306:
					position, tokenIndex = position303, tokenIndex303
					if !_rules[ruleLocalSymbol]() {
						goto l307
					}
					{
						position308, tokenIndex308 := position, tokenIndex
						if !_rules[ruleTCMarker]() {
							goto l308
						}
						goto l309
					l308:
						position, tokenIndex = position308, tokenIndex308
					}
				l309:
					goto l303
				l307:
					position, tokenIndex = position303, tokenIndex303
					if !_rules[ruleSymbolName]() {
						goto l310
					}
					if !_rules[ruleOffset]() {
						goto l310
					}
					goto l303
				l310:
					position, tokenIndex = position303, tokenIndex303
					if !_rules[ruleSymbolName]() {
						goto l311
					}
					{
						position312, tokenIndex312 := position, tokenIndex
						if !_rules[ruleTCMarker]() {
							goto l312
						}
						goto l313
					l312:
						position, tokenIndex = position312, tokenIndex312
					}
				l313:
					goto l303
				l311:
					position, tokenIndex = position303, tokenIndex303
					if !_rules[ruleDot]() {
						goto l314
					}
					goto l303
				l314:
					position, tokenIndex = position303, tokenIndex303
					if !_rules[ruleOpenParen]() {
						goto l301
					}
					{
						position315, tokenIndex315 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l315
						}
						goto l316
					l315:
						position, tokenIndex = position315, tokenIndex315
					}
				l316:
					if !_rules[ruleSymbolExpr]() {
						goto l301
					}
					{
						position317, tokenIndex317 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l317
						}
						goto l318
					l317:
						position, tokenIndex = position317, tokenIndex317
					}
				l318:
					if !_rules[ruleCloseParen]() {
						goto l301
					}
				}
			l303:
				add(ruleSymbolAtom, position302)
			}
			memoize(17, position301, tokenIndex301, true)
			return true
		l301:
			memoize(17, position301, tokenIndex301, false)
			position, tokenIndex = position301, tokenIndex301
			return false
		},
		/* 18 SymbolOperator <- <('+' / '-' / '|' / ('<' '<') / ('>' '>'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{18, position}]; ok {
				return memoizedResult(memoized)
			}
			position319, tokenIndex319 := position, tokenIndex
			{
				position320 := position
				{
					position321, tokenIndex321 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l322
					}
					position++
					goto l321
				l322:
					position, tokenIndex = position321, tokenIndex321
					if buffer[position] != rune('-') {
						goto l323
					}
					position++
					goto l321
				l323:
					position, tokenIndex = position321, tokenIndex321
					if buffer[position] != rune('|') {
						goto l324
					}
					position++
					goto l321
				l324:
					position, tokenIndex = position321, tokenIndex321
					if buffer[position] != rune('<') {
						goto l325
					}
					position++
					if buffer[position] != rune('<') {
						goto l325
					}
					position++
					goto l321
				l325:
					position, tokenIndex = position321, tokenIndex321
					if buffer[position] != rune('>') {
						goto l319
					}
					position++
					if buffer[position] != rune('>') {
						goto l319
					}
					position++
				}
			l321:
				add(ruleSymbolOperator, position320)
			}
			memoize(18, position319, tokenIndex319, true)
			return true
		l319:
			memoize(18, position319, tokenIndex319, false)
			position, tokenIndex = position319, tokenIndex319
			return false
		},
		/* 19 OpenParen <- <'('> */
		func() bool {
			if memoized, ok := memoization[memoKey{19, position}]; ok {
				return memoizedResult(memoized)
			}
			position326, tokenIndex326 := position, tokenIndex
			{
				position327 := position
				if buffer[position] != rune('(') {
					goto l326
				}
				position++
				add(ruleOpenParen, position327)
			}
			memoize(19, position326, tokenIndex326, true)
			return true
		l326:
			memoize(19, position326, tokenIndex326, false)
			position, tokenIndex = position326, tokenIndex326
			return false
		},
		/* 20 CloseParen <- <')'> */
		func() bool {
			if memoized, ok := memoization[memoKey{20, position}]; ok {
				return memoizedResult(memoized)
			}
			position328, tokenIndex328 := position, tokenIndex
			{
				position329 := position
				if buffer[position] != rune(')') {
					goto l328
				}
				position++
				add(ruleCloseParen, position329)
			}
			memoize(20, position328, tokenIndex328, true)
			return true
		l328:
			memoize(20, position328, tokenIndex328, false)
			position, tokenIndex = position328, tokenIndex328
			return false
		},
		/* 21 SymbolType <- <(('@' / '%') (('f' 'u' 'n' 'c' 't' 'i' 'o' 'n') / ('o' 'b' 'j' 'e' 'c' 't')))> */
		func() bool {
			if memoized, ok := memoization[memoKey{21, position}]; ok {
				return memoizedResult(memoized)
			}
			position330, tokenIndex330 := position, tokenIndex
			{
				position331 := position
				{
					position332, tokenIndex332 := position, tokenIndex
					if buffer[position] != rune('@') {
						goto l333
					}
					position++
					goto l332
				l333:
					position, tokenIndex = position332, tokenIndex332
					if buffer[position] != rune('%') {
						goto l330
					}
					position++
				}
			l332:
				{
					position334, tokenIndex334 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l335
					}
					position++
					if buffer[position] != rune('u') {
						goto l335
					}
					position++
					if buffer[position] != rune('n') {
						goto l335
					}
					position++
					if buffer[position] != rune('c') {
						goto l335
					}
					position++
					if buffer[position] != rune('t') {
						goto l335
					}
					position++
					if buffer[position] != rune('i') {
						goto l335
					}
					position++
					if buffer[position] != rune('o') {
						goto l335
					}
					position++
					if buffer[position] != rune('n') {
						goto l335
					}
					position++
					goto l334
				l335:
					position, tokenIndex = position334, tokenIndex334
					if buffer[position] != rune('o') {
						goto l330
					}
					position++
					if buffer[position] != rune('b') {
						goto l330
					}
					position++
					if buffer[position] != rune('j') {
						goto l330
					}
					position++
					if buffer[position] != rune('e') {
						goto l330
					}
					position++
					if buffer[position] != rune('c') {
						goto l330
					}
					position++
					if buffer[position] != rune('t') {
						goto l330
					}
					position++
				}
			l334:
				add(ruleSymbolType, position331)
			}
			memoize(21, position330, tokenIndex330, true)
			return true
		l330:
			memoize(21, position330, tokenIndex330, false)
			position, tokenIndex = position330, tokenIndex330
			return false
		},
		/* 22 Dot <- <'.'> */
		func() bool {
			if memoized, ok := memoization[memoKey{22, position}]; ok {
				return memoizedResult(memoized)
			}
			position336, tokenIndex336 := position, tokenIndex
			{
				position337 := position
				if buffer[position] != rune('.') {
					goto l336
				}
				position++
				add(ruleDot, position337)
			}
			memoize(22, position336, tokenIndex336, true)
			return true
		l336:
			memoize(22, position336, tokenIndex336, false)
			position, tokenIndex = position336, tokenIndex336
			return false
		},
		/* 23 TCMarker <- <('[' 'T' 'C' ']')> */
		func() bool {
			if memoized, ok := memoization[memoKey{23, position}]; ok {
				return memoizedResult(memoized)
			}
			position338, tokenIndex338 := position, tokenIndex
			{
				position339 := position
				if buffer[position] != rune('[') {
					goto l338
				}
				position++
				if buffer[position] != rune('T') {
					goto l338
				}
				position++
				if buffer[position] != rune('C') {
					goto l338
				}
				position++
				if buffer[position] != rune(']') {
					goto l338
				}
				position++
				add(ruleTCMarker, position339)
			}
			memoize(23, position338, tokenIndex338, true)
			return true
		l338:
			memoize(23, position338, tokenIndex338, false)
			position, tokenIndex = position338, tokenIndex338
			return false
		},
		/* 24 EscapedChar <- <('\\' .)> */
		func() bool {
			if memoized, ok := memoization[memoKey{24, position}]; ok {
				return memoizedResult(memoized)
			}
			position340, tokenIndex340 := position, tokenIndex
			{
				position341 := position
				if buffer[position] != rune('\\') {
					goto l340
				}
				position++
				if !matchDot() {
					goto l340
				}
				add(ruleEscapedChar, position341)
			}
			memoize(24, position340, tokenIndex340, true)
			return true
		l340:
			memoize(24, position340, tokenIndex340, false)
			position, tokenIndex = position340, tokenIndex340
			return false
		},
		/* 25 WS <- <(' ' / '\t')+> */
		func() bool {
			if memoized, ok := memoization[memoKey{25, position}]; ok {
				return memoizedResult(memoized)
			}
			position342, tokenIndex342 := position, tokenIndex
			{
				position343 := position
				{
					position346, tokenIndex346 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l347
					}
					position++
					goto l346
				l347:
					position, tokenIndex = position346, tokenIndex346
					if buffer[position] != rune('\t') {
						goto l342
					}
					position++
				}
			l346:
			l344:
				{
					position345, tokenIndex345 := position, tokenIndex
					{
						position348, tokenIndex348 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l349
						}
						position++
						goto l348
					l349:
						position, tokenIndex = position348, tokenIndex348
						if buffer[position] != rune('\t') {
							goto l345
						}
						position++
					}
				l348:
					goto l344
				l345:
					position, tokenIndex = position345, tokenIndex345
				}
				add(ruleWS, position343)
			}
			memoize(25, position342, tokenIndex342, true)
			return true
		l342:
			memoize(25, position342, tokenIndex342, false)
			position, tokenIndex = position342, tokenIndex342
			return false
		},
		/* 26 Comment <- <((('/' '/') / '#') (!'\n' .)*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{26, position}]; ok {
				return memoizedResult(memoized)
			}
			position350, tokenIndex350 := position, tokenIndex
			{
				position351 := position
				{
					position352, tokenIndex352 := position, tokenIndex
					if buffer[position] != rune('/') {
						goto l353
					}
					position++
					if buffer[position] != rune('/') {
						goto l353
					}
					position++
					goto l352
				l353:
					position, tokenIndex = position352, tokenIndex352
					if buffer[position] != rune('#') {
						goto l350
					}
					position++
				}
			l352:
			l354:
				{
					position355, tokenIndex355 := position, tokenIndex
					{
						position356, tokenIndex356 := position, tokenIndex
						if buffer[position] != rune('\n') {
							goto l356
						}
						position++
						goto l355
					l356:
						position, tokenIndex = position356, tokenIndex356
					}
					if !matchDot() {
						goto l355
					}
					goto l354
				l355:
					position, tokenIndex = position355, tokenIndex355
				}
				add(ruleComment, position351)
			}
			memoize(26, position350, tokenIndex350, true)
			return true
		l350:
			memoize(26, position350, tokenIndex350, false)
			position, tokenIndex = position350, tokenIndex350
			return false
		},
		/* 27 Label <- <((LocalSymbol / LocalLabel / SymbolName) ':')> */
		func() bool {
			if memoized, ok := memoization[memoKey{27, position}]; ok {
				return memoizedResult(memoized)
			}
			position357, tokenIndex357 := position, tokenIndex
			{
				position358 := position
				{
					position359, tokenIndex359 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l360
					}
					goto l359
				l360:
					position, tokenIndex = position359, tokenIndex359
					if !_rules[ruleLocalLabel]() {
						goto l361
					}
					goto l359
				l361:
					position, tokenIndex = position359, tokenIndex359
					if !_rules[ruleSymbolName]() {
						goto l357
					}
				}
			l359:
				if buffer[position] != rune(':') {
					goto l357
				}
				position++
				add(ruleLabel, position358)
			}
			memoize(27, position357, tokenIndex357, true)
			return true
		l357:
			memoize(27, position357, tokenIndex357, false)
			position, tokenIndex = position357, tokenIndex357
			return false
		},
		/* 28 SymbolName <- <(([a-z] / [A-Z] / '.' / '_') ([a-z] / [A-Z] / '.' / ([0-9] / [0-9]) / '$' / '_')*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{28, position}]; ok {
				return memoizedResult(memoized)
			}
			position362, tokenIndex362 := position, tokenIndex
			{
				position363 := position
				{
					position364, tokenIndex364 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l365
					}
					position++
					goto l364
				l365:
					position, tokenIndex = position364, tokenIndex364
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l366
					}
					position++
					goto l364
				l366:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('.') {
						goto l367
					}
					position++
					goto l364
				l367:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('_') {
						goto l362
					}
					position++
				}
			l364:
			l368:
				{
					position369, tokenIndex369 := position, tokenIndex
					{
						position370, tokenIndex370 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l371
						}
						position++
						goto l370
					l371:
						position, tokenIndex = position370, tokenIndex370
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l372
						}
						position++
						goto l370
					l372:
						position, tokenIndex = position370, tokenIndex370
						if buffer[position] != rune('.') {
							goto l373
						}
						position++
						goto l370
					l373:
						position, tokenIndex = position370, tokenIndex370
						{
							position375, tokenIndex375 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l376
							}
							position++
							goto l375
						l376:
							position, tokenIndex = position375, tokenIndex375
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l374
							}
							position++
						}
					l375:
						goto l370
					l374:
						position, tokenIndex = position370, tokenIndex370
						if buffer[position] != rune('$') {
							goto l377
						}
						position++
						goto l370
					l377:
						position, tokenIndex = position370, tokenIndex370
						if buffer[position] != rune('_') {
							goto l369
						}
						position++
					}
				l370:
					goto l368
				l369:
					position, tokenIndex = position369, tokenIndex369
				}
				add(ruleSymbolName, position363)
			}
			memoize(28, position362, tokenIndex362, true)
			return true
		l362:
			memoize(28, position362, tokenIndex362, false)
			position, tokenIndex = position362, tokenIndex362
			return false
		},
		/* 29 LocalSymbol <- <('.' 'L' ([a-z] / [A-Z] / ([a-z] / [A-Z]) / '.' / ([0-9] / [0-9]) / '$' / '_')+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{29, position}]; ok {
				return memoizedResult(memoized)
			}
			position378, tokenIndex378 := position, tokenIndex
			{
				position379 := position
				if buffer[position] != rune('.') {
					goto l378
				}
				position++
				if buffer[position] != rune('L') {
					goto l378
				}
				position++
				{
					position382, tokenIndex382 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l383
					}
					position++
					goto l382
				l383:
					position, tokenIndex = position382, tokenIndex382
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l384
					}
					position++
					goto l382
				l384:
					position, tokenIndex = position382, tokenIndex382
					{
						position386, tokenIndex386 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l387
						}
						position++
						goto l386
					l387:
						position, tokenIndex = position386, tokenIndex386
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l385
						}
						position++
					}
				l386:
					goto l382
				l385:
					position, tokenIndex = position382, tokenIndex382
					if buffer[position] != rune('.') {
						goto l388
					}
					position++
					goto l382
				l388:
					position, tokenIndex = position382, tokenIndex382
					{
						position390, tokenIndex390 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l391
						}
						position++
						goto l390
					l391:
						position, tokenIndex = position390, tokenIndex390
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l389
						}
						position++
					}
				l390:
					goto l382
				l389:
					position, tokenIndex = position382, tokenIndex382
					if buffer[position] != rune('$') {
						goto l392
					}
					position++
					goto l382
				l392:
					position, tokenIndex = position382, tokenIndex382
					if buffer[position] != rune('_') {
						goto l378
					}
					position++
				}
			l382:
			l380:
				{
					position381, tokenIndex381 := position, tokenIndex
					{
						position393, tokenIndex393 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l394
						}
						position++
						goto l393
					l394:
						position, tokenIndex = position393, tokenIndex393
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l395
						}
						position++
						goto l393
					l395:
						position, tokenIndex = position393, tokenIndex393
						{
							position397, tokenIndex397 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l398
							}
							position++
							goto l397
						l398:
							position, tokenIndex = position397, tokenIndex397
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l396
							}
							position++
						}
					l397:
						goto l393
					l396:
						position, tokenIndex = position393, tokenIndex393
						if buffer[position] != rune('.') {
							goto l399
						}
						position++
						goto l393
					l399:
						position, tokenIndex = position393, tokenIndex393
						{
							position401, tokenIndex401 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l402
							}
							position++
							goto l401
						l402:
							position, tokenIndex = position401, tokenIndex401
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l400
							}
							position++
						}
					l401:
						goto l393
					l400:
						position, tokenIndex = position393, tokenIndex393
						if buffer[position] != rune('$') {
							goto l403
						}
						position++
						goto l393
					l403:
						position, tokenIndex = position393, tokenIndex393
						if buffer[position] != rune('_') {
							goto l381
						}
						position++
					}
				l393:
					goto l380
				l381:
					position, tokenIndex = position381, tokenIndex381
				}
				add(ruleLocalSymbol, position379)
			}
			memoize(29, position378, tokenIndex378, true)
			return true
		l378:
			memoize(29, position378, tokenIndex378, false)
			position, tokenIndex = position378, tokenIndex378
			return false
		},
		/* 30 LocalLabel <- <([0-9] ([0-9] / '$')*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{30, position}]; ok {
				return memoizedResult(memoized)
			}
			position404, tokenIndex404 := position, tokenIndex
			{
				position405 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l404
				}
				position++
			l406:
				{
					position407, tokenIndex407 := position, tokenIndex
					{
						position408, tokenIndex408 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l409
						}
						position++
						goto l408
					l409:
						position, tokenIndex = position408, tokenIndex408
						if buffer[position] != rune('$') {
							goto l407
						}
						position++
					}
				l408:
					goto l406
				l407:
					position, tokenIndex = position407, tokenIndex407
				}
				add(ruleLocalLabel, position405)
			}
			memoize(30, position404, tokenIndex404, true)
			return true
		l404:
			memoize(30, position404, tokenIndex404, false)
			position, tokenIndex = position404, tokenIndex404
			return false
		},
		/* 31 LocalLabelRef <- <([0-9] ([0-9] / '$')* ('b' / 'f'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{31, position}]; ok {
				return memoizedResult(memoized)
			}
			position410, tokenIndex410 := position, tokenIndex
			{
				position411 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l410
				}
				position++
			l412:
				{
					position413, tokenIndex413 := position, tokenIndex
					{
						position414, tokenIndex414 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l415
						}
						position++
						goto l414
					l415:
						position, tokenIndex = position414, tokenIndex414
						if buffer[position] != rune('$') {
							goto l413
						}
						position++
					}
				l414:
					goto l412
				l413:
					position, tokenIndex = position413, tokenIndex413
				}
				{
					position416, tokenIndex416 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l417
					}
					position++
					goto l416
				l417:
					position, tokenIndex = position416, tokenIndex416
					if buffer[position] != rune('f') {
						goto l410
					}
					position++
				}
			l416:
				add(ruleLocalLabelRef, position411)
			}
			memoize(31, position410, tokenIndex410, true)
			return true
		l410:
			memoize(31, position410, tokenIndex410, false)
			position, tokenIndex = position410, tokenIndex410
			return false
		},
		/* 32 Instruction <- <(InstructionName (WS InstructionArg (WS? ','? WS? InstructionArg)*)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{32, position}]; ok {
				return memoizedResult(memoized)
			}
			position418, tokenIndex418 := position, tokenIndex
			{
				position419 := position
				if !_rules[ruleInstructionName]() {
					goto l418
				}
				{
					position420, tokenIndex420 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l420
					}
					if !_rules[ruleInstructionArg]() {
						goto l420
					}
				l422:
					{
						position423, tokenIndex423 := position, tokenIndex
						{
							position424, tokenIndex424 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l424
							}
							goto l425
						l424:
							position, tokenIndex = position424, tokenIndex424
						}
					l425:
						{
							position426, tokenIndex426 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l426
							}
							position++
							goto l427
						l426:
							position, tokenIndex = position426, tokenIndex426
						}
					l427:
						{
							position428, tokenIndex428 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l428
							}
							goto l429
						l428:
							position, tokenIndex = position428, tokenIndex428
						}
					l429:
						if !_rules[ruleInstructionArg]() {
							goto l423
						}
						goto l422
					l423:
						position, tokenIndex = position423, tokenIndex423
					}
					goto l421
				l420:
					position, tokenIndex = position420, tokenIndex420
				}
			l421:
				add(ruleInstruction, position419)
			}
			memoize(32, position418, tokenIndex418, true)
			return true
		l418:
			memoize(32, position418, tokenIndex418, false)
			position, tokenIndex = position418, tokenIndex418
			return false
		},
		/* 33 InstructionName <- <(([a-z] / [A-Z]) ([a-z] / [A-Z] / '.' / ([0-9] / [0-9]))* ('.' / '+' / '-')?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{33, position}]; ok {
				return memoizedResult(memoized)
			}
			position430, tokenIndex430 := position, tokenIndex
			{
				position431 := position
				{
					position432, tokenIndex432 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l433
					}
					position++
					goto l432
				l433:
					position, tokenIndex = position432, tokenIndex432
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l430
					}
					position++
				}
			l432:
			l434:
				{
					position435, tokenIndex435 := position, tokenIndex
					{
						position436, tokenIndex436 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l437
						}
						position++
						goto l436
					l437:
						position, tokenIndex = position436, tokenIndex436
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l438
						}
						position++
						goto l436
					l438:
						position, tokenIndex = position436, tokenIndex436
						if buffer[position] != rune('.') {
							goto l439
						}
						position++
						goto l436
					l439:
						position, tokenIndex = position436, tokenIndex436
						{
							position440, tokenIndex440 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l441
							}
							position++
							goto l440
						l441:
							position, tokenIndex = position440, tokenIndex440
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l435
							}
							position++
						}
					l440:
					}
				l436:
					goto l434
				l435:
					position, tokenIndex = position435, tokenIndex435
				}
				{
					position442, tokenIndex442 := position, tokenIndex
					{
						position444, tokenIndex444 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l445
						}
						position++
						goto l444
					l445:
						position, tokenIndex = position444, tokenIndex444
						if buffer[position] != rune('+') {
							goto l446
						}
						position++
						goto l444
					l446:
						position, tokenIndex = position444, tokenIndex444
						if buffer[position] != rune('-') {
							goto l442
						}
						position++
					}
				l444:
					goto l443
				l442:
					position, tokenIndex = position442, tokenIndex442
				}
			l443:
				add(ruleInstructionName, position431)
			}
			memoize(33, position430, tokenIndex430, true)
			return true
		l430:
			memoize(33, position430, tokenIndex430, false)
			position, tokenIndex = position430, tokenIndex430
			return false
		},
		/* 34 InstructionArg <- <(IndirectionIndicator? (ARMConstantTweak / RegisterOrConstant / LocalLabelRef / TOCRefHigh / TOCRefLow / GOTLocation / GOTSymbolOffset / MemoryRef / AVX512Token))> */
		func() bool {
			if memoized, ok := memoization[memoKey{34, position}]; ok {
				return memoizedResult(memoized)
			}
			position447, tokenIndex447 := position, tokenIndex
			{
				position448 := position
				{
					position449, tokenIndex449 := position, tokenIndex
					if !_rules[ruleIndirectionIndicator]() {
						goto l449
					}
					goto l450
				l449:
					position, tokenIndex = position449, tokenIndex449
				}
			l450:
				{
					position451, tokenIndex451 := position, tokenIndex
					if !_rules[ruleARMConstantTweak]() {
						goto l452
					}
					goto l451
				l452:
					position, tokenIndex = position451, tokenIndex451
					if !_rules[ruleRegisterOrConstant]() {
						goto l453
					}
					goto l451
				l453:
					position, tokenIndex = position451, tokenIndex451
					if !_rules[ruleLocalLabelRef]() {
						goto l454
					}
					goto l451
				l454:
					position, tokenIndex = position451, tokenIndex451
					if !_rules[ruleTOCRefHigh]() {
						goto l455
					}
					goto l451
				l455:
					position, tokenIndex = position451, tokenIndex451
					if !_rules[ruleTOCRefLow]() {
						goto l456
					}
					goto l451
				l456:
					position, tokenIndex = position451, tokenIndex451
					if !_rules[ruleGOTLocation]() {
						goto l457
					}
					goto l451
				l457:
					position, tokenIndex = position451, tokenIndex451
					if !_rules[ruleGOTSymbolOffset]() {
						goto l458
					}
					goto l451
				l458:
					position, tokenIndex = position451, tokenIndex451
					if !_rules[ruleMemoryRef]() {
						goto l459
					}
					goto l451
				l459:
					position, tokenIndex = position451, tokenIndex451
					if !_rules[ruleAVX512Token]() {
						goto l447
					}
				}
			l451:
				add(ruleInstructionArg, position448)
			}
			memoize(34, position447, tokenIndex447, true)
			return true
		l447:
			memoize(34, position447, tokenIndex447, false)
			position, tokenIndex = position447, tokenIndex447
			return false
		},
		/* 35 GOTLocation <- <('$' '_' 'G' 'L' 'O' 'B' 'A' 'L' '_' 'O' 'F' 'F' 'S' 'E' 'T' '_' 'T' 'A' 'B' 'L' 'E' '_' '-' LocalSymbol)> */
		func() bool {
			if memoized, ok := memoization[memoKey{35, position}]; ok {
				return memoizedResult(memoized)
			}
			position460, tokenIndex460 := position, tokenIndex
			{
				position461 := position
				if buffer[position] != rune('$') {
					goto l460
				}
				position++
				if buffer[position] != rune('_') {
					goto l460
				}
				position++
				if buffer[position] != rune('G') {
					goto l460
				}
				position++
				if buffer[position] != rune('L') {
					goto l460
				}
				position++
				if buffer[position] != rune('O') {
					goto l460
				}
				position++
				if buffer[position] != rune('B') {
					goto l460
				}
				position++
				if buffer[position] != rune('A') {
					goto l460
				}
				position++
				if buffer[position] != rune('L') {
					goto l460
				}
				position++
				if buffer[position] != rune('_') {
					goto l460
				}
				position++
				if buffer[position] != rune('O') {
					goto l460
				}
				position++
				if buffer[position] != rune('F') {
					goto l460
				}
				position++
				if buffer[position] != rune('F') {
					goto l460
				}
				position++
				if buffer[position] != rune('S') {
					goto l460
				}
				position++
				if buffer[position] != rune('E') {
					goto l460
				}
				position++
				if buffer[position] != rune('T') {
					goto l460
				}
				position++
				if buffer[position] != rune('_') {
					goto l460
				}
				position++
				if buffer[position] != rune('T') {
					goto l460
				}
				position++
				if buffer[position] != rune('A') {
					goto l460
				}
				position++
				if buffer[position] != rune('B') {
					goto l460
				}
				position++
				if buffer[position] != rune('L') {
					goto l460
				}
				position++
				if buffer[position] != rune('E') {
					goto l460
				}
				position++
				if buffer[position] != rune('_') {
					goto l460
				}
				position++
				if buffer[position] != rune('-') {
					goto l460
				}
				position++
				if !_rules[ruleLocalSymbol]() {
					goto l460
				}
				add(ruleGOTLocation, position461)
			}
			memoize(35, position460, tokenIndex460, true)
			return true
		l460:
			memoize(35, position460, tokenIndex460, false)
			position, tokenIndex = position460, tokenIndex460
			return false
		},
		/* 36 GOTSymbolOffset <- <(('$' SymbolName ('@' 'G' 'O' 'T') ('O' 'F' 'F')?) / (':' ('g' / 'G') ('o' / 'O') ('t' / 'T') ':' SymbolName))> */
		func() bool {
			if memoized, ok := memoization[memoKey{36, position}]; ok {
				return memoizedResult(memoized)
			}
			position462, tokenIndex462 := position, tokenIndex
			{
				position463 := position
				{
					position464, tokenIndex464 := position, tokenIndex
					if buffer[position] != rune('$') {
						goto l465
					}
					position++
					if !_rules[ruleSymbolName]() {
						goto l465
					}
					if buffer[position] != rune('@') {
						goto l465
					}
					position++
					if buffer[position] != rune('G') {
						goto l465
					}
					position++
					if buffer[position] != rune('O') {
						goto l465
					}
					position++
					if buffer[position] != rune('T') {
						goto l465
					}
					position++
					{
						position466, tokenIndex466 := position, tokenIndex
						if buffer[position] != rune('O') {
							goto l466
						}
						position++
						if buffer[position] != rune('F') {
							goto l466
						}
						position++
						if buffer[position] != rune('F') {
							goto l466
						}
						position++
						goto l467
					l466:
						position, tokenIndex = position466, tokenIndex466
					}
				l467:
					goto l464
				l465:
					position, tokenIndex = position464, tokenIndex464
					if buffer[position] != rune(':') {
						goto l462
					}
					position++
					{
						position468, tokenIndex468 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l469
						}
						position++
						goto l468
					l469:
						position, tokenIndex = position468, tokenIndex468
						if buffer[position] != rune('G') {
							goto l462
						}
						position++
					}
				l468:
					{
						position470, tokenIndex470 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l471
						}
						position++
						goto l470
					l471:
						position, tokenIndex = position470, tokenIndex470
						if buffer[position] != rune('O') {
							goto l462
						}
						position++
					}
				l470:
					{
						position472, tokenIndex472 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l473
						}
						position++
						goto l472
					l473:
						position, tokenIndex = position472, tokenIndex472
						if buffer[position] != rune('T') {
							goto l462
						}
						position++
					}
				l472:
					if buffer[position] != rune(':') {
						goto l462
					}
					position++
					if !_rules[ruleSymbolName]() {
						goto l462
					}
				}
			l464:
				add(ruleGOTSymbolOffset, position463)
			}
			memoize(36, position462, tokenIndex462, true)
			return true
		l462:
			memoize(36, position462, tokenIndex462, false)
			position, tokenIndex = position462, tokenIndex462
			return false
		},
		/* 37 AVX512Token <- <(WS? '{' '%'? ([0-9] / [a-z])* '}')> */
		func() bool {
			if memoized, ok := memoization[memoKey{37, position}]; ok {
				return memoizedResult(memoized)
			}
			position474, tokenIndex474 := position, tokenIndex
			{
				position475 := position
				{
					position476, tokenIndex476 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l476
					}
					goto l477
				l476:
					position, tokenIndex = position476, tokenIndex476
				}
			l477:
				if buffer[position] != rune('{') {
					goto l474
				}
				position++
				{
					position478, tokenIndex478 := position, tokenIndex
					if buffer[position] != rune('%') {
						goto l478
					}
					position++
					goto l479
				l478:
					position, tokenIndex = position478, tokenIndex478
				}
			l479:
			l480:
				{
					position481, tokenIndex481 := position, tokenIndex
					{
						position482, tokenIndex482 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l483
						}
						position++
						goto l482
					l483:
						position, tokenIndex = position482, tokenIndex482
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l481
						}
						position++
					}
				l482:
					goto l480
				l481:
					position, tokenIndex = position481, tokenIndex481
				}
				if buffer[position] != rune('}') {
					goto l474
				}
				position++
				add(ruleAVX512Token, position475)
			}
			memoize(37, position474, tokenIndex474, true)
			return true
		l474:
			memoize(37, position474, tokenIndex474, false)
			position, tokenIndex = position474, tokenIndex474
			return false
		},
		/* 38 TOCRefHigh <- <('.' 'T' 'O' 'C' '.' '-' (('0' 'b') / ('.' 'L' ([a-z] / [A-Z] / '_' / [0-9])+)) ('@' ('h' / 'H') ('a' / 'A')))> */
		func() bool {
			if memoized, ok := memoization[memoKey{38, position}]; ok {
				return memoizedResult(memoized)
			}
			position484, tokenIndex484 := position, tokenIndex
			{
				position485 := position
				if buffer[position] != rune('.') {
					goto l484
				}
				position++
				if buffer[position] != rune('T') {
					goto l484
				}
				position++
				if buffer[position] != rune('O') {
					goto l484
				}
				position++
				if buffer[position] != rune('C') {
					goto l484
				}
				position++
				if buffer[position] != rune('.') {
					goto l484
				}
				position++
				if buffer[position] != rune('-') {
					goto l484
				}
				position++
				{
					position486, tokenIndex486 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l487
					}
					position++
					if buffer[position] != rune('b') {
						goto l487
					}
					position++
					goto l486
				l487:
					position, tokenIndex = position486, tokenIndex486
					if buffer[position] != rune('.') {
						goto l484
					}
					position++
					if buffer[position] != rune('L') {
						goto l484
					}
					position++
					{
						position490, tokenIndex490 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l491
						}
						position++
						goto l490
					l491:
						position, tokenIndex = position490, tokenIndex490
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l492
						}
						position++
						goto l490
					l492:
						position, tokenIndex = position490, tokenIndex490
						if buffer[position] != rune('_') {
							goto l493
						}
						position++
						goto l490
					l493:
						position, tokenIndex = position490, tokenIndex490
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l484
						}
						position++
					}
				l490:
				l488:
					{
						position489, tokenIndex489 := position, tokenIndex
						{
							position494, tokenIndex494 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l495
							}
							position++
							goto l494
						l495:
							position, tokenIndex = position494, tokenIndex494
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l496
							}
							position++
							goto l494
						l496:
							position, tokenIndex = position494, tokenIndex494
							if buffer[position] != rune('_') {
								goto l497
							}
							position++
							goto l494
						l497:
							position, tokenIndex = position494, tokenIndex494
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l489
							}
							position++
						}
					l494:
						goto l488
					l489:
						position, tokenIndex = position489, tokenIndex489
					}
				}
			l486:
				if buffer[position] != rune('@') {
					goto l484
				}
				position++
				{
					position498, tokenIndex498 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l499
					}
					position++
					goto l498
				l499:
					position, tokenIndex = position498, tokenIndex498
					if buffer[position] != rune('H') {
						goto l484
					}
					position++
				}
			l498:
				{
					position500, tokenIndex500 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l501
					}
					position++
					goto l500
				l501:
					position, tokenIndex = position500, tokenIndex500
					if buffer[position] != rune('A') {
						goto l484
					}
					position++
				}
			l500:
				add(ruleTOCRefHigh, position485)
			}
			memoize(38, position484, tokenIndex484, true)
			return true
		l484:
			memoize(38, position484, tokenIndex484, false)
			position, tokenIndex = position484, tokenIndex484
			return false
		},
		/* 39 TOCRefLow <- <('.' 'T' 'O' 'C' '.' '-' (('0' 'b') / ('.' 'L' ([a-z] / [A-Z] / '_' / [0-9])+)) ('@' ('l' / 'L')))> */
		func() bool {
			if memoized, ok := memoization[memoKey{39, position}]; ok {
				return memoizedResult(memoized)
			}
			position502, tokenIndex502 := position, tokenIndex
			{
				position503 := position
				if buffer[position] != rune('.') {
					goto l502
				}
				position++
				if buffer[position] != rune('T') {
					goto l502
				}
				position++
				if buffer[position] != rune('O') {
					goto l502
				}
				position++
				if buffer[position] != rune('C') {
					goto l502
				}
				position++
				if buffer[position] != rune('.') {
					goto l502
				}
				position++
				if buffer[position] != rune('-') {
					goto l502
				}
				position++
				{
					position504, tokenIndex504 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l505
					}
					position++
					if buffer[position] != rune('b') {
						goto l505
					}
					position++
					goto l504
				l505:
					position, tokenIndex = position504, tokenIndex504
					if buffer[position] != rune('.') {
						goto l502
					}
					position++
					if buffer[position] != rune('L') {
						goto l502
					}
					position++
					{
						position508, tokenIndex508 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l509
						}
						position++
						goto l508
					l509:
						position, tokenIndex = position508, tokenIndex508
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l510
						}
						position++
						goto l508
					l510:
						position, tokenIndex = position508, tokenIndex508
						if buffer[position] != rune('_') {
							goto l511
						}
						position++
						goto l508
					l511:
						position, tokenIndex = position508, tokenIndex508
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l502
						}
						position++
					}
				l508:
				l506:
					{
						position507, tokenIndex507 := position, tokenIndex
						{
							position512, tokenIndex512 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l513
							}
							position++
							goto l512
						l513:
							position, tokenIndex = position512, tokenIndex512
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l514
							}
							position++
							goto l512
						l514:
							position, tokenIndex = position512, tokenIndex512
							if buffer[position] != rune('_') {
								goto l515
							}
							position++
							goto l512
						l515:
							position, tokenIndex = position512, tokenIndex512
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l507
							}
							position++
						}
					l512:
						goto l506
					l507:
						position, tokenIndex = position507, tokenIndex507
					}
				}
			l504:
				if buffer[position] != rune('@') {
					goto l502
				}
				position++
				{
					position516, tokenIndex516 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l517
					}
					position++
					goto l516
				l517:
					position, tokenIndex = position516, tokenIndex516
					if buffer[position] != rune('L') {
						goto l502
					}
					position++
				}
			l516:
				add(ruleTOCRefLow, position503)
			}
			memoize(39, position502, tokenIndex502, true)
			return true
		l502:
			memoize(39, position502, tokenIndex502, false)
			position, tokenIndex = position502, tokenIndex502
			return false
		},
		/* 40 IndirectionIndicator <- <'*'> */
		func() bool {
			if memoized, ok := memoization[memoKey{40, position}]; ok {
				return memoizedResult(memoized)
			}
			position518, tokenIndex518 := position, tokenIndex
			{
				position519 := position
				if buffer[position] != rune('*') {
					goto l518
				}
				position++
				add(ruleIndirectionIndicator, position519)
			}
			memoize(40, position518, tokenIndex518, true)
			return true
		l518:
			memoize(40, position518, tokenIndex518, false)
			position, tokenIndex = position518, tokenIndex518
			return false
		},
		/* 41 RegisterOrConstant <- <((('%' ([a-z] / [A-Z]) ([a-z] / [A-Z] / ([0-9] / [0-9]))*) / ('$' [0-9]+ WS? '*' WS? '(' [0-9]+ WS? '-' WS? [0-9]+ ')') / ('$'? ((Offset Offset) / Offset)) / ('#' Offset ('*' [0-9]+ ('-' [0-9] [0-9]*)?)?) / ('#' '~'? '(' [0-9] WS? ('<' '<') WS? [0-9] [0-9]? ')') / (('#' / '$') '~'? ('0' 'x')? ([0-9] / [0-9] / ([a-f] / [A-F]))+) / ('$' '(' '-' [0-9]+ ')') / ARMRegister) !('f' / 'b' / ':' / '(' / '+' / '-'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{41, position}]; ok {
				return memoizedResult(memoized)
			}
			position520, tokenIndex520 := position, tokenIndex
			{
				position521 := position
				{
					position522, tokenIndex522 := position, tokenIndex
					if buffer[position] != rune('%') {
						goto l523
					}
					position++
					{
						position524, tokenIndex524 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l525
						}
						position++
						goto l524
					l525:
						position, tokenIndex = position524, tokenIndex524
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l523
						}
						position++
					}
				l524:
				l526:
					{
						position527, tokenIndex527 := position, tokenIndex
						{
							position528, tokenIndex528 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l529
							}
							position++
							goto l528
						l529:
							position, tokenIndex = position528, tokenIndex528
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l530
							}
							position++
							goto l528
						l530:
							position, tokenIndex = position528, tokenIndex528
							{
								position531, tokenIndex531 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l532
								}
								position++
								goto l531
							l532:
								position, tokenIndex = position531, tokenIndex531
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l527
								}
								position++
							}
						l531:
						}
					l528:
						goto l526
					l527:
						position, tokenIndex = position527, tokenIndex527
					}
					goto l522
				l523:
					position, tokenIndex = position522, tokenIndex522
					if buffer[position] != rune('$') {
						goto l533
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l533
					}
					position++
				l534:
					{
						position535, tokenIndex535 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l535
						}
						position++
						goto l534
					l535:
						position, tokenIndex = position535, tokenIndex535
					}
					{
						position536, tokenIndex536 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l536
						}
						goto l537
					l536:
						position, tokenIndex = position536, tokenIndex536
					}
				l537:
					if buffer[position] != rune('*') {
						goto l533
					}
					position++
					{
						position538, tokenIndex538 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l538
						}
						goto l539
					l538:
						position, tokenIndex = position538, tokenIndex538
					}
				l539:
					if buffer[position] != rune('(') {
						goto l533
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l533
					}
					position++
				l540:
					{
						position541, tokenIndex541 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l541
						}
						position++
						goto l540
					l541:
						position, tokenIndex = position541, tokenIndex541
					}
					{
						position542, tokenIndex542 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l542
						}
						goto l543
					l542:
						position, tokenIndex = position542, tokenIndex542
					}
				l543:
					if buffer[position] != rune('-') {
						goto l533
					}
					position++
					{
						position544, tokenIndex544 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l544
						}
						goto l545
					l544:
						position, tokenIndex = position544, tokenIndex544
					}
				l545:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l533
					}
					position++
				l546:
					{
						position547, tokenIndex547 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l547
						}
						position++
						goto l546
					l547:
						position, tokenIndex = position547, tokenIndex547
					}
					if buffer[position] != rune(')') {
						goto l533
					}
					position++
					goto l522
				l533:
					position, tokenIndex = position522, tokenIndex522
					{
						position549, tokenIndex549 := position, tokenIndex
						if buffer[position] != rune('$') {
							goto l549
						}
						position++
						goto l550
					l549:
						position, tokenIndex = position549, tokenIndex549
					}
				l550:
					{
						position551, tokenIndex551 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l552
						}
						if !_rules[ruleOffset]() {
							goto l552
						}
						goto l551
					l552:
						position, tokenIndex = position551, tokenIndex551
						if !_rules[ruleOffset]() {
							goto l548
						}
					}
				l551:
					goto l522
				l548:
					position, tokenIndex = position522, tokenIndex522
					if buffer[position] != rune('#') {
						goto l553
					}
					position++
					if !_rules[ruleOffset]() {
						goto l553
					}
					{
						position554, tokenIndex554 := position, tokenIndex
						if buffer[position] != rune('*') {
							goto l554
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l554
						}
						position++
					l556:
						{
							position557, tokenIndex557 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l557
							}
							position++
							goto l556
						l557:
							position, tokenIndex = position557, tokenIndex557
						}
						{
							position558, tokenIndex558 := position, tokenIndex
							if buffer[position] != rune('-') {
								goto l558
							}
							position++
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l558
							}
							position++
						l560:
							{
								position561, tokenIndex561 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l561
								}
								position++
								goto l560
							l561:
								position, tokenIndex = position561, tokenIndex561
							}
							goto l559
						l558:
							position, tokenIndex = position558, tokenIndex558
						}
					l559:
						goto l555
					l554:
						position, tokenIndex = position554, tokenIndex554
					}
				l555:
					goto l522
				l553:
					position, tokenIndex = position522, tokenIndex522
					if buffer[position] != rune('#') {
						goto l562
					}
					position++
					{
						position563, tokenIndex563 := position, tokenIndex
						if buffer[position] != rune('~') {
							goto l563
						}
						position++
						goto l564
					l563:
						position, tokenIndex = position563, tokenIndex563
					}
				l564:
					if buffer[position] != rune('(') {
						goto l562
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l562
					}
					position++
					{
						position565, tokenIndex565 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l565
						}
						goto l566
					l565:
						position, tokenIndex = position565, tokenIndex565
					}
				l566:
					if buffer[position] != rune('<') {
						goto l562
					}
					position++
					if buffer[position] != rune('<') {
						goto l562
					}
					position++
					{
						position567, tokenIndex567 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l567
						}
						goto l568
					l567:
						position, tokenIndex = position567, tokenIndex567
					}
				l568:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l562
					}
					position++
					{
						position569, tokenIndex569 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l569
						}
						position++
						goto l570
					l569:
						position, tokenIndex = position569, tokenIndex569
					}
				l570:
					if buffer[position] != rune(')') {
						goto l562
					}
					position++
					goto l522
				l562:
					position, tokenIndex = position522, tokenIndex522
					{
						position572, tokenIndex572 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l573
						}
						position++
						goto l572
					l573:
						position, tokenIndex = position572, tokenIndex572
						if buffer[position] != rune('$') {
							goto l571
						}
						position++
					}
				l572:
					{
						position574, tokenIndex574 := position, tokenIndex
						if buffer[position] != rune('~') {
							goto l574
						}
						position++
						goto l575
					l574:
						position, tokenIndex = position574, tokenIndex574
					}
				l575:
					{
						position576, tokenIndex576 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l576
						}
						position++
						if buffer[position] != rune('x') {
							goto l576
						}
						position++
						goto l577
					l576:
						position, tokenIndex = position576, tokenIndex576
					}
				l577:
					{
						position580, tokenIndex580 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l581
						}
						position++
						goto l580
					l581:
						position, tokenIndex = position580, tokenIndex580
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l582
						}
						position++
						goto l580
					l582:
						position, tokenIndex = position580, tokenIndex580
						{
							position583, tokenIndex583 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('f') {
								goto l584
							}
							position++
							goto l583
						l584:
							position, tokenIndex = position583, tokenIndex583
							if c := buffer[position]; c < rune('A') || c > rune('F') {
								goto l571
							}
							position++
						}
					l583:
					}
				l580:
				l578:
					{
						position579, tokenIndex579 := position, tokenIndex
						{
							position585, tokenIndex585 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l586
							}
							position++
							goto l585
						l586:
							position, tokenIndex = position585, tokenIndex585
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l587
							}
							position++
							goto l585
						l587:
							position, tokenIndex = position585, tokenIndex585
							{
								position588, tokenIndex588 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('f') {
									goto l589
								}
								position++
								goto l588
							l589:
								position, tokenIndex = position588, tokenIndex588
								if c := buffer[position]; c < rune('A') || c > rune('F') {
									goto l579
								}
								position++
							}
						l588:
						}
					l585:
						goto l578
					l579:
						position, tokenIndex = position579, tokenIndex579
					}
					goto l522
				l571:
					position, tokenIndex = position522, tokenIndex522
					if buffer[position] != rune('$') {
						goto l590
					}
					position++
					if buffer[position] != rune('(') {
						goto l590
					}
					position++
					if buffer[position] != rune('-') {
						goto l590
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l590
					}
					position++
				l591:
					{
						position592, tokenIndex592 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l592
						}
						position++
						goto l591
					l592:
						position, tokenIndex = position592, tokenIndex592
					}
					if buffer[position] != rune(')') {
						goto l590
					}
					position++
					goto l522
				l590:
					position, tokenIndex = position522, tokenIndex522
					if !_rules[ruleARMRegister]() {
						goto l520
					}
				}
			l522:
				{
					position593, tokenIndex593 := position, tokenIndex
					{
						position594, tokenIndex594 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l595
						}
						position++
						goto l594
					l595:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('b') {
							goto l596
						}
						position++
						goto l594
					l596:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune(':') {
							goto l597
						}
						position++
						goto l594
					l597:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('(') {
							goto l598
						}
						position++
						goto l594
					l598:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('+') {
							goto l599
						}
						position++
						goto l594
					l599:
						position, tokenIndex = position594, tokenIndex594
						if buffer[position] != rune('-') {
							goto l593
						}
						position++
					}
				l594:
					goto l520
				l593:
					position, tokenIndex = position593, tokenIndex593
				}
				add(ruleRegisterOrConstant, position521)
			}
			memoize(41, position520, tokenIndex520, true)
			return true
		l520:
			memoize(41, position520, tokenIndex520, false)
			position, tokenIndex = position520, tokenIndex520
			return false
		},
		/* 42 ARMConstantTweak <- <(((('u' / 's') (('x' / 'X') ('t' / 'T')) ('x' / 'w' / 'h' / 'b')) / (('l' / 'L') ('s' / 'S') ('l' / 'L')) / (('l' / 'L') ('s' / 'S') ('r' / 'R')) / (('r' / 'R') ('o' / 'O') ('r' / 'R')) / (('a' / 'A') ('s' / 'S') ('r' / 'R'))) (WS '#'? Offset)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{42, position}]; ok {
				return memoizedResult(memoized)
			}
			position600, tokenIndex600 := position, tokenIndex
			{
				position601 := position
				{
					position602, tokenIndex602 := position, tokenIndex
					{
						position604, tokenIndex604 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l605
						}
						position++
						goto l604
					l605:
						position, tokenIndex = position604, tokenIndex604
						if buffer[position] != rune('s') {
							goto l603
						}
						position++
					}
				l604:
					{
						position606, tokenIndex606 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l607
						}
						position++
						goto l606
					l607:
						position, tokenIndex = position606, tokenIndex606
						if buffer[position] != rune('X') {
							goto l603
						}
						position++
					}
				l606:
					{
						position608, tokenIndex608 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l609
						}
						position++
						goto l608
					l609:
						position, tokenIndex = position608, tokenIndex608
						if buffer[position] != rune('T') {
							goto l603
						}
						position++
					}
				l608:
					{
						position610, tokenIndex610 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l611
						}
						position++
						goto l610
					l611:
						position, tokenIndex = position610, tokenIndex610
						if buffer[position] != rune('w') {
							goto l612
						}
						position++
						goto l610
					l612:
						position, tokenIndex = position610, tokenIndex610
						if buffer[position] != rune('h') {
							goto l613
						}
						position++
						goto l610
					l613:
						position, tokenIndex = position610, tokenIndex610
						if buffer[position] != rune('b') {
							goto l603
						}
						position++
					}
				l610:
					goto l602
				l603:
					position, tokenIndex = position602, tokenIndex602
					{
						position615, tokenIndex615 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l616
						}
						position++
						goto l615
					l616:
						position, tokenIndex = position615, tokenIndex615
						if buffer[position] != rune('L') {
							goto l614
						}
						position++
					}
				l615:
					{
						position617, tokenIndex617 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l618
						}
						position++
						goto l617
					l618:
						position, tokenIndex = position617, tokenIndex617
						if buffer[position] != rune('S') {
							goto l614
						}
						position++
					}
				l617:
					{
						position619, tokenIndex619 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l620
						}
						position++
						goto l619
					l620:
						position, tokenIndex = position619, tokenIndex619
						if buffer[position] != rune('L') {
							goto l614
						}
						position++
					}
				l619:
					goto l602
				l614:
					position, tokenIndex = position602, tokenIndex602
					{
						position622, tokenIndex622 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l623
						}
						position++
						goto l622
					l623:
						position, tokenIndex = position622, tokenIndex622
						if buffer[position] != rune('L') {
							goto l621
						}
						position++
					}
				l622:
					{
						position624, tokenIndex624 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l625
						}
						position++
						goto l624
					l625:
						position, tokenIndex = position624, tokenIndex624
						if buffer[position] != rune('S') {
							goto l621
						}
						position++
					}
				l624:
					{
						position626, tokenIndex626 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l627
						}
						position++
						goto l626
					l627:
						position, tokenIndex = position626, tokenIndex626
						if buffer[position] != rune('R') {
							goto l621
						}
						position++
					}
				l626:
					goto l602
				l621:
					position, tokenIndex = position602, tokenIndex602
					{
						position629, tokenIndex629 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l630
						}
						position++
						goto l629
					l630:
						position, tokenIndex = position629, tokenIndex629
						if buffer[position] != rune('R') {
							goto l628
						}
						position++
					}
				l629:
					{
						position631, tokenIndex631 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l632
						}
						position++
						goto l631
					l632:
						position, tokenIndex = position631, tokenIndex631
						if buffer[position] != rune('O') {
							goto l628
						}
						position++
					}
				l631:
					{
						position633, tokenIndex633 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l634
						}
						position++
						goto l633
					l634:
						position, tokenIndex = position633, tokenIndex633
						if buffer[position] != rune('R') {
							goto l628
						}
						position++
					}
				l633:
					goto l602
				l628:
					position, tokenIndex = position602, tokenIndex602
					{
						position635, tokenIndex635 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l636
						}
						position++
						goto l635
					l636:
						position, tokenIndex = position635, tokenIndex635
						if buffer[position] != rune('A') {
							goto l600
						}
						position++
					}
				l635:
					{
						position637, tokenIndex637 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l638
						}
						position++
						goto l637
					l638:
						position, tokenIndex = position637, tokenIndex637
						if buffer[position] != rune('S') {
							goto l600
						}
						position++
					}
				l637:
					{
						position639, tokenIndex639 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l640
						}
						position++
						goto l639
					l640:
						position, tokenIndex = position639, tokenIndex639
						if buffer[position] != rune('R') {
							goto l600
						}
						position++
					}
				l639:
				}
			l602:
				{
					position641, tokenIndex641 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l641
					}
					{
						position643, tokenIndex643 := position, tokenIndex
						if buffer[position] != rune('#') {
							goto l643
						}
						position++
						goto l644
					l643:
						position, tokenIndex = position643, tokenIndex643
					}
				l644:
					if !_rules[ruleOffset]() {
						goto l641
					}
					goto l642
				l641:
					position, tokenIndex = position641, tokenIndex641
				}
			l642:
				add(ruleARMConstantTweak, position601)
			}
			memoize(42, position600, tokenIndex600, true)
			return true
		l600:
			memoize(42, position600, tokenIndex600, false)
			position, tokenIndex = position600, tokenIndex600
			return false
		},
		/* 43 ARMRegister <- <((('s' / 'S') ('p' / 'P')) / (('x' / 'w' / 'd' / 'q' / 's' / 'h' / 'b') [0-9] [0-9]?) / (('x' / 'X') ('z' / 'Z') ('r' / 'R')) / (('w' / 'W') ('z' / 'Z') ('r' / 'R')) / (('n' / 'N') ('z' / 'Z') ('c' / 'C') ('v' / 'V')) / ARMVectorRegister / ('{' WS? ARMVectorRegister WS? ((',' / '-') WS? ARMVectorRegister)* WS? '}' ('[' [0-9] [0-9]? ']')?))> */
		func() bool {
			if memoized, ok := memoization[memoKey{43, position}]; ok {
				return memoizedResult(memoized)
			}
			position645, tokenIndex645 := position, tokenIndex
			{
				position646 := position
				{
					position647, tokenIndex647 := position, tokenIndex
					{
						position649, tokenIndex649 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l650
						}
						position++
						goto l649
					l650:
						position, tokenIndex = position649, tokenIndex649
						if buffer[position] != rune('S') {
							goto l648
						}
						position++
					}
				l649:
					{
						position651, tokenIndex651 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l652
						}
						position++
						goto l651
					l652:
						position, tokenIndex = position651, tokenIndex651
						if buffer[position] != rune('P') {
							goto l648
						}
						position++
					}
				l651:
					goto l647
				l648:
					position, tokenIndex = position647, tokenIndex647
					{
						position654, tokenIndex654 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l655
						}
						position++
						goto l654
					l655:
						position, tokenIndex = position654, tokenIndex654
						if buffer[position] != rune('w') {
							goto l656
						}
						position++
						goto l654
					l656:
						position, tokenIndex = position654, tokenIndex654
						if buffer[position] != rune('d') {
							goto l657
						}
						position++
						goto l654
					l657:
						position, tokenIndex = position654, tokenIndex654
						if buffer[position] != rune('q') {
							goto l658
						}
						position++
						goto l654
					l658:
						position, tokenIndex = position654, tokenIndex654
						if buffer[position] != rune('s') {
							goto l659
						}
						position++
						goto l654
					l659:
						position, tokenIndex = position654, tokenIndex654
						if buffer[position] != rune('h') {
							goto l660
						}
						position++
						goto l654
					l660:
						position, tokenIndex = position654, tokenIndex654
						if buffer[position] != rune('b') {
							goto l653
						}
						position++
					}
				l654:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l653
					}
					position++
					{
						position661, tokenIndex661 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l661
						}
						position++
						goto l662
					l661:
						position, tokenIndex = position661, tokenIndex661
					}
				l662:
					goto l647
				l653:
					position, tokenIndex = position647, tokenIndex647
					{
						position664, tokenIndex664 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l665
						}
						position++
						goto l664
					l665:
						position, tokenIndex = position664, tokenIndex664
						if buffer[position] != rune('X') {
							goto l663
						}
						position++
					}
				l664:
					{
						position666, tokenIndex666 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l667
						}
						position++
						goto l666
					l667:
						position, tokenIndex = position666, tokenIndex666
						if buffer[position] != rune('Z') {
							goto l663
						}
						position++
					}
				l666:
					{
						position668, tokenIndex668 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l669
						}
						position++
						goto l668
					l669:
						position, tokenIndex = position668, tokenIndex668
						if buffer[position] != rune('R') {
							goto l663
						}
						position++
					}
				l668:
					goto l647
				l663:
					position, tokenIndex = position647, tokenIndex647
					{
						position671, tokenIndex671 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l672
						}
						position++
						goto l671
					l672:
						position, tokenIndex = position671, tokenIndex671
						if buffer[position] != rune('W') {
							goto l670
						}
						position++
					}
				l671:
					{
						position673, tokenIndex673 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l674
						}
						position++
						goto l673
					l674:
						position, tokenIndex = position673, tokenIndex673
						if buffer[position] != rune('Z') {
							goto l670
						}
						position++
					}
				l673:
					{
						position675, tokenIndex675 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l676
						}
						position++
						goto l675
					l676:
						position, tokenIndex = position675, tokenIndex675
						if buffer[position] != rune('R') {
							goto l670
						}
						position++
					}
				l675:
					goto l647
				l670:
					position, tokenIndex = position647, tokenIndex647
					{
						position678, tokenIndex678 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l679
						}
						position++
						goto l678
					l679:
						position, tokenIndex = position678, tokenIndex678
						if buffer[position] != rune('N') {
							goto l677
						}
						position++
					}
				l678:
					{
						position680, tokenIndex680 := position, tokenIndex
						if buffer[position] != rune('z') {
							goto l681
						}
						position++
						goto l680
					l681:
						position, tokenIndex = position680, tokenIndex680
						if buffer[position] != rune('Z') {
							goto l677
						}
						position++
					}
				l680:
					{
						position682, tokenIndex682 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l683
						}
						position++
						goto l682
					l683:
						position, tokenIndex = position682, tokenIndex682
						if buffer[position] != rune('C') {
							goto l677
						}
						position++
					}
				l682:
					{
						position684, tokenIndex684 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l685
						}
						position++
						goto l684
					l685:
						position, tokenIndex = position684, tokenIndex684
						if buffer[position] != rune('V') {
							goto l677
						}
						position++
					}
				l684:
					goto l647
				l677:
					position, tokenIndex = position647, tokenIndex647
					if !_rules[ruleARMVectorRegister]() {
						goto l686
					}
					goto l647
				l686:
					position, tokenIndex = position647, tokenIndex647
					if buffer[position] != rune('{') {
						goto l645
					}
					position++
					{
						position687, tokenIndex687 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l687
						}
						goto l688
					l687:
						position, tokenIndex = position687, tokenIndex687
					}
				l688:
					if !_rules[ruleARMVectorRegister]() {
						goto l645
					}
					{
						position689, tokenIndex689 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l689
						}
						goto l690
					l689:
						position, tokenIndex = position689, tokenIndex689
					}
				l690:
				l691:
					{
						position692, tokenIndex692 := position, tokenIndex
						{
							position693, tokenIndex693 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l694
							}
							position++
							goto l693
						l694:
							position, tokenIndex = position693, tokenIndex693
							if buffer[position] != rune('-') {
								goto l692
							}
							position++
						}
					l693:
						{
							position695, tokenIndex695 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l695
							}
							goto l696
						l695:
							position, tokenIndex = position695, tokenIndex695
						}
					l696:
						if !_rules[ruleARMVectorRegister]() {
							goto l692
						}
						goto l691
					l692:
						position, tokenIndex = position692, tokenIndex692
					}
					{
						position697, tokenIndex697 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l697
						}
						goto l698
					l697:
						position, tokenIndex = position697, tokenIndex697
					}
				l698:
					if buffer[position] != rune('}') {
						goto l645
					}
					position++
					{
						position699, tokenIndex699 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l699
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l699
						}
						position++
						{
							position701, tokenIndex701 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l701
							}
							position++
							goto l702
						l701:
							position, tokenIndex = position701, tokenIndex701
						}
					l702:
						if buffer[position] != rune(']') {
							goto l699
						}
						position++
						goto l700
					l699:
						position, tokenIndex = position699, tokenIndex699
					}
				l700:
				}
			l647:
				add(ruleARMRegister, position646)
			}
			memoize(43, position645, tokenIndex645, true)
			return true
		l645:
			memoize(43, position645, tokenIndex645, false)
			position, tokenIndex = position645, tokenIndex645
			return false
		},
		/* 44 ARMVectorRegister <- <(('v' / 'V') [0-9] [0-9]? ('.' [0-9]* ('b' / 's' / 'd' / 'h' / 'q') ('[' [0-9] [0-9]? ']')?)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{44, position}]; ok {
				return memoizedResult(memoized)
			}
			position703, tokenIndex703 := position, tokenIndex
			{
				position704 := position
				{
					position705, tokenIndex705 := position, tokenIndex
					if buffer[position] != rune('v') {
						goto l706
					}
					position++
					goto l705
				l706:
					position, tokenIndex = position705, tokenIndex705
					if buffer[position] != rune('V') {
						goto l703
					}
					position++
				}
			l705:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l703
				}
				position++
				{
					position707, tokenIndex707 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l707
					}
					position++
					goto l708
				l707:
					position, tokenIndex = position707, tokenIndex707
				}
			l708:
				{
					position709, tokenIndex709 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l709
					}
					position++
				l711:
					{
						position712, tokenIndex712 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l712
						}
						position++
						goto l711
					l712:
						position, tokenIndex = position712, tokenIndex712
					}
					{
						position713, tokenIndex713 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l714
						}
						position++
						goto l713
					l714:
						position, tokenIndex = position713, tokenIndex713
						if buffer[position] != rune('s') {
							goto l715
						}
						position++
						goto l713
					l715:
						position, tokenIndex = position713, tokenIndex713
						if buffer[position] != rune('d') {
							goto l716
						}
						position++
						goto l713
					l716:
						position, tokenIndex = position713, tokenIndex713
						if buffer[position] != rune('h') {
							goto l717
						}
						position++
						goto l713
					l717:
						position, tokenIndex = position713, tokenIndex713
						if buffer[position] != rune('q') {
							goto l709
						}
						position++
					}
				l713:
					{
						position718, tokenIndex718 := position, tokenIndex
						if buffer[position] != rune('[') {
							goto l718
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l718
						}
						position++
						{
							position720, tokenIndex720 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l720
							}
							position++
							goto l721
						l720:
							position, tokenIndex = position720, tokenIndex720
						}
					l721:
						if buffer[position] != rune(']') {
							goto l718
						}
						position++
						goto l719
					l718:
						position, tokenIndex = position718, tokenIndex718
					}
				l719:
					goto l710
				l709:
					position, tokenIndex = position709, tokenIndex709
				}
			l710:
				add(ruleARMVectorRegister, position704)
			}
			memoize(44, position703, tokenIndex703, true)
			return true
		l703:
			memoize(44, position703, tokenIndex703, false)
			position, tokenIndex = position703, tokenIndex703
			return false
		},
		/* 45 MemoryRef <- <((SymbolRef BaseIndexScale) / SymbolRef / Low12BitsSymbolRef / (Offset* BaseIndexScale) / (SegmentRegister Offset BaseIndexScale) / (SegmentRegister BaseIndexScale) / (SegmentRegister Offset) / ARMBaseIndexScale / BaseIndexScale)> */
		func() bool {
			if memoized, ok := memoization[memoKey{45, position}]; ok {
				return memoizedResult(memoized)
			}
			position722, tokenIndex722 := position, tokenIndex
			{
				position723 := position
				{
					position724, tokenIndex724 := position, tokenIndex
					if !_rules[ruleSymbolRef]() {
						goto l725
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l725
					}
					goto l724
				l725:
					position, tokenIndex = position724, tokenIndex724
					if !_rules[ruleSymbolRef]() {
						goto l726
					}
					goto l724
				l726:
					position, tokenIndex = position724, tokenIndex724
					if !_rules[ruleLow12BitsSymbolRef]() {
						goto l727
					}
					goto l724
				l727:
					position, tokenIndex = position724, tokenIndex724
				l729:
					{
						position730, tokenIndex730 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l730
						}
						goto l729
					l730:
						position, tokenIndex = position730, tokenIndex730
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l728
					}
					goto l724
				l728:
					position, tokenIndex = position724, tokenIndex724
					if !_rules[ruleSegmentRegister]() {
						goto l731
					}
					if !_rules[ruleOffset]() {
						goto l731
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l731
					}
					goto l724
				l731:
					position, tokenIndex = position724, tokenIndex724
					if !_rules[ruleSegmentRegister]() {
						goto l732
					}
					if !_rules[ruleBaseIndexScale]() {
						goto l732
					}
					goto l724
				l732:
					position, tokenIndex = position724, tokenIndex724
					if !_rules[ruleSegmentRegister]() {
						goto l733
					}
					if !_rules[ruleOffset]() {
						goto l733
					}
					goto l724
				l733:
					position, tokenIndex = position724, tokenIndex724
					if !_rules[ruleARMBaseIndexScale]() {
						goto l734
					}
					goto l724
				l734:
					position, tokenIndex = position724, tokenIndex724
					if !_rules[ruleBaseIndexScale]() {
						goto l722
					}
				}
			l724:
				add(ruleMemoryRef, position723)
			}
			memoize(45, position722, tokenIndex722, true)
			return true
		l722:
			memoize(45, position722, tokenIndex722, false)
			position, tokenIndex = position722, tokenIndex722
			return false
		},
		/* 46 SymbolRef <- <((Offset* '+')? (LocalSymbol / SymbolName) Offset* ('@' Section Offset*)?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{46, position}]; ok {
				return memoizedResult(memoized)
			}
			position735, tokenIndex735 := position, tokenIndex
			{
				position736 := position
				{
					position737, tokenIndex737 := position, tokenIndex
				l739:
					{
						position740, tokenIndex740 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l740
						}
						goto l739
					l740:
						position, tokenIndex = position740, tokenIndex740
					}
					if buffer[position] != rune('+') {
						goto l737
					}
					position++
					goto l738
				l737:
					position, tokenIndex = position737, tokenIndex737
				}
			l738:
				{
					position741, tokenIndex741 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l742
					}
					goto l741
				l742:
					position, tokenIndex = position741, tokenIndex741
					if !_rules[ruleSymbolName]() {
						goto l735
					}
				}
			l741:
			l743:
				{
					position744, tokenIndex744 := position, tokenIndex
					if !_rules[ruleOffset]() {
						goto l744
					}
					goto l743
				l744:
					position, tokenIndex = position744, tokenIndex744
				}
				{
					position745, tokenIndex745 := position, tokenIndex
					if buffer[position] != rune('@') {
						goto l745
					}
					position++
					if !_rules[ruleSection]() {
						goto l745
					}
				l747:
					{
						position748, tokenIndex748 := position, tokenIndex
						if !_rules[ruleOffset]() {
							goto l748
						}
						goto l747
					l748:
						position, tokenIndex = position748, tokenIndex748
					}
					goto l746
				l745:
					position, tokenIndex = position745, tokenIndex745
				}
			l746:
				add(ruleSymbolRef, position736)
			}
			memoize(46, position735, tokenIndex735, true)
			return true
		l735:
			memoize(46, position735, tokenIndex735, false)
			position, tokenIndex = position735, tokenIndex735
			return false
		},
		/* 47 Low12BitsSymbolRef <- <(':' ('l' / 'L') ('o' / 'O') '1' '2' ':' (LocalSymbol / SymbolName) Offset?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{47, position}]; ok {
				return memoizedResult(memoized)
			}
			position749, tokenIndex749 := position, tokenIndex
			{
				position750 := position
				if buffer[position] != rune(':') {
					goto l749
				}
				position++
				{
					position751, tokenIndex751 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l752
					}
					position++
					goto l751
				l752:
					position, tokenIndex = position751, tokenIndex751
					if buffer[position] != rune('L') {
						goto l749
					}
					position++
				}
			l751:
				{
					position753, tokenIndex753 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l754
					}
					position++
					goto l753
				l754:
					position, tokenIndex = position753, tokenIndex753
					if buffer[position] != rune('O') {
						goto l749
					}
					position++
				}
			l753:
				if buffer[position] != rune('1') {
					goto l749
				}
				position++
				if buffer[position] != rune('2') {
					goto l749
				}
				position++
				if buffer[position] != rune(':') {
					goto l749
				}
				position++
				{
					position755, tokenIndex755 := position, tokenIndex
					if !_rules[ruleLocalSymbol]() {
						goto l756
					}
					goto l755
				l756:
					position, tokenIndex = position755, tokenIndex755
					if !_rules[ruleSymbolName]() {
						goto l749
					}
				}
			l755:
				{
					position757, tokenIndex757 := position, tokenIndex
					if !_rules[ruleOffset]() {
						goto l757
					}
					goto l758
				l757:
					position, tokenIndex = position757, tokenIndex757
				}
			l758:
				add(ruleLow12BitsSymbolRef, position750)
			}
			memoize(47, position749, tokenIndex749, true)
			return true
		l749:
			memoize(47, position749, tokenIndex749, false)
			position, tokenIndex = position749, tokenIndex749
			return false
		},
		/* 48 ARMBaseIndexScale <- <('[' ARMRegister (',' WS? (('#'? Offset (('*' [0-9]+) / ('*' '(' [0-9]+ Operator [0-9]+ ')') / ('+' [0-9]+)*)?) / ('#'? ARMGOTLow12) / ('#'? Low12BitsSymbolRef) / ARMRegister) (',' WS? ARMConstantTweak)?)? ']' ARMPostincrement?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{48, position}]; ok {
				return memoizedResult(memoized)
			}
			position759, tokenIndex759 := position, tokenIndex
			{
				position760 := position
				if buffer[position] != rune('[') {
					goto l759
				}
				position++
				if !_rules[ruleARMRegister]() {
					goto l759
				}
				{
					position761, tokenIndex761 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l761
					}
					position++
					{
						position763, tokenIndex763 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l763
						}
						goto l764
					l763:
						position, tokenIndex = position763, tokenIndex763
					}
				l764:
					{
						position765, tokenIndex765 := position, tokenIndex
						{
							position767, tokenIndex767 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l767
							}
							position++
							goto l768
						l767:
							position, tokenIndex = position767, tokenIndex767
						}
					l768:
						if !_rules[ruleOffset]() {
							goto l766
						}
						{
							position769, tokenIndex769 := position, tokenIndex
							{
								position771, tokenIndex771 := position, tokenIndex
								if buffer[position] != rune('*') {
									goto l772
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l772
								}
								position++
							l773:
								{
									position774, tokenIndex774 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l774
									}
									position++
									goto l773
								l774:
									position, tokenIndex = position774, tokenIndex774
								}
								goto l771
							l772:
								position, tokenIndex = position771, tokenIndex771
								if buffer[position] != rune('*') {
									goto l775
								}
								position++
								if buffer[position] != rune('(') {
									goto l775
								}
								position++
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l775
								}
								position++
							l776:
								{
									position777, tokenIndex777 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l777
									}
									position++
									goto l776
								l777:
									position, tokenIndex = position777, tokenIndex777
								}
								if !_rules[ruleOperator]() {
									goto l775
								}
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l775
								}
								position++
							l778:
								{
									position779, tokenIndex779 := position, tokenIndex
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l779
									}
									position++
									goto l778
								l779:
									position, tokenIndex = position779, tokenIndex779
								}
								if buffer[position] != rune(')') {
									goto l775
								}
								position++
								goto l771
							l775:
								position, tokenIndex = position771, tokenIndex771
							l780:
								{
									position781, tokenIndex781 := position, tokenIndex
									if buffer[position] != rune('+') {
										goto l781
									}
									position++
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l781
									}
									position++
								l782:
									{
										position783, tokenIndex783 := position, tokenIndex
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l783
										}
										position++
										goto l782
									l783:
										position, tokenIndex = position783, tokenIndex783
									}
									goto l780
								l781:
									position, tokenIndex = position781, tokenIndex781
								}
							}
						l771:
							goto l770

							position, tokenIndex = position769, tokenIndex769
						}
					l770:
						goto l765
					l766:
						position, tokenIndex = position765, tokenIndex765
						{
							position785, tokenIndex785 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l785
							}
							position++
							goto l786
						l785:
							position, tokenIndex = position785, tokenIndex785
						}
					l786:
						if !_rules[ruleARMGOTLow12]() {
							goto l784
						}
						goto l765
					l784:
						position, tokenIndex = position765, tokenIndex765
						{
							position788, tokenIndex788 := position, tokenIndex
							if buffer[position] != rune('#') {
								goto l788
							}
							position++
							goto l789
						l788:
							position, tokenIndex = position788, tokenIndex788
						}
					l789:
						if !_rules[ruleLow12BitsSymbolRef]() {
							goto l787
						}
						goto l765
					l787:
						position, tokenIndex = position765, tokenIndex765
						if !_rules[ruleARMRegister]() {
							goto l761
						}
					}
				l765:
					{
						position790, tokenIndex790 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l790
						}
						position++
						{
							position792, tokenIndex792 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l792
							}
							goto l793
						l792:
							position, tokenIndex = position792, tokenIndex792
						}
					l793:
						if !_rules[ruleARMConstantTweak]() {
							goto l790
						}
						goto l791
					l790:
						position, tokenIndex = position790, tokenIndex790
					}
				l791:
					goto l762
				l761:
					position, tokenIndex = position761, tokenIndex761
				}
			l762:
				if buffer[position] != rune(']') {
					goto l759
				}
				position++
				{
					position794, tokenIndex794 := position, tokenIndex
					if !_rules[ruleARMPostincrement]() {
						goto l794
					}
					goto l795
				l794:
					position, tokenIndex = position794, tokenIndex794
				}
			l795:
				add(ruleARMBaseIndexScale, position760)
			}
			memoize(48, position759, tokenIndex759, true)
			return true
		l759:
			memoize(48, position759, tokenIndex759, false)
			position, tokenIndex = position759, tokenIndex759
			return false
		},
		/* 49 ARMGOTLow12 <- <(':' ('g' / 'G') ('o' / 'O') ('t' / 'T') '_' ('l' / 'L') ('o' / 'O') '1' '2' ':' SymbolName)> */
		func() bool {
			if memoized, ok := memoization[memoKey{49, position}]; ok {
				return memoizedResult(memoized)
			}
			position796, tokenIndex796 := position, tokenIndex
			{
				position797 := position
				if buffer[position] != rune(':') {
					goto l796
				}
				position++
				{
					position798, tokenIndex798 := position, tokenIndex
					if buffer[position] != rune('g') {
						goto l799
					}
					position++
					goto l798
				l799:
					position, tokenIndex = position798, tokenIndex798
					if buffer[position] != rune('G') {
						goto l796
					}
					position++
				}
			l798:
				{
					position800, tokenIndex800 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l801
					}
					position++
					goto l800
				l801:
					position, tokenIndex = position800, tokenIndex800
					if buffer[position] != rune('O') {
						goto l796
					}
					position++
				}
			l800:
				{
					position802, tokenIndex802 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l803
					}
					position++
					goto l802
				l803:
					position, tokenIndex = position802, tokenIndex802
					if buffer[position] != rune('T') {
						goto l796
					}
					position++
				}
			l802:
				if buffer[position] != rune('_') {
					goto l796
				}
				position++
				{
					position804, tokenIndex804 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l805
					}
					position++
					goto l804
				l805:
					position, tokenIndex = position804, tokenIndex804
					if buffer[position] != rune('L') {
						goto l796
					}
					position++
				}
			l804:
				{
					position806, tokenIndex806 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l807
					}
					position++
					goto l806
				l807:
					position, tokenIndex = position806, tokenIndex806
					if buffer[position] != rune('O') {
						goto l796
					}
					position++
				}
			l806:
				if buffer[position] != rune('1') {
					goto l796
				}
				position++
				if buffer[position] != rune('2') {
					goto l796
				}
				position++
				if buffer[position] != rune(':') {
					goto l796
				}
				position++
				if !_rules[ruleSymbolName]() {
					goto l796
				}
				add(ruleARMGOTLow12, position797)
			}
			memoize(49, position796, tokenIndex796, true)
			return true
		l796:
			memoize(49, position796, tokenIndex796, false)
			position, tokenIndex = position796, tokenIndex796
			return false
		},
		/* 50 ARMPostincrement <- <'!'> */
		func() bool {
			if memoized, ok := memoization[memoKey{50, position}]; ok {
				return memoizedResult(memoized)
			}
			position808, tokenIndex808 := position, tokenIndex
			{
				position809 := position
				if buffer[position] != rune('!') {
					goto l808
				}
				position++
				add(ruleARMPostincrement, position809)
			}
			memoize(50, position808, tokenIndex808, true)
			return true
		l808:
			memoize(50, position808, tokenIndex808, false)
			position, tokenIndex = position808, tokenIndex808
			return false
		},
		/* 51 BaseIndexScale <- <('(' RegisterOrConstant? WS? (',' WS? RegisterOrConstant WS? (',' [0-9]+)?)? ')')> */
		func() bool {
			if memoized, ok := memoization[memoKey{51, position}]; ok {
				return memoizedResult(memoized)
			}
			position810, tokenIndex810 := position, tokenIndex
			{
				position811 := position
				if buffer[position] != rune('(') {
					goto l810
				}
				position++
				{
					position812, tokenIndex812 := position, tokenIndex
					if !_rules[ruleRegisterOrConstant]() {
						goto l812
					}
					goto l813
				l812:
					position, tokenIndex = position812, tokenIndex812
				}
			l813:
				{
					position814, tokenIndex814 := position, tokenIndex
					if !_rules[ruleWS]() {
						goto l814
					}
					goto l815
				l814:
					position, tokenIndex = position814, tokenIndex814
				}
			l815:
				{
					position816, tokenIndex816 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l816
					}
					position++
					{
						position818, tokenIndex818 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l818
						}
						goto l819
					l818:
						position, tokenIndex = position818, tokenIndex818
					}
				l819:
					if !_rules[ruleRegisterOrConstant]() {
						goto l816
					}
					{
						position820, tokenIndex820 := position, tokenIndex
						if !_rules[ruleWS]() {
							goto l820
						}
						goto l821
					l820:
						position, tokenIndex = position820, tokenIndex820
					}
				l821:
					{
						position822, tokenIndex822 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l822
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l822
						}
						position++
					l824:
						{
							position825, tokenIndex825 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l825
							}
							position++
							goto l824
						l825:
							position, tokenIndex = position825, tokenIndex825
						}
						goto l823
					l822:
						position, tokenIndex = position822, tokenIndex822
					}
				l823:
					goto l817
				l816:
					position, tokenIndex = position816, tokenIndex816
				}
			l817:
				if buffer[position] != rune(')') {
					goto l810
				}
				position++
				add(ruleBaseIndexScale, position811)
			}
			memoize(51, position810, tokenIndex810, true)
			return true
		l810:
			memoize(51, position810, tokenIndex810, false)
			position, tokenIndex = position810, tokenIndex810
			return false
		},
		/* 52 Operator <- <('+' / '-')> */
		func() bool {
			if memoized, ok := memoization[memoKey{52, position}]; ok {
				return memoizedResult(memoized)
			}
			position826, tokenIndex826 := position, tokenIndex
			{
				position827 := position
				{
					position828, tokenIndex828 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l829
					}
					position++
					goto l828
				l829:
					position, tokenIndex = position828, tokenIndex828
					if buffer[position] != rune('-') {
						goto l826
					}
					position++
				}
			l828:
				add(ruleOperator, position827)
			}
			memoize(52, position826, tokenIndex826, true)
			return true
		l826:
			memoize(52, position826, tokenIndex826, false)
			position, tokenIndex = position826, tokenIndex826
			return false
		},
		/* 53 OffsetOperator <- <('+' / '-' / '*')> */
		func() bool {
			if memoized, ok := memoization[memoKey{53, position}]; ok {
				return memoizedResult(memoized)
			}
			position830, tokenIndex830 := position, tokenIndex
			{
				position831 := position
				{
					position832, tokenIndex832 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l833
					}
					position++
					goto l832
				l833:
					position, tokenIndex = position832, tokenIndex832
					if buffer[position] != rune('-') {
						goto l834
					}
					position++
					goto l832
				l834:
					position, tokenIndex = position832, tokenIndex832
					if buffer[position] != rune('*') {
						goto l830
					}
					position++
				}
			l832:
				add(ruleOffsetOperator, position831)
			}
			memoize(53, position830, tokenIndex830, true)
			return true
		l830:
			memoize(53, position830, tokenIndex830, false)
			position, tokenIndex = position830, tokenIndex830
			return false
		},
		/* 54 Offset <- <('+'? '-'? (('0' ('b' / 'B') ('0' / '1')+) / ('0' ('x' / 'X') ([0-9] / [0-9] / ([a-f] / [A-F]))+) / ((([0-9]+ WS OffsetOperator [0-9]+) / ([0-9]+ (OffsetOperator '(' [0-9]+ OffsetOperator [0-9]+ ')')?) / ([0-9]+ (OffsetOperator [0-9]+ OffsetOperator [0-9]+)?) / ([0-9]+ (OffsetOperator [0-9]+)?) / ('(' [0-9]+ WS? OffsetOperator WS? [0-9]+ ')' OffsetOperator [0-9]+ OffsetOperator [0-9]+) / ('(' [0-9]+ WS? OffsetOperator WS? [0-9]+ ')' OffsetOperator [0-9]+ !'x') / ('(' [0-9]+ WS? OffsetOperator WS? [0-9]+ ')') / ('(' [0-9]+ WS? OffsetOperator WS? [0-9]+ WS? OffsetOperator WS? [0-9]+ ')')) !([a-z] / [A-Z]))))> */
		func() bool {
			if memoized, ok := memoization[memoKey{54, position}]; ok {
				return memoizedResult(memoized)
			}
			position835, tokenIndex835 := position, tokenIndex
			{
				position836 := position
				{
					position837, tokenIndex837 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l837
					}
					position++
					goto l838
				l837:
					position, tokenIndex = position837, tokenIndex837
				}
			l838:
				{
					position839, tokenIndex839 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l839
					}
					position++
					goto l840
				l839:
					position, tokenIndex = position839, tokenIndex839
				}
			l840:
				{
					position841, tokenIndex841 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l842
					}
					position++
					{
						position843, tokenIndex843 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l844
						}
						position++
						goto l843
					l844:
						position, tokenIndex = position843, tokenIndex843
						if buffer[position] != rune('B') {
							goto l842
						}
						position++
					}
				l843:
					{
						position847, tokenIndex847 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l848
						}
						position++
						goto l847
					l848:
						position, tokenIndex = position847, tokenIndex847
						if buffer[position] != rune('1') {
							goto l842
						}
						position++
					}
				l847:
				l845:
					{
						position846, tokenIndex846 := position, tokenIndex
						{
							position849, tokenIndex849 := position, tokenIndex
							if buffer[position] != rune('0') {
								goto l850
							}
							position++
							goto l849
						l850:
							position, tokenIndex = position849, tokenIndex849
							if buffer[position] != rune('1') {
								goto l846
							}
							position++
						}
					l849:
						goto l845
					l846:
						position, tokenIndex = position846, tokenIndex846
					}
					goto l841
				l842:
					position, tokenIndex = position841, tokenIndex841
					if buffer[position] != rune('0') {
						goto l851
					}
					position++
					{
						position852, tokenIndex852 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l853
						}
						position++
						goto l852
					l853:
						position, tokenIndex = position852, tokenIndex852
						if buffer[position] != rune('X') {
							goto l851
						}
						position++
					}
				l852:
					{
						position856, tokenIndex856 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l857
						}
						position++
						goto l856
					l857:
						position, tokenIndex = position856, tokenIndex856
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l858
						}
						position++
						goto l856
					l858:
						position, tokenIndex = position856, tokenIndex856
						{
							position859, tokenIndex859 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('f') {
								goto l860
							}
							position++
							goto l859
						l860:
							position, tokenIndex = position859, tokenIndex859
							if c := buffer[position]; c < rune('A') || c > rune('F') {
								goto l851
							}
							position++
						}
					l859:
					}
				l856:
				l854:
					{
						position855, tokenIndex855 := position, tokenIndex
						{
							position861, tokenIndex861 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l862
							}
							position++
							goto l861
						l862:
							position, tokenIndex = position861, tokenIndex861
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l863
							}
							position++
							goto l861
						l863:
							position, tokenIndex = position861, tokenIndex861
							{
								position864, tokenIndex864 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('f') {
									goto l865
								}
								position++
								goto l864
							l865:
								position, tokenIndex = position864, tokenIndex864
								if c := buffer[position]; c < rune('A') || c > rune('F') {
									goto l855
								}
								position++
							}
						l864:
						}
					l861:
						goto l854
					l855:
						position, tokenIndex = position855, tokenIndex855
					}
					goto l841
				l851:
					position, tokenIndex = position841, tokenIndex841
					{
						position866, tokenIndex866 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l867
						}
						position++
					l868:
						{
							position869, tokenIndex869 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l869
							}
							position++
							goto l868
						l869:
							position, tokenIndex = position869, tokenIndex869
						}
						if !_rules[ruleWS]() {
							goto l867
						}
						if !_rules[ruleOffsetOperator]() {
							goto l867
						}
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l867
						}
						position++
					l870:
						{
							position871, tokenIndex871 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l871
							}
							position++
							goto l870
						l871:
							position, tokenIndex = position871, tokenIndex871
						}
						goto l866
					l867:
						position, tokenIndex = position866, tokenIndex866
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l872
						}
						position++
					l873:
						{
							position874, tokenIndex874 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l874
							}
							position++
							goto l873
						l874:
							position, tokenIndex = position874, tokenIndex874
						}
						{
							position875, tokenIndex875 := position, tokenIndex
							if !_rules[ruleOffsetOperator]() {
								goto l875
							}
							if buffer[position] != rune('(') {
								goto l875
							}
							position++
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l875
							}
							position++
						l877:
							{
								position878, tokenIndex878 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l878
								}
								position++
								goto l877
							l878:
								position, tokenIndex = position878, tokenIndex878
							}
							if !_rules[ruleOffsetOperator]() {
								goto l875
							}
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l875
							}
							position++
						l879:
							{
								position880, tokenIndex880 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l880
								}
								position++
								goto l879
							l880:
								position, tokenIndex = position880, tokenIndex880
							}
							if buffer[position] != rune(')') {
								goto l875
							}
							position++
							goto l876
						l875:
							position, tokenIndex = position875, tokenIndex875
						}
					l876:
						goto l866
					l872:
						position, tokenIndex = position866, tokenIndex866
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l881
						}
						position++
					l882:
						{
							position883, tokenIndex883 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l883
							}
							position++
							goto l882
						l883:
							position, tokenIndex = position883, tokenIndex883
						}
						{
							position884, tokenIndex884 := position, tokenIndex
							if !_rules[ruleOffsetOperator]() {
								goto l884
							}
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l884
							}
							position++
						l886:
							{
								position887, tokenIndex887 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l887
								}
								position++
								goto l886
							l887:
								position, tokenIndex = position887, tokenIndex887
							}
							if !_rules[ruleOffsetOperator]() {
								goto l884
							}
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l884
							}
							position++
						l888:
							{
								position889, tokenIndex889 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l889
								}
								position++
								goto l888
							l889:
								position, tokenIndex = position889, tokenIndex889
							}
							goto l885
						l884:
							position, tokenIndex = position884, tokenIndex884
						}
					l885:
						goto l866
					l881:
						position, tokenIndex = position866, tokenIndex866
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l890
						}
						position++
					l891:
						{
							position892, tokenIndex892 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l892
							}
							position++
							goto l891
						l892:
							position, tokenIndex = position892, tokenIndex892
						}
						{
							position893, tokenIndex893 := position, tokenIndex
							if !_rules[ruleOffsetOperator]() {
								goto l893
							}
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l893
							}
							position++
						l895:
							{
								position896, tokenIndex896 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l896
								}
								position++
								goto l895
							l896:
								position, tokenIndex = position896, tokenIndex896
							}
							goto l894
						l893:
							position, tokenIndex = position893, tokenIndex893
						}
					l894:
						goto l866
					l890:
						position, tokenIndex = position866, tokenIndex866
						if buffer[position] != rune('(') {
							goto l897
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l897
						}
						position++
					l898:
						{
							position899, tokenIndex899 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l899
							}
							position++
							goto l898
						l899:
							position, tokenIndex = position899, tokenIndex899
						}
						{
							position900, tokenIndex900 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l900
							}
							goto l901
						l900:
							position, tokenIndex = position900, tokenIndex900
						}
					l901:
						if !_rules[ruleOffsetOperator]() {
							goto l897
						}
						{
							position902, tokenIndex902 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l902
							}
							goto l903
						l902:
							position, tokenIndex = position902, tokenIndex902
						}
					l903:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l897
						}
						position++
					l904:
						{
							position905, tokenIndex905 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l905
							}
							position++
							goto l904
						l905:
							position, tokenIndex = position905, tokenIndex905
						}
						if buffer[position] != rune(')') {
							goto l897
						}
						position++
						if !_rules[ruleOffsetOperator]() {
							goto l897
						}
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l897
						}
						position++
					l906:
						{
							position907, tokenIndex907 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l907
							}
							position++
							goto l906
						l907:
							position, tokenIndex = position907, tokenIndex907
						}
						if !_rules[ruleOffsetOperator]() {
							goto l897
						}
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l897
						}
						position++
					l908:
						{
							position909, tokenIndex909 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l909
							}
							position++
							goto l908
						l909:
							position, tokenIndex = position909, tokenIndex909
						}
						goto l866
					l897:
						position, tokenIndex = position866, tokenIndex866
						if buffer[position] != rune('(') {
							goto l910
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l910
						}
						position++
					l911:
						{
							position912, tokenIndex912 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l912
							}
							position++
							goto l911
						l912:
							position, tokenIndex = position912, tokenIndex912
						}
						{
							position913, tokenIndex913 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l913
							}
							goto l914
						l913:
							position, tokenIndex = position913, tokenIndex913
						}
					l914:
						if !_rules[ruleOffsetOperator]() {
							goto l910
						}
						{
							position915, tokenIndex915 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l915
							}
							goto l916
						l915:
							position, tokenIndex = position915, tokenIndex915
						}
					l916:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l910
						}
						position++
					l917:
						{
							position918, tokenIndex918 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l918
							}
							position++
							goto l917
						l918:
							position, tokenIndex = position918, tokenIndex918
						}
						if buffer[position] != rune(')') {
							goto l910
						}
						position++
						if !_rules[ruleOffsetOperator]() {
							goto l910
						}
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l910
						}
						position++
					l919:
						{
							position920, tokenIndex920 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l920
							}
							position++
							goto l919
						l920:
							position, tokenIndex = position920, tokenIndex920
						}
						{
							position921, tokenIndex921 := position, tokenIndex
							if buffer[position] != rune('x') {
								goto l921
							}
							position++
							goto l910
						l921:
							position, tokenIndex = position921, tokenIndex921
						}
						goto l866
					l910:
						position, tokenIndex = position866, tokenIndex866
						if buffer[position] != rune('(') {
							goto l922
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l922
						}
						position++
					l923:
						{
							position924, tokenIndex924 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l924
							}
							position++
							goto l923
						l924:
							position, tokenIndex = position924, tokenIndex924
						}
						{
							position925, tokenIndex925 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l925
							}
							goto l926
						l925:
							position, tokenIndex = position925, tokenIndex925
						}
					l926:
						if !_rules[ruleOffsetOperator]() {
							goto l922
						}
						{
							position927, tokenIndex927 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l927
							}
							goto l928
						l927:
							position, tokenIndex = position927, tokenIndex927
						}
					l928:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l922
						}
						position++
					l929:
						{
							position930, tokenIndex930 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l930
							}
							position++
							goto l929
						l930:
							position, tokenIndex = position930, tokenIndex930
						}
						if buffer[position] != rune(')') {
							goto l922
						}
						position++
						goto l866
					l922:
						position, tokenIndex = position866, tokenIndex866
						if buffer[position] != rune('(') {
							goto l835
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l835
						}
						position++
					l931:
						{
							position932, tokenIndex932 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l932
							}
							position++
							goto l931
						l932:
							position, tokenIndex = position932, tokenIndex932
						}
						{
							position933, tokenIndex933 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l933
							}
							goto l934
						l933:
							position, tokenIndex = position933, tokenIndex933
						}
					l934:
						if !_rules[ruleOffsetOperator]() {
							goto l835
						}
						{
							position935, tokenIndex935 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l935
							}
							goto l936
						l935:
							position, tokenIndex = position935, tokenIndex935
						}
					l936:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l835
						}
						position++
					l937:
						{
							position938, tokenIndex938 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l938
							}
							position++
							goto l937
						l938:
							position, tokenIndex = position938, tokenIndex938
						}
						{
							position939, tokenIndex939 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l939
							}
							goto l940
						l939:
							position, tokenIndex = position939, tokenIndex939
						}
					l940:
						if !_rules[ruleOffsetOperator]() {
							goto l835
						}
						{
							position941, tokenIndex941 := position, tokenIndex
							if !_rules[ruleWS]() {
								goto l941
							}
							goto l942
						l941:
							position, tokenIndex = position941, tokenIndex941
						}
					l942:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l835
						}
						position++
					l943:
						{
							position944, tokenIndex944 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l944
							}
							position++
							goto l943
						l944:
							position, tokenIndex = position944, tokenIndex944
						}
						if buffer[position] != rune(')') {
							goto l835
						}
						position++
					}
				l866:
					{
						position945, tokenIndex945 := position, tokenIndex
						{
							position946, tokenIndex946 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l947
							}
							position++
							goto l946
						l947:
							position, tokenIndex = position946, tokenIndex946
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l945
							}
							position++
						}
					l946:
						goto l835
					l945:
						position, tokenIndex = position945, tokenIndex945
					}
				}
			l841:
				add(ruleOffset, position836)
			}
			memoize(54, position835, tokenIndex835, true)
			return true
		l835:
			memoize(54, position835, tokenIndex835, false)
			position, tokenIndex = position835, tokenIndex835
			return false
		},
		/* 55 Section <- <([a-z] / [A-Z] / '@')+> */
		func() bool {
			if memoized, ok := memoization[memoKey{55, position}]; ok {
				return memoizedResult(memoized)
			}
			position948, tokenIndex948 := position, tokenIndex
			{
				position949 := position
				{
					position952, tokenIndex952 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l953
					}
					position++
					goto l952
				l953:
					position, tokenIndex = position952, tokenIndex952
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l954
					}
					position++
					goto l952
				l954:
					position, tokenIndex = position952, tokenIndex952
					if buffer[position] != rune('@') {
						goto l948
					}
					position++
				}
			l952:
			l950:
				{
					position951, tokenIndex951 := position, tokenIndex
					{
						position955, tokenIndex955 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l956
						}
						position++
						goto l955
					l956:
						position, tokenIndex = position955, tokenIndex955
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l957
						}
						position++
						goto l955
					l957:
						position, tokenIndex = position955, tokenIndex955
						if buffer[position] != rune('@') {
							goto l951
						}
						position++
					}
				l955:
					goto l950
				l951:
					position, tokenIndex = position951, tokenIndex951
				}
				add(ruleSection, position949)
			}
			memoize(55, position948, tokenIndex948, true)
			return true
		l948:
			memoize(55, position948, tokenIndex948, false)
			position, tokenIndex = position948, tokenIndex948
			return false
		},
		/* 56 SegmentRegister <- <('%' ([c-g] / 's') ('s' ':'))> */
		func() bool {
			if memoized, ok := memoization[memoKey{56, position}]; ok {
				return memoizedResult(memoized)
			}
			position958, tokenIndex958 := position, tokenIndex
			{
				position959 := position
				if buffer[position] != rune('%') {
					goto l958
				}
				position++
				{
					position960, tokenIndex960 := position, tokenIndex
					if c := buffer[position]; c < rune('c') || c > rune('g') {
						goto l961
					}
					position++
					goto l960
				l961:
					position, tokenIndex = position960, tokenIndex960
					if buffer[position] != rune('s') {
						goto l958
					}
					position++
				}
			l960:
				if buffer[position] != rune('s') {
					goto l958
				}
				position++
				if buffer[position] != rune(':') {
					goto l958
				}
				position++
				add(ruleSegmentRegister, position959)
			}
			memoize(56, position958, tokenIndex958, true)
			return true
		l958:
			memoize(56, position958, tokenIndex958, false)
			position, tokenIndex = position958, tokenIndex958
			return false
		},
	}
	p.rules = _rules
	return nil
}
