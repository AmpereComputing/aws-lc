Index: aws-lc/crypto/fipsmodule/rand/urandom_test.cc
===================================================================
--- aws-lc.orig/crypto/fipsmodule/rand/urandom_test.cc
+++ aws-lc/crypto/fipsmodule/rand/urandom_test.cc
@@ -23,6 +23,8 @@
 #if defined(OPENSSL_X86_64) && !defined(BORINGSSL_SHARED_LIBRARY) && \
     !defined(BORINGSSL_UNSAFE_DETERMINISTIC_MODE) && defined(USE_NR_getrandom)
 
+#include <linux/types.h>
+
 #include <linux/random.h>
 #include <sys/ptrace.h>
 #include <sys/syscall.h>
@@ -34,6 +36,10 @@
 #define PTRACE_O_EXITKILL (1 << 20)
 #endif
 
+#if !defined(PTRACE_O_TRACESYSGOOD)
+#define PTRACE_O_TRACESYSGOOD (1)
+#endif
+
 // This test can be run with $OPENSSL_ia32cap=~0x4000000000000000 in order to
 // simulate the absence of RDRAND of machines that have it.
 
Index: aws-lc/crypto/trust_token/trust_token_test.cc
===================================================================
--- aws-lc.orig/crypto/trust_token/trust_token_test.cc
+++ aws-lc/crypto/trust_token/trust_token_test.cc
@@ -84,8 +84,8 @@ static std::vector<const TRUST_TOKEN_MET
 
 class TrustTokenProtocolTestBase : public ::testing::Test {
  public:
-  explicit TrustTokenProtocolTestBase(const TRUST_TOKEN_METHOD *method)
-      : method_(method) {}
+  explicit TrustTokenProtocolTestBase(const TRUST_TOKEN_METHOD *trust_token_method)
+      : method_(trust_token_method) {}
 
   // KeyID returns the key ID associated with key index |i|.
   static uint32_t KeyID(size_t i) {
@@ -550,13 +550,13 @@ TEST_P(TrustTokenMetadataTest, Truncated
   CBS real_response;
   CBS_init(&real_response, issue_resp, resp_len);
   uint16_t count;
-  uint32_t public_metadata;
+  uint32_t local_public_metadata;
   bssl::ScopedCBB bad_response;
   ASSERT_TRUE(CBB_init(bad_response.get(), 0));
   ASSERT_TRUE(CBS_get_u16(&real_response, &count));
   ASSERT_TRUE(CBB_add_u16(bad_response.get(), count));
-  ASSERT_TRUE(CBS_get_u32(&real_response, &public_metadata));
-  ASSERT_TRUE(CBB_add_u32(bad_response.get(), public_metadata));
+  ASSERT_TRUE(CBS_get_u32(&real_response, &local_public_metadata));
+  ASSERT_TRUE(CBB_add_u32(bad_response.get(), local_public_metadata));
 
   for (size_t i = 0; i < count; i++) {
     uint8_t s[PMBTOKEN_NONCE_SIZE];
@@ -609,13 +609,13 @@ TEST_P(TrustTokenMetadataTest, ExcessDat
   CBS real_response;
   CBS_init(&real_response, issue_resp, resp_len);
   uint16_t count;
-  uint32_t public_metadata;
+  uint32_t local_public_metadata;
   bssl::ScopedCBB bad_response;
   ASSERT_TRUE(CBB_init(bad_response.get(), 0));
   ASSERT_TRUE(CBS_get_u16(&real_response, &count));
   ASSERT_TRUE(CBB_add_u16(bad_response.get(), count));
-  ASSERT_TRUE(CBS_get_u32(&real_response, &public_metadata));
-  ASSERT_TRUE(CBB_add_u32(bad_response.get(), public_metadata));
+  ASSERT_TRUE(CBS_get_u32(&real_response, &local_public_metadata));
+  ASSERT_TRUE(CBB_add_u32(bad_response.get(), local_public_metadata));
 
   for (size_t i = 0; i < count; i++) {
     uint8_t s[PMBTOKEN_NONCE_SIZE];
